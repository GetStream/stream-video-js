/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "video_events/events.proto" (package "stream.video", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Broadcast } from "../video_models/models";
import { Participant } from "../video_models/models";
import { User } from "../video_models/models";
import { Call } from "../video_models/models";
import { DeviceRequest } from "../video_models/models";
import { UserRequest } from "../video_models/models";
/**
 * @generated from protobuf message stream.video.WebsocketEvent
 */
export interface WebsocketEvent {
    /**
     * @generated from protobuf oneof: event_payload
     */
    eventPayload: {
        oneofKind: "healthCheck";
        /**
         * @generated from protobuf field: stream.video.Healthcheck health_check = 1;
         */
        healthCheck: Healthcheck;
    } | {
        oneofKind: "callRinging";
        /**
         * @generated from protobuf field: stream.video.CallRinging call_ringing = 2;
         */
        callRinging: CallRinging;
    } | {
        oneofKind: "callCreated";
        /**
         * @generated from protobuf field: stream.video.CallCreated call_created = 3;
         */
        callCreated: CallCreated;
    } | {
        oneofKind: "callUpdated";
        /**
         * @generated from protobuf field: stream.video.CallUpdated call_updated = 4;
         */
        callUpdated: CallUpdated;
    } | {
        oneofKind: "callEnded";
        /**
         * @generated from protobuf field: stream.video.CallEnded call_ended = 5;
         */
        callEnded: CallEnded;
    } | {
        oneofKind: "callDeleted";
        /**
         * @generated from protobuf field: stream.video.CallDeleted call_deleted = 6;
         */
        callDeleted: CallDeleted;
    } | {
        oneofKind: "userUpdated";
        /**
         * @generated from protobuf field: stream.video.UserUpdated user_updated = 7;
         */
        userUpdated: UserUpdated;
    } | {
        oneofKind: "participantInvited";
        /**
         * @generated from protobuf field: stream.video.ParticipantInvited participant_invited = 8;
         */
        participantInvited: ParticipantInvited;
    } | {
        oneofKind: "participantUpdated";
        /**
         * @generated from protobuf field: stream.video.ParticipantUpdated participant_updated = 9;
         */
        participantUpdated: ParticipantUpdated;
    } | {
        oneofKind: "participantDeleted";
        /**
         * @generated from protobuf field: stream.video.ParticipantDeleted participant_deleted = 10;
         */
        participantDeleted: ParticipantDeleted;
    } | {
        oneofKind: "participantJoined";
        /**
         * @generated from protobuf field: stream.video.ParticipantJoined participant_joined = 11;
         */
        participantJoined: ParticipantJoined;
    } | {
        oneofKind: "participantLeft";
        /**
         * @generated from protobuf field: stream.video.ParticipantLeft participant_left = 12;
         */
        participantLeft: ParticipantLeft;
    } | {
        oneofKind: "broadcastStarted";
        /**
         * @generated from protobuf field: stream.video.BroadcastStarted broadcast_started = 13;
         */
        broadcastStarted: BroadcastStarted;
    } | {
        oneofKind: "broadcastEnded";
        /**
         * @generated from protobuf field: stream.video.BroadcastEnded broadcast_ended = 14;
         */
        broadcastEnded: BroadcastEnded;
    } | {
        oneofKind: "authPayload";
        /**
         * @generated from protobuf field: stream.video.AuthPayload auth_payload = 15;
         */
        authPayload: AuthPayload;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.Healthcheck
 */
export interface Healthcheck {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string client_id = 2;
     */
    clientId: string;
}
/**
 * @generated from protobuf message stream.video.AuthPayload
 */
export interface AuthPayload {
    /**
     * @generated from protobuf field: stream.video.UserRequest user = 1;
     */
    user?: UserRequest;
    /**
     * @generated from protobuf field: stream.video.DeviceRequest device = 2;
     */
    device?: DeviceRequest;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
}
/**
 * *
 * CallRinging is fired when a call is created with the ring=true option
 * Or when you manually call call.ring()
 *
 * @generated from protobuf message stream.video.CallRinging
 */
export interface CallRinging {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * *
 * CallCreated is fired when a call is created
 *
 * @generated from protobuf message stream.video.CallCreated
 */
export interface CallCreated {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.CallUpdated
 */
export interface CallUpdated {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.CallEnded
 */
export interface CallEnded {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.CallDeleted
 */
export interface CallDeleted {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.UserUpdated
 */
export interface UserUpdated {
    /**
     * @generated from protobuf field: stream.video.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message stream.video.ParticipantInvited
 */
export interface ParticipantInvited {
    /**
     * @generated from protobuf field: stream.video.Participant participant = 1;
     */
    participant?: Participant;
}
/**
 * @generated from protobuf message stream.video.ParticipantUpdated
 */
export interface ParticipantUpdated {
    /**
     * @generated from protobuf field: stream.video.Participant participant = 1;
     */
    participant?: Participant;
}
/**
 * @generated from protobuf message stream.video.ParticipantDeleted
 */
export interface ParticipantDeleted {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.ParticipantJoined
 */
export interface ParticipantJoined {
    /**
     * @generated from protobuf field: stream.video.Participant participant = 1;
     */
    participant?: Participant;
}
/**
 * @generated from protobuf message stream.video.ParticipantLeft
 */
export interface ParticipantLeft {
    /**
     * @generated from protobuf field: stream.video.Participant participant = 1;
     */
    participant?: Participant;
}
/**
 * @generated from protobuf message stream.video.BroadcastStarted
 */
export interface BroadcastStarted {
    /**
     * @generated from protobuf field: stream.video.Broadcast broadcast = 1;
     */
    broadcast?: Broadcast;
}
/**
 * @generated from protobuf message stream.video.BroadcastEnded
 */
export interface BroadcastEnded {
    /**
     * @generated from protobuf field: stream.video.Broadcast broadcast = 1;
     */
    broadcast?: Broadcast;
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketEvent$Type extends MessageType<WebsocketEvent> {
    constructor() {
        super("stream.video.WebsocketEvent", [
            { no: 1, name: "health_check", kind: "message", oneof: "eventPayload", T: () => Healthcheck },
            { no: 2, name: "call_ringing", kind: "message", oneof: "eventPayload", T: () => CallRinging },
            { no: 3, name: "call_created", kind: "message", oneof: "eventPayload", T: () => CallCreated },
            { no: 4, name: "call_updated", kind: "message", oneof: "eventPayload", T: () => CallUpdated },
            { no: 5, name: "call_ended", kind: "message", oneof: "eventPayload", T: () => CallEnded },
            { no: 6, name: "call_deleted", kind: "message", oneof: "eventPayload", T: () => CallDeleted },
            { no: 7, name: "user_updated", kind: "message", oneof: "eventPayload", T: () => UserUpdated },
            { no: 8, name: "participant_invited", kind: "message", oneof: "eventPayload", T: () => ParticipantInvited },
            { no: 9, name: "participant_updated", kind: "message", oneof: "eventPayload", T: () => ParticipantUpdated },
            { no: 10, name: "participant_deleted", kind: "message", oneof: "eventPayload", T: () => ParticipantDeleted },
            { no: 11, name: "participant_joined", kind: "message", oneof: "eventPayload", T: () => ParticipantJoined },
            { no: 12, name: "participant_left", kind: "message", oneof: "eventPayload", T: () => ParticipantLeft },
            { no: 13, name: "broadcast_started", kind: "message", oneof: "eventPayload", T: () => BroadcastStarted },
            { no: 14, name: "broadcast_ended", kind: "message", oneof: "eventPayload", T: () => BroadcastEnded },
            { no: 15, name: "auth_payload", kind: "message", oneof: "eventPayload", T: () => AuthPayload }
        ]);
    }
    create(value?: PartialMessage<WebsocketEvent>): WebsocketEvent {
        const message = { eventPayload: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketEvent): WebsocketEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Healthcheck health_check */ 1:
                    message.eventPayload = {
                        oneofKind: "healthCheck",
                        healthCheck: Healthcheck.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).healthCheck)
                    };
                    break;
                case /* stream.video.CallRinging call_ringing */ 2:
                    message.eventPayload = {
                        oneofKind: "callRinging",
                        callRinging: CallRinging.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).callRinging)
                    };
                    break;
                case /* stream.video.CallCreated call_created */ 3:
                    message.eventPayload = {
                        oneofKind: "callCreated",
                        callCreated: CallCreated.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).callCreated)
                    };
                    break;
                case /* stream.video.CallUpdated call_updated */ 4:
                    message.eventPayload = {
                        oneofKind: "callUpdated",
                        callUpdated: CallUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).callUpdated)
                    };
                    break;
                case /* stream.video.CallEnded call_ended */ 5:
                    message.eventPayload = {
                        oneofKind: "callEnded",
                        callEnded: CallEnded.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).callEnded)
                    };
                    break;
                case /* stream.video.CallDeleted call_deleted */ 6:
                    message.eventPayload = {
                        oneofKind: "callDeleted",
                        callDeleted: CallDeleted.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).callDeleted)
                    };
                    break;
                case /* stream.video.UserUpdated user_updated */ 7:
                    message.eventPayload = {
                        oneofKind: "userUpdated",
                        userUpdated: UserUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).userUpdated)
                    };
                    break;
                case /* stream.video.ParticipantInvited participant_invited */ 8:
                    message.eventPayload = {
                        oneofKind: "participantInvited",
                        participantInvited: ParticipantInvited.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantInvited)
                    };
                    break;
                case /* stream.video.ParticipantUpdated participant_updated */ 9:
                    message.eventPayload = {
                        oneofKind: "participantUpdated",
                        participantUpdated: ParticipantUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantUpdated)
                    };
                    break;
                case /* stream.video.ParticipantDeleted participant_deleted */ 10:
                    message.eventPayload = {
                        oneofKind: "participantDeleted",
                        participantDeleted: ParticipantDeleted.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantDeleted)
                    };
                    break;
                case /* stream.video.ParticipantJoined participant_joined */ 11:
                    message.eventPayload = {
                        oneofKind: "participantJoined",
                        participantJoined: ParticipantJoined.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantJoined)
                    };
                    break;
                case /* stream.video.ParticipantLeft participant_left */ 12:
                    message.eventPayload = {
                        oneofKind: "participantLeft",
                        participantLeft: ParticipantLeft.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantLeft)
                    };
                    break;
                case /* stream.video.BroadcastStarted broadcast_started */ 13:
                    message.eventPayload = {
                        oneofKind: "broadcastStarted",
                        broadcastStarted: BroadcastStarted.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).broadcastStarted)
                    };
                    break;
                case /* stream.video.BroadcastEnded broadcast_ended */ 14:
                    message.eventPayload = {
                        oneofKind: "broadcastEnded",
                        broadcastEnded: BroadcastEnded.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).broadcastEnded)
                    };
                    break;
                case /* stream.video.AuthPayload auth_payload */ 15:
                    message.eventPayload = {
                        oneofKind: "authPayload",
                        authPayload: AuthPayload.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).authPayload)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Healthcheck health_check = 1; */
        if (message.eventPayload.oneofKind === "healthCheck")
            Healthcheck.internalBinaryWrite(message.eventPayload.healthCheck, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallRinging call_ringing = 2; */
        if (message.eventPayload.oneofKind === "callRinging")
            CallRinging.internalBinaryWrite(message.eventPayload.callRinging, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallCreated call_created = 3; */
        if (message.eventPayload.oneofKind === "callCreated")
            CallCreated.internalBinaryWrite(message.eventPayload.callCreated, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallUpdated call_updated = 4; */
        if (message.eventPayload.oneofKind === "callUpdated")
            CallUpdated.internalBinaryWrite(message.eventPayload.callUpdated, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallEnded call_ended = 5; */
        if (message.eventPayload.oneofKind === "callEnded")
            CallEnded.internalBinaryWrite(message.eventPayload.callEnded, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallDeleted call_deleted = 6; */
        if (message.eventPayload.oneofKind === "callDeleted")
            CallDeleted.internalBinaryWrite(message.eventPayload.callDeleted, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.UserUpdated user_updated = 7; */
        if (message.eventPayload.oneofKind === "userUpdated")
            UserUpdated.internalBinaryWrite(message.eventPayload.userUpdated, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.ParticipantInvited participant_invited = 8; */
        if (message.eventPayload.oneofKind === "participantInvited")
            ParticipantInvited.internalBinaryWrite(message.eventPayload.participantInvited, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.ParticipantUpdated participant_updated = 9; */
        if (message.eventPayload.oneofKind === "participantUpdated")
            ParticipantUpdated.internalBinaryWrite(message.eventPayload.participantUpdated, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.ParticipantDeleted participant_deleted = 10; */
        if (message.eventPayload.oneofKind === "participantDeleted")
            ParticipantDeleted.internalBinaryWrite(message.eventPayload.participantDeleted, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.ParticipantJoined participant_joined = 11; */
        if (message.eventPayload.oneofKind === "participantJoined")
            ParticipantJoined.internalBinaryWrite(message.eventPayload.participantJoined, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.ParticipantLeft participant_left = 12; */
        if (message.eventPayload.oneofKind === "participantLeft")
            ParticipantLeft.internalBinaryWrite(message.eventPayload.participantLeft, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.BroadcastStarted broadcast_started = 13; */
        if (message.eventPayload.oneofKind === "broadcastStarted")
            BroadcastStarted.internalBinaryWrite(message.eventPayload.broadcastStarted, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.BroadcastEnded broadcast_ended = 14; */
        if (message.eventPayload.oneofKind === "broadcastEnded")
            BroadcastEnded.internalBinaryWrite(message.eventPayload.broadcastEnded, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.AuthPayload auth_payload = 15; */
        if (message.eventPayload.oneofKind === "authPayload")
            AuthPayload.internalBinaryWrite(message.eventPayload.authPayload, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.WebsocketEvent
 */
export const WebsocketEvent = new WebsocketEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Healthcheck$Type extends MessageType<Healthcheck> {
    constructor() {
        super("stream.video.Healthcheck", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Healthcheck>): Healthcheck {
        const message = { userId: "", clientId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Healthcheck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Healthcheck): Healthcheck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Healthcheck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string client_id = 2; */
        if (message.clientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.Healthcheck
 */
export const Healthcheck = new Healthcheck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthPayload$Type extends MessageType<AuthPayload> {
    constructor() {
        super("stream.video.AuthPayload", [
            { no: 1, name: "user", kind: "message", T: () => UserRequest },
            { no: 2, name: "device", kind: "message", T: () => DeviceRequest },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthPayload>): AuthPayload {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthPayload): AuthPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.UserRequest user */ 1:
                    message.user = UserRequest.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* stream.video.DeviceRequest device */ 2:
                    message.device = DeviceRequest.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.UserRequest user = 1; */
        if (message.user)
            UserRequest.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.DeviceRequest device = 2; */
        if (message.device)
            DeviceRequest.internalBinaryWrite(message.device, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.AuthPayload
 */
export const AuthPayload = new AuthPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallRinging$Type extends MessageType<CallRinging> {
    constructor() {
        super("stream.video.CallRinging", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CallRinging>): CallRinging {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallRinging>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallRinging): CallRinging {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallRinging, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallRinging
 */
export const CallRinging = new CallRinging$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallCreated$Type extends MessageType<CallCreated> {
    constructor() {
        super("stream.video.CallCreated", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CallCreated>): CallCreated {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallCreated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallCreated): CallCreated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallCreated
 */
export const CallCreated = new CallCreated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallUpdated$Type extends MessageType<CallUpdated> {
    constructor() {
        super("stream.video.CallUpdated", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CallUpdated>): CallUpdated {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallUpdated): CallUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallUpdated
 */
export const CallUpdated = new CallUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallEnded$Type extends MessageType<CallEnded> {
    constructor() {
        super("stream.video.CallEnded", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CallEnded>): CallEnded {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallEnded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallEnded): CallEnded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallEnded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallEnded
 */
export const CallEnded = new CallEnded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallDeleted$Type extends MessageType<CallDeleted> {
    constructor() {
        super("stream.video.CallDeleted", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CallDeleted>): CallDeleted {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallDeleted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallDeleted): CallDeleted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallDeleted
 */
export const CallDeleted = new CallDeleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserUpdated$Type extends MessageType<UserUpdated> {
    constructor() {
        super("stream.video.UserUpdated", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserUpdated>): UserUpdated {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserUpdated): UserUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UserUpdated
 */
export const UserUpdated = new UserUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantInvited$Type extends MessageType<ParticipantInvited> {
    constructor() {
        super("stream.video.ParticipantInvited", [
            { no: 1, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantInvited>): ParticipantInvited {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantInvited>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantInvited): ParticipantInvited {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Participant participant */ 1:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantInvited, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Participant participant = 1; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantInvited
 */
export const ParticipantInvited = new ParticipantInvited$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantUpdated$Type extends MessageType<ParticipantUpdated> {
    constructor() {
        super("stream.video.ParticipantUpdated", [
            { no: 1, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantUpdated>): ParticipantUpdated {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantUpdated): ParticipantUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Participant participant */ 1:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Participant participant = 1; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantUpdated
 */
export const ParticipantUpdated = new ParticipantUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantDeleted$Type extends MessageType<ParticipantDeleted> {
    constructor() {
        super("stream.video.ParticipantDeleted", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParticipantDeleted>): ParticipantDeleted {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantDeleted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantDeleted): ParticipantDeleted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantDeleted
 */
export const ParticipantDeleted = new ParticipantDeleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantJoined$Type extends MessageType<ParticipantJoined> {
    constructor() {
        super("stream.video.ParticipantJoined", [
            { no: 1, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantJoined>): ParticipantJoined {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantJoined>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantJoined): ParticipantJoined {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Participant participant */ 1:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantJoined, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Participant participant = 1; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantJoined
 */
export const ParticipantJoined = new ParticipantJoined$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantLeft$Type extends MessageType<ParticipantLeft> {
    constructor() {
        super("stream.video.ParticipantLeft", [
            { no: 1, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantLeft>): ParticipantLeft {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantLeft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantLeft): ParticipantLeft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Participant participant */ 1:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantLeft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Participant participant = 1; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantLeft
 */
export const ParticipantLeft = new ParticipantLeft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastStarted$Type extends MessageType<BroadcastStarted> {
    constructor() {
        super("stream.video.BroadcastStarted", [
            { no: 1, name: "broadcast", kind: "message", T: () => Broadcast }
        ]);
    }
    create(value?: PartialMessage<BroadcastStarted>): BroadcastStarted {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastStarted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastStarted): BroadcastStarted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Broadcast broadcast */ 1:
                    message.broadcast = Broadcast.internalBinaryRead(reader, reader.uint32(), options, message.broadcast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Broadcast broadcast = 1; */
        if (message.broadcast)
            Broadcast.internalBinaryWrite(message.broadcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.BroadcastStarted
 */
export const BroadcastStarted = new BroadcastStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastEnded$Type extends MessageType<BroadcastEnded> {
    constructor() {
        super("stream.video.BroadcastEnded", [
            { no: 1, name: "broadcast", kind: "message", T: () => Broadcast }
        ]);
    }
    create(value?: PartialMessage<BroadcastEnded>): BroadcastEnded {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastEnded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastEnded): BroadcastEnded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Broadcast broadcast */ 1:
                    message.broadcast = Broadcast.internalBinaryRead(reader, reader.uint32(), options, message.broadcast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastEnded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Broadcast broadcast = 1; */
        if (message.broadcast)
            Broadcast.internalBinaryWrite(message.broadcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.BroadcastEnded
 */
export const BroadcastEnded = new BroadcastEnded$Type();
