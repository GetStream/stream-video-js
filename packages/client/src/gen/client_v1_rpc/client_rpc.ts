/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "client_v1_rpc/client_rpc.proto" (package "stream.video.coordinator.client_v1_rpc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DeviceInput } from "../device_v1/device";
import { UserInput } from "../user_v1/user";
import { CallStats } from "../stat_v1/stat";
import { UserCapability } from "../permission_v1/permission";
import { Edge } from "../edge_v1/edge";
import { User } from "../user_v1/user";
import { Device } from "../device_v1/device";
import { EdgeServer } from "../edge_v1/edge";
import { Latency } from "../broadcast_v1/broadcast";
import { TranscribeOptions } from "../feature_v1/feature";
import { RTMPOptions } from "../broadcast_v1/broadcast";
import { BoolValue } from "../google/protobuf/wrappers";
import { Struct } from "../google/protobuf/struct";
import { CallState } from "../call_v1/call";
import { Call } from "../call_v1/call";
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallRequest
 */
export interface GetCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallResponse
 */
export interface GetCallResponse {
    /**
     * @generated from protobuf field: stream.video.call_v1.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.call_v1.CallState call_state = 2;
     */
    callState?: CallState;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateCallRequest
 */
export interface CreateCallRequest {
    /**
     * The call type.
     * Required.
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * The call id, if not provided a unique value will be generated based on UUID v4.
     * Required.
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * Call custom data.
     *
     * @generated from protobuf field: google.protobuf.Struct custom = 3;
     */
    custom?: Struct;
    /**
     * The list of participant ids.
     *
     * @generated from protobuf field: repeated string participant_ids = 4;
     */
    participantIds: string[];
    /**
     * HLS broadcast, overrides the default call type setting if provided.
     *
     * @generated from protobuf field: google.protobuf.BoolValue hls_broadcast = 6;
     */
    hlsBroadcast?: BoolValue;
    /**
     * Request video to be forwarded to a list of RTMP servers.
     *
     * @generated from protobuf field: stream.video.broadcast_v1.RTMPOptions rtmp = 7;
     */
    rtmp?: RTMPOptions;
    /**
     * Transcription, overrides the default call type setting if provided.
     *
     * @generated from protobuf field: google.protobuf.BoolValue transcribe = 8;
     */
    transcribe?: BoolValue;
    /**
     * The transcription options for this call, only relevant if transcribe is enabled.
     *
     * @generated from protobuf field: stream.video.feature_v1.TranscribeOptions transcribe_options = 9;
     */
    transcribeOptions?: TranscribeOptions;
    /**
     * The recording option, overrides the default call type setting if provided.
     *
     * @generated from protobuf field: google.protobuf.BoolValue recording = 10;
     */
    recording?: BoolValue;
    /**
     * The ring option, overrides the default call type setting if provided.
     *
     * @generated from protobuf field: google.protobuf.BoolValue notify = 11;
     */
    notify?: BoolValue;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateCallResponse
 */
export interface CreateCallResponse {
    /**
     * @generated from protobuf field: stream.video.call_v1.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsRequest
 */
export interface QueryCallsRequest {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsResponse
 */
export interface QueryCallsResponse {
    /**
     * @generated from protobuf field: repeated stream.video.call_v1.Call calls = 1;
     */
    calls: Call[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallRequest
 */
export interface UpdateCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: bytes json_encoded_custom_data = 3;
     */
    jsonEncodedCustomData: Uint8Array; // TODO: additional options and overrides to default settings
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallResponse
 */
export interface UpdateCallResponse {
    /**
     * @generated from protobuf field: stream.video.call_v1.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallRequest
 */
export interface DeleteCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallResponse
 */
export interface DeleteCallResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest
 */
export interface SelectEdgeServerRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * @generated from protobuf field: map<string, stream.video.broadcast_v1.Latency> latency_by_edge = 3;
     */
    latencyByEdge: {
        [key: string]: Latency;
    };
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SelectEdgeServerResponse
 */
export interface SelectEdgeServerResponse {
    /**
     * The edge server hosting the video call.
     *
     * @generated from protobuf field: stream.video.edge_v1.EdgeServer edge_server = 1;
     */
    edgeServer?: EdgeServer;
    /**
     * The auth token needed to authenticate to the edge server.
     *
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.AddDeviceRequest
 */
export interface AddDeviceRequest {
    /**
     * The device id to register.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The name of the push notification provider (eg. apn-production).
     *
     * @generated from protobuf field: string push_provider_name = 2;
     */
    pushProviderName: string;
    /**
     * The id of the user the device is registered to, only server-side requests can provide this.
     *
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.AddDeviceResponse
 */
export interface AddDeviceResponse {
    /**
     * @generated from protobuf field: stream.video.device_v1.Device device = 1;
     */
    device?: Device;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.RemoveDeviceRequest
 */
export interface RemoveDeviceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.RemoveDeviceResponse
 */
export interface RemoveDeviceResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ListDevicesRequest
 */
export interface ListDevicesRequest {
    /**
     * The id of the user, only server-side requests can provide this.
     *
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ListDevicesResponse
 */
export interface ListDevicesResponse {
    /**
     * @generated from protobuf field: repeated stream.video.device_v1.Device devices = 1;
     */
    devices: Device[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventRequest
 */
export interface SendCustomEventRequest {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventResponse
 */
export interface SendCustomEventResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.JoinCallRequest
 */
export interface JoinCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.JoinCallResponse
 */
export interface JoinCallResponse {
    /**
     * @generated from protobuf field: stream.video.user_v1.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: stream.video.call_v1.Call call = 2;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.call_v1.CallState call_state = 3;
     */
    callState?: CallState;
    /**
     * @generated from protobuf field: repeated stream.video.edge_v1.Edge edges = 4;
     */
    edges: Edge[];
    /**
     * @generated from protobuf field: repeated stream.video.permission_v1.UserCapability own_capabilities = 5;
     */
    ownCapabilities: UserCapability[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.LeaveCallRequest
 */
export interface LeaveCallRequest {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.LeaveCallResponse
 */
export interface LeaveCallResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.EndCallRequest
 */
export interface EndCallRequest {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.EndCallResponse
 */
export interface EndCallResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendEventRequest
 */
export interface SendEventRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string call_type = 2;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 3;
     */
    callId: string;
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.UserEventType event_type = 4;
     */
    eventType: UserEventType;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendEventResponse
 */
export interface SendEventResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest
 */
export interface ReportCallStatsRequest {
    /**
     * The call type
     *
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * The call id
     *
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * A WebRTC Stats report, as defined in https://www.w3.org/TR/webrtc/#dom-rtcstatsreport
     *
     * @generated from protobuf field: google.protobuf.Struct stats = 3;
     */
    stats?: Struct;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse
 */
export interface ReportCallStatsResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsRequest
 */
export interface GetCallStatsRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsResponse
 */
export interface GetCallStatsResponse {
    /**
     * @generated from protobuf field: stream.video.call_v1.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.stat_v1.CallStats call_stats = 2;
     */
    callStats?: CallStats;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueRequest
 */
export interface ReportIssueRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * Optional description.
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct custom = 4;
     */
    custom?: Struct;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueResponse
 */
export interface ReportIssueResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallRequest
 */
export interface ReviewCallRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * Rating between 0 and 5 stars.
     *
     * @generated from protobuf field: float stars = 3;
     */
    stars: number;
    /**
     * Optional description.
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * Optional custom data.
     *
     * @generated from protobuf field: google.protobuf.Struct custom = 5;
     */
    custom?: Struct;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallResponse
 */
export interface ReviewCallResponse {
}
/**
 * A payload that is sent through websocket to authenticate a connection
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest
 */
export interface WebsocketAuthRequest {
    /**
     * Application API key that matches a secret is used to sign a token
     *
     * @generated from protobuf field: string api_key = 1;
     */
    apiKey: string;
    /**
     * A client JWT token
     *
     * @generated from protobuf field: string token = 2;
     */
    token: string;
    /**
     * Optional UserInput. When present, it is used to create or update user information.
     * If contains some changes, a permission check will be performed
     *
     * @generated from protobuf field: stream.video.user_v1.UserInput user = 3;
     */
    user?: UserInput;
    /**
     * Optional DeviceInput. When present, a device will be created for a user. If device
     * already exists, nothing will happen
     *
     * @generated from protobuf field: stream.video.device_v1.DeviceInput device = 4;
     */
    device?: DeviceInput;
}
/**
 * @generated from protobuf enum stream.video.coordinator.client_v1_rpc.UserEventType
 */
export enum UserEventType {
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_AUDIO_MUTED_UNSPECIFIED = 0;
     */
    AUDIO_MUTED_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_AUDIO_UNMUTED = 1;
     */
    AUDIO_UNMUTED = 1,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_VIDEO_STARTED = 2;
     */
    VIDEO_STARTED = 2,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_VIDEO_STOPPED = 3;
     */
    VIDEO_STOPPED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCallRequest$Type extends MessageType<GetCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallRequest>): GetCallRequest {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallRequest): GetCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallRequest
 */
export const GetCallRequest = new GetCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallResponse$Type extends MessageType<GetCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "call_state", kind: "message", T: () => CallState }
        ]);
    }
    create(value?: PartialMessage<GetCallResponse>): GetCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallResponse): GetCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.call_v1.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.call_v1.CallState call_state */ 2:
                    message.callState = CallState.internalBinaryRead(reader, reader.uint32(), options, message.callState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.call_v1.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.call_v1.CallState call_state = 2; */
        if (message.callState)
            CallState.internalBinaryWrite(message.callState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallResponse
 */
export const GetCallResponse = new GetCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallRequest$Type extends MessageType<CreateCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateCallRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "custom", kind: "message", T: () => Struct },
            { no: 4, name: "participant_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hls_broadcast", kind: "message", T: () => BoolValue },
            { no: 7, name: "rtmp", kind: "message", T: () => RTMPOptions },
            { no: 8, name: "transcribe", kind: "message", T: () => BoolValue },
            { no: 9, name: "transcribe_options", kind: "message", T: () => TranscribeOptions },
            { no: 10, name: "recording", kind: "message", T: () => BoolValue },
            { no: 11, name: "notify", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<CreateCallRequest>): CreateCallRequest {
        const message = { type: "", id: "", participantIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallRequest): CreateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 3:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                case /* repeated string participant_ids */ 4:
                    message.participantIds.push(reader.string());
                    break;
                case /* google.protobuf.BoolValue hls_broadcast */ 6:
                    message.hlsBroadcast = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.hlsBroadcast);
                    break;
                case /* stream.video.broadcast_v1.RTMPOptions rtmp */ 7:
                    message.rtmp = RTMPOptions.internalBinaryRead(reader, reader.uint32(), options, message.rtmp);
                    break;
                case /* google.protobuf.BoolValue transcribe */ 8:
                    message.transcribe = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.transcribe);
                    break;
                case /* stream.video.feature_v1.TranscribeOptions transcribe_options */ 9:
                    message.transcribeOptions = TranscribeOptions.internalBinaryRead(reader, reader.uint32(), options, message.transcribeOptions);
                    break;
                case /* google.protobuf.BoolValue recording */ 10:
                    message.recording = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.recording);
                    break;
                case /* google.protobuf.BoolValue notify */ 11:
                    message.notify = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.notify);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Struct custom = 3; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string participant_ids = 4; */
        for (let i = 0; i < message.participantIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.participantIds[i]);
        /* google.protobuf.BoolValue hls_broadcast = 6; */
        if (message.hlsBroadcast)
            BoolValue.internalBinaryWrite(message.hlsBroadcast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.broadcast_v1.RTMPOptions rtmp = 7; */
        if (message.rtmp)
            RTMPOptions.internalBinaryWrite(message.rtmp, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue transcribe = 8; */
        if (message.transcribe)
            BoolValue.internalBinaryWrite(message.transcribe, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.feature_v1.TranscribeOptions transcribe_options = 9; */
        if (message.transcribeOptions)
            TranscribeOptions.internalBinaryWrite(message.transcribeOptions, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue recording = 10; */
        if (message.recording)
            BoolValue.internalBinaryWrite(message.recording, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue notify = 11; */
        if (message.notify)
            BoolValue.internalBinaryWrite(message.notify, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateCallRequest
 */
export const CreateCallRequest = new CreateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallResponse$Type extends MessageType<CreateCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateCallResponse>): CreateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallResponse): CreateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.call_v1.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.call_v1.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateCallResponse
 */
export const CreateCallResponse = new CreateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCallsRequest$Type extends MessageType<QueryCallsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryCallsRequest", []);
    }
    create(value?: PartialMessage<QueryCallsRequest>): QueryCallsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCallsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCallsRequest): QueryCallsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryCallsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsRequest
 */
export const QueryCallsRequest = new QueryCallsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCallsResponse$Type extends MessageType<QueryCallsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryCallsResponse", [
            { no: 1, name: "calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Call }
        ]);
    }
    create(value?: PartialMessage<QueryCallsResponse>): QueryCallsResponse {
        const message = { calls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCallsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCallsResponse): QueryCallsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.call_v1.Call calls */ 1:
                    message.calls.push(Call.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCallsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.call_v1.Call calls = 1; */
        for (let i = 0; i < message.calls.length; i++)
            Call.internalBinaryWrite(message.calls[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsResponse
 */
export const QueryCallsResponse = new QueryCallsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallRequest$Type extends MessageType<UpdateCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "json_encoded_custom_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateCallRequest>): UpdateCallRequest {
        const message = { id: "", type: "", jsonEncodedCustomData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallRequest): UpdateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* bytes json_encoded_custom_data */ 3:
                    message.jsonEncodedCustomData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* bytes json_encoded_custom_data = 3; */
        if (message.jsonEncodedCustomData.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.jsonEncodedCustomData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallRequest
 */
export const UpdateCallRequest = new UpdateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallResponse$Type extends MessageType<UpdateCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<UpdateCallResponse>): UpdateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallResponse): UpdateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.call_v1.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.call_v1.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallResponse
 */
export const UpdateCallResponse = new UpdateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallRequest$Type extends MessageType<DeleteCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCallRequest>): DeleteCallRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallRequest): DeleteCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallRequest
 */
export const DeleteCallRequest = new DeleteCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallResponse$Type extends MessageType<DeleteCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteCallResponse", []);
    }
    create(value?: PartialMessage<DeleteCallResponse>): DeleteCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallResponse): DeleteCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallResponse
 */
export const DeleteCallResponse = new DeleteCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEdgeServerRequest$Type extends MessageType<SelectEdgeServerRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "latency_by_edge", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Latency } }
        ]);
    }
    create(value?: PartialMessage<SelectEdgeServerRequest>): SelectEdgeServerRequest {
        const message = { callType: "", callId: "", latencyByEdge: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEdgeServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEdgeServerRequest): SelectEdgeServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* map<string, stream.video.broadcast_v1.Latency> latency_by_edge */ 3:
                    this.binaryReadMap3(message.latencyByEdge, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SelectEdgeServerRequest["latencyByEdge"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SelectEdgeServerRequest["latencyByEdge"] | undefined, val: SelectEdgeServerRequest["latencyByEdge"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Latency.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest.latency_by_edge");
            }
        }
        map[key ?? ""] = val ?? Latency.create();
    }
    internalBinaryWrite(message: SelectEdgeServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* map<string, stream.video.broadcast_v1.Latency> latency_by_edge = 3; */
        for (let k of Object.keys(message.latencyByEdge)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Latency.internalBinaryWrite(message.latencyByEdge[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest
 */
export const SelectEdgeServerRequest = new SelectEdgeServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEdgeServerResponse$Type extends MessageType<SelectEdgeServerResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SelectEdgeServerResponse", [
            { no: 1, name: "edge_server", kind: "message", T: () => EdgeServer, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<SelectEdgeServerResponse>): SelectEdgeServerResponse {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEdgeServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEdgeServerResponse): SelectEdgeServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.edge_v1.EdgeServer edge_server */ 1:
                    message.edgeServer = EdgeServer.internalBinaryRead(reader, reader.uint32(), options, message.edgeServer);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectEdgeServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.edge_v1.EdgeServer edge_server = 1; */
        if (message.edgeServer)
            EdgeServer.internalBinaryWrite(message.edgeServer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SelectEdgeServerResponse
 */
export const SelectEdgeServerResponse = new SelectEdgeServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDeviceRequest$Type extends MessageType<AddDeviceRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.AddDeviceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "push_provider_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddDeviceRequest>): AddDeviceRequest {
        const message = { id: "", pushProviderName: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDeviceRequest): AddDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string push_provider_name */ 2:
                    message.pushProviderName = reader.string();
                    break;
                case /* string user_id */ 3:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string push_provider_name = 2; */
        if (message.pushProviderName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pushProviderName);
        /* string user_id = 3; */
        if (message.userId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.AddDeviceRequest
 */
export const AddDeviceRequest = new AddDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDeviceResponse$Type extends MessageType<AddDeviceResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.AddDeviceResponse", [
            { no: 1, name: "device", kind: "message", T: () => Device }
        ]);
    }
    create(value?: PartialMessage<AddDeviceResponse>): AddDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDeviceResponse): AddDeviceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.device_v1.Device device */ 1:
                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.device_v1.Device device = 1; */
        if (message.device)
            Device.internalBinaryWrite(message.device, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.AddDeviceResponse
 */
export const AddDeviceResponse = new AddDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDeviceRequest$Type extends MessageType<RemoveDeviceRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.RemoveDeviceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveDeviceRequest>): RemoveDeviceRequest {
        const message = { id: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDeviceRequest): RemoveDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.RemoveDeviceRequest
 */
export const RemoveDeviceRequest = new RemoveDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDeviceResponse$Type extends MessageType<RemoveDeviceResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.RemoveDeviceResponse", []);
    }
    create(value?: PartialMessage<RemoveDeviceResponse>): RemoveDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDeviceResponse): RemoveDeviceResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.RemoveDeviceResponse
 */
export const RemoveDeviceResponse = new RemoveDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesRequest$Type extends MessageType<ListDevicesRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ListDevicesRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDevicesRequest>): ListDevicesRequest {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesRequest): ListDevicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ListDevicesRequest
 */
export const ListDevicesRequest = new ListDevicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesResponse$Type extends MessageType<ListDevicesResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ListDevicesResponse", [
            { no: 1, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device }
        ]);
    }
    create(value?: PartialMessage<ListDevicesResponse>): ListDevicesResponse {
        const message = { devices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesResponse): ListDevicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.device_v1.Device devices */ 1:
                    message.devices.push(Device.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.device_v1.Device devices = 1; */
        for (let i = 0; i < message.devices.length; i++)
            Device.internalBinaryWrite(message.devices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ListDevicesResponse
 */
export const ListDevicesResponse = new ListDevicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventRequest$Type extends MessageType<SendCustomEventRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendCustomEventRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendCustomEventRequest>): SendCustomEventRequest {
        const message = { type: "", data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventRequest): SendCustomEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendCustomEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventRequest
 */
export const SendCustomEventRequest = new SendCustomEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventResponse$Type extends MessageType<SendCustomEventResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendCustomEventResponse", []);
    }
    create(value?: PartialMessage<SendCustomEventResponse>): SendCustomEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventResponse): SendCustomEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendCustomEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventResponse
 */
export const SendCustomEventResponse = new SendCustomEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallRequest$Type extends MessageType<JoinCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.JoinCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinCallRequest>): JoinCallRequest {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallRequest): JoinCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.JoinCallRequest
 */
export const JoinCallRequest = new JoinCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallResponse$Type extends MessageType<JoinCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.JoinCallResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "call", kind: "message", T: () => Call },
            { no: 3, name: "call_state", kind: "message", T: () => CallState },
            { no: 4, name: "edges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Edge },
            { no: 5, name: "own_capabilities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserCapability }
        ]);
    }
    create(value?: PartialMessage<JoinCallResponse>): JoinCallResponse {
        const message = { edges: [], ownCapabilities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallResponse): JoinCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.user_v1.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* stream.video.call_v1.Call call */ 2:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.call_v1.CallState call_state */ 3:
                    message.callState = CallState.internalBinaryRead(reader, reader.uint32(), options, message.callState);
                    break;
                case /* repeated stream.video.edge_v1.Edge edges */ 4:
                    message.edges.push(Edge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stream.video.permission_v1.UserCapability own_capabilities */ 5:
                    message.ownCapabilities.push(UserCapability.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.user_v1.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.call_v1.Call call = 2; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.call_v1.CallState call_state = 3; */
        if (message.callState)
            CallState.internalBinaryWrite(message.callState, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.edge_v1.Edge edges = 4; */
        for (let i = 0; i < message.edges.length; i++)
            Edge.internalBinaryWrite(message.edges[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.permission_v1.UserCapability own_capabilities = 5; */
        for (let i = 0; i < message.ownCapabilities.length; i++)
            UserCapability.internalBinaryWrite(message.ownCapabilities[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.JoinCallResponse
 */
export const JoinCallResponse = new JoinCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveCallRequest$Type extends MessageType<LeaveCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.LeaveCallRequest", []);
    }
    create(value?: PartialMessage<LeaveCallRequest>): LeaveCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveCallRequest): LeaveCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.LeaveCallRequest
 */
export const LeaveCallRequest = new LeaveCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveCallResponse$Type extends MessageType<LeaveCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.LeaveCallResponse", []);
    }
    create(value?: PartialMessage<LeaveCallResponse>): LeaveCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveCallResponse): LeaveCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.LeaveCallResponse
 */
export const LeaveCallResponse = new LeaveCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallRequest$Type extends MessageType<EndCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.EndCallRequest", []);
    }
    create(value?: PartialMessage<EndCallRequest>): EndCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallRequest): EndCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.EndCallRequest
 */
export const EndCallRequest = new EndCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallResponse$Type extends MessageType<EndCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.EndCallResponse", []);
    }
    create(value?: PartialMessage<EndCallResponse>): EndCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallResponse): EndCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.EndCallResponse
 */
export const EndCallResponse = new EndCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventRequest$Type extends MessageType<SendEventRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendEventRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "event_type", kind: "enum", T: () => ["stream.video.coordinator.client_v1_rpc.UserEventType", UserEventType, "USER_EVENT_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SendEventRequest>): SendEventRequest {
        const message = { userId: "", callType: "", callId: "", eventType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventRequest): SendEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string call_type */ 2:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 3:
                    message.callId = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.UserEventType event_type */ 4:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string call_type = 2; */
        if (message.callType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 3; */
        if (message.callId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.callId);
        /* stream.video.coordinator.client_v1_rpc.UserEventType event_type = 4; */
        if (message.eventType !== 0)
            writer.tag(4, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendEventRequest
 */
export const SendEventRequest = new SendEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventResponse$Type extends MessageType<SendEventResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendEventResponse", []);
    }
    create(value?: PartialMessage<SendEventResponse>): SendEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventResponse): SendEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendEventResponse
 */
export const SendEventResponse = new SendEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsRequest$Type extends MessageType<ReportCallStatsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stats", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReportCallStatsRequest>): ReportCallStatsRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsRequest): ReportCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* google.protobuf.Struct stats */ 3:
                    message.stats = Struct.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* google.protobuf.Struct stats = 3; */
        if (message.stats)
            Struct.internalBinaryWrite(message.stats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest
 */
export const ReportCallStatsRequest = new ReportCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsResponse$Type extends MessageType<ReportCallStatsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse", []);
    }
    create(value?: PartialMessage<ReportCallStatsResponse>): ReportCallStatsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsResponse): ReportCallStatsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportCallStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse
 */
export const ReportCallStatsResponse = new ReportCallStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallStatsRequest$Type extends MessageType<GetCallStatsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallStatsRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallStatsRequest>): GetCallStatsRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallStatsRequest): GetCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsRequest
 */
export const GetCallStatsRequest = new GetCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallStatsResponse$Type extends MessageType<GetCallStatsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallStatsResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "call_stats", kind: "message", T: () => CallStats }
        ]);
    }
    create(value?: PartialMessage<GetCallStatsResponse>): GetCallStatsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallStatsResponse): GetCallStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.call_v1.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.stat_v1.CallStats call_stats */ 2:
                    message.callStats = CallStats.internalBinaryRead(reader, reader.uint32(), options, message.callStats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.call_v1.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.stat_v1.CallStats call_stats = 2; */
        if (message.callStats)
            CallStats.internalBinaryWrite(message.callStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsResponse
 */
export const GetCallStatsResponse = new GetCallStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueRequest$Type extends MessageType<ReportIssueRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportIssueRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "custom", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReportIssueRequest>): ReportIssueRequest {
        const message = { callType: "", callId: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueRequest): ReportIssueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 4:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportIssueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Struct custom = 4; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueRequest
 */
export const ReportIssueRequest = new ReportIssueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueResponse$Type extends MessageType<ReportIssueResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportIssueResponse", []);
    }
    create(value?: PartialMessage<ReportIssueResponse>): ReportIssueResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueResponse): ReportIssueResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportIssueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueResponse
 */
export const ReportIssueResponse = new ReportIssueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallRequest$Type extends MessageType<ReviewCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReviewCallRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stars", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "custom", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReviewCallRequest>): ReviewCallRequest {
        const message = { callType: "", callId: "", stars: 0, description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallRequest): ReviewCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* float stars */ 3:
                    message.stars = reader.float();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 5:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReviewCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* float stars = 3; */
        if (message.stars !== 0)
            writer.tag(3, WireType.Bit32).float(message.stars);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Struct custom = 5; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallRequest
 */
export const ReviewCallRequest = new ReviewCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallResponse$Type extends MessageType<ReviewCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReviewCallResponse", []);
    }
    create(value?: PartialMessage<ReviewCallResponse>): ReviewCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallResponse): ReviewCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReviewCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallResponse
 */
export const ReviewCallResponse = new ReviewCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketAuthRequest$Type extends MessageType<WebsocketAuthRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest", [
            { no: 1, name: "api_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "message", T: () => UserInput },
            { no: 4, name: "device", kind: "message", T: () => DeviceInput }
        ]);
    }
    create(value?: PartialMessage<WebsocketAuthRequest>): WebsocketAuthRequest {
        const message = { apiKey: "", token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketAuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketAuthRequest): WebsocketAuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string api_key */ 1:
                    message.apiKey = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                case /* stream.video.user_v1.UserInput user */ 3:
                    message.user = UserInput.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* stream.video.device_v1.DeviceInput device */ 4:
                    message.device = DeviceInput.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketAuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string api_key = 1; */
        if (message.apiKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.apiKey);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* stream.video.user_v1.UserInput user = 3; */
        if (message.user)
            UserInput.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.device_v1.DeviceInput device = 4; */
        if (message.device)
            DeviceInput.internalBinaryWrite(message.device, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest
 */
export const WebsocketAuthRequest = new WebsocketAuthRequest$Type();
/**
 * @generated ServiceType for protobuf service stream.video.coordinator.client_v1_rpc.ClientRPC
 */
export const ClientRPC = new ServiceType("stream.video.coordinator.client_v1_rpc.ClientRPC", [
    { name: "CreateCall", options: {}, I: CreateCallRequest, O: CreateCallResponse },
    { name: "GetCall", options: {}, I: GetCallRequest, O: GetCallResponse },
    { name: "QueryCalls", options: {}, I: QueryCallsRequest, O: QueryCallsResponse },
    { name: "UpdateCall", options: {}, I: UpdateCallRequest, O: UpdateCallResponse },
    { name: "DeleteCall", options: {}, I: DeleteCallRequest, O: DeleteCallResponse },
    { name: "JoinCall", options: {}, I: JoinCallRequest, O: JoinCallResponse },
    { name: "LeaveCall", options: {}, I: LeaveCallRequest, O: LeaveCallResponse },
    { name: "EndCall", options: {}, I: EndCallRequest, O: EndCallResponse },
    { name: "SelectEdgeServer", options: {}, I: SelectEdgeServerRequest, O: SelectEdgeServerResponse },
    { name: "AddDevice", options: {}, I: AddDeviceRequest, O: AddDeviceResponse },
    { name: "RemoveDevice", options: {}, I: RemoveDeviceRequest, O: RemoveDeviceResponse },
    { name: "ListDevices", options: {}, I: ListDevicesRequest, O: ListDevicesResponse },
    { name: "SendEvent", options: {}, I: SendEventRequest, O: SendEventResponse },
    { name: "SendCustomEvent", options: {}, I: SendCustomEventRequest, O: SendCustomEventResponse },
    { name: "ReportCallStats", options: {}, I: ReportCallStatsRequest, O: ReportCallStatsResponse },
    { name: "GetCallStats", options: {}, I: GetCallStatsRequest, O: GetCallStatsResponse },
    { name: "ReviewCall", options: {}, I: ReviewCallRequest, O: ReviewCallResponse },
    { name: "ReportIssue", options: {}, I: ReportIssueRequest, O: ReportIssueResponse }
]);
