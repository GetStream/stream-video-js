/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "feature_v1/feature.proto" (package "stream.video.feature_v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message stream.video.feature_v1.TranscribeOptions
 */
export interface TranscribeOptions {
}
/**
 * @generated from protobuf message stream.video.feature_v1.Features
 */
export interface Features {
    /**
     * Recording calls.
     *
     * @generated from protobuf field: stream.video.feature_v1.FeatureToggle recording = 1;
     */
    recording: FeatureToggle;
    /**
     * HLS stream broadcast.
     *
     * @generated from protobuf field: stream.video.feature_v1.FeatureToggle hls_broadcast = 2;
     */
    hlsBroadcast: FeatureToggle;
    /**
     * Call transcription.
     *
     * @generated from protobuf field: stream.video.feature_v1.FeatureToggle transcribe = 3;
     */
    transcribe: FeatureToggle;
    /**
     * @generated from protobuf field: stream.video.feature_v1.TranscribeOptions transcribe_options = 4;
     */
    transcribeOptions?: TranscribeOptions;
}
/**
 * @generated from protobuf enum stream.video.feature_v1.FeatureToggle
 */
export enum FeatureToggle {
    /**
     * The feature is available and enabled by default.
     *
     * @generated from protobuf enum value: FEATURE_TOGGLE_FEATURE_FLAG_ENABLED_UNSPECIFIED = 0;
     */
    FEATURE_FLAG_ENABLED_UNSPECIFIED = 0,
    /**
     * The feature is available but needs to be turned on the call level.
     *
     * @generated from protobuf enum value: FEATURE_TOGGLE_FEATURE_FLAG_AVAILABLE = 1;
     */
    FEATURE_FLAG_AVAILABLE = 1,
    /**
     * The feature is disabled and cannot be turned on.
     *
     * @generated from protobuf enum value: FEATURE_TOGGLE_FEATURE_FLAG_DISABLED = 2;
     */
    FEATURE_FLAG_DISABLED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TranscribeOptions$Type extends MessageType<TranscribeOptions> {
    constructor() {
        super("stream.video.feature_v1.TranscribeOptions", []);
    }
    create(value?: PartialMessage<TranscribeOptions>): TranscribeOptions {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranscribeOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranscribeOptions): TranscribeOptions {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TranscribeOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.feature_v1.TranscribeOptions
 */
export const TranscribeOptions = new TranscribeOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Features$Type extends MessageType<Features> {
    constructor() {
        super("stream.video.feature_v1.Features", [
            { no: 1, name: "recording", kind: "enum", T: () => ["stream.video.feature_v1.FeatureToggle", FeatureToggle, "FEATURE_TOGGLE_"] },
            { no: 2, name: "hls_broadcast", kind: "enum", T: () => ["stream.video.feature_v1.FeatureToggle", FeatureToggle, "FEATURE_TOGGLE_"] },
            { no: 3, name: "transcribe", kind: "enum", T: () => ["stream.video.feature_v1.FeatureToggle", FeatureToggle, "FEATURE_TOGGLE_"] },
            { no: 4, name: "transcribe_options", kind: "message", T: () => TranscribeOptions }
        ]);
    }
    create(value?: PartialMessage<Features>): Features {
        const message = { recording: 0, hlsBroadcast: 0, transcribe: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Features>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Features): Features {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.feature_v1.FeatureToggle recording */ 1:
                    message.recording = reader.int32();
                    break;
                case /* stream.video.feature_v1.FeatureToggle hls_broadcast */ 2:
                    message.hlsBroadcast = reader.int32();
                    break;
                case /* stream.video.feature_v1.FeatureToggle transcribe */ 3:
                    message.transcribe = reader.int32();
                    break;
                case /* stream.video.feature_v1.TranscribeOptions transcribe_options */ 4:
                    message.transcribeOptions = TranscribeOptions.internalBinaryRead(reader, reader.uint32(), options, message.transcribeOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Features, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.feature_v1.FeatureToggle recording = 1; */
        if (message.recording !== 0)
            writer.tag(1, WireType.Varint).int32(message.recording);
        /* stream.video.feature_v1.FeatureToggle hls_broadcast = 2; */
        if (message.hlsBroadcast !== 0)
            writer.tag(2, WireType.Varint).int32(message.hlsBroadcast);
        /* stream.video.feature_v1.FeatureToggle transcribe = 3; */
        if (message.transcribe !== 0)
            writer.tag(3, WireType.Varint).int32(message.transcribe);
        /* stream.video.feature_v1.TranscribeOptions transcribe_options = 4; */
        if (message.transcribeOptions)
            TranscribeOptions.internalBinaryWrite(message.transcribeOptions, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.feature_v1.Features
 */
export const Features = new Features$Type();
