/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/sfu/models/models.proto" (package "stream.video.sfu.models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../../google/protobuf/struct";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message stream.video.sfu.models.CallState
 */
export interface CallState {
    /**
     * @generated from protobuf field: repeated stream.video.sfu.models.Participant participants = 1;
     */
    participants: Participant[];
}
/**
 * those who are online in the call
 *
 * @generated from protobuf message stream.video.sfu.models.Participant
 */
export interface Participant {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * map of track id to track kind
     *
     * @generated from protobuf field: repeated stream.video.sfu.models.TrackKind published_tracks = 3;
     */
    publishedTracks: TrackKind[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp joined_at = 4;
     */
    joinedAt?: Timestamp;
    /**
     * @generated from protobuf field: string track_lookup_prefix = 5;
     */
    trackLookupPrefix: string;
}
/**
 * @generated from protobuf message stream.video.sfu.models.StreamQuality
 */
export interface StreamQuality {
    /**
     * @generated from protobuf field: stream.video.sfu.models.VideoQuality video_quality = 1;
     */
    videoQuality: VideoQuality;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.models.VideoDimension
 */
export interface VideoDimension {
    /**
     * @generated from protobuf field: uint32 width = 1;
     */
    width: number;
    /**
     * @generated from protobuf field: uint32 height = 2;
     */
    height: number;
}
/**
 * @generated from protobuf message stream.video.sfu.models.VideoLayer
 */
export interface VideoLayer {
    /**
     * for tracks with a single layer, this should be HIGH
     *
     * @generated from protobuf field: string rid = 1;
     */
    rid: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.VideoDimension video_dimension = 2;
     */
    videoDimension?: VideoDimension;
    /**
     * target bitrate, server will measure actual
     *
     * @generated from protobuf field: uint32 bitrate = 4;
     */
    bitrate: number;
    /**
     * @generated from protobuf field: uint32 fps = 5;
     */
    fps: number;
}
/**
 * @generated from protobuf message stream.video.sfu.models.Codec
 */
export interface Codec {
    /**
     * @generated from protobuf field: uint32 payload_type = 1;
     */
    payloadType: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string fmtp_line = 3;
     */
    fmtpLine: string;
    /**
     * @generated from protobuf field: uint32 clock_rate = 4;
     */
    clockRate: number;
    /**
     * @generated from protobuf field: string encoding_parameters = 5;
     */
    encodingParameters: string;
    /**
     * @generated from protobuf field: repeated string feedback = 6;
     */
    feedback: string[];
}
/**
 * @generated from protobuf message stream.video.sfu.models.ICETrickle
 */
export interface ICETrickle {
    /**
     * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;
     */
    peerType: PeerType;
    /**
     * @generated from protobuf field: string ice_candidate = 2;
     */
    iceCandidate: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.models.TrackInfo
 */
export interface TrackInfo {
    /**
     * @generated from protobuf field: string track_id = 1;
     */
    trackId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 2;
     */
    trackType: TrackType;
    /**
     * @generated from protobuf field: stream.video.sfu.models.TrackKind kind = 3;
     */
    kind: TrackKind;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.models.VideoLayer layers = 5;
     */
    layers: VideoLayer[];
}
/**
 * todo remove this
 *
 * @generated from protobuf message stream.video.sfu.models.Call
 */
export interface Call {
    /**
     * the call type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * the call id
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * the id of the user that created this call
     *
     * @generated from protobuf field: string created_by_user_id = 3;
     */
    createdByUserId: string;
    /**
     * the id of the current host for this call
     *
     * @generated from protobuf field: string host_user_id = 4;
     */
    hostUserId: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct custom = 5;
     */
    custom?: Struct;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf enum stream.video.sfu.models.PeerType
 */
export enum PeerType {
    /**
     * todo fix me (marcelo)
     *
     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;
     */
    PUBLISHER_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;
     */
    SUBSCRIBER = 1
}
/**
 * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality
 */
export enum ConnectionQuality {
    /**
     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CONNECTION_QUALITY_BAD_UNSPECIFIED = 1;
     */
    BAD_UNSPECIFIED = 1,
    /**
     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 2;
     */
    POOR = 2,
    /**
     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 3;
     */
    GOOD = 3
}
/**
 * @generated from protobuf enum stream.video.sfu.models.VideoQuality
 */
export enum VideoQuality {
    /**
     * @generated from protobuf enum value: VIDEO_QUALITY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 1;
     */
    LOW_UNSPECIFIED = 1,
    /**
     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 2;
     */
    MID = 2,
    /**
     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 3;
     */
    HIGH = 3
}
/**
 * @generated from protobuf enum stream.video.sfu.models.TrackType
 */
export enum TrackType {
    /**
     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;
     */
    AUDIO = 1,
    /**
     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;
     */
    VIDEO = 2
}
/**
 * @generated from protobuf enum stream.video.sfu.models.TrackKind
 */
export enum TrackKind {
    /**
     * @generated from protobuf enum value: TRACK_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TRACK_KIND_AUDIO = 1;
     */
    AUDIO = 1,
    /**
     * @generated from protobuf enum value: TRACK_KIND_VIDEO = 2;
     */
    VIDEO = 2,
    /**
     * @generated from protobuf enum value: TRACK_KIND_SCREEN_SHARE = 3;
     */
    SCREEN_SHARE = 3,
    /**
     * @generated from protobuf enum value: TRACK_KIND_SCREEN_SHARE_AUDIO = 4;
     */
    SCREEN_SHARE_AUDIO = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class CallState$Type extends MessageType<CallState> {
    constructor() {
        super("stream.video.sfu.models.CallState", [
            { no: 1, name: "participants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<CallState>): CallState {
        const message = { participants: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallState): CallState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.sfu.models.Participant participants */ 1:
                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.sfu.models.Participant participants = 1; */
        for (let i = 0; i < message.participants.length; i++)
            Participant.internalBinaryWrite(message.participants[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.CallState
 */
export const CallState = new CallState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Participant$Type extends MessageType<Participant> {
    constructor() {
        super("stream.video.sfu.models.Participant", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "published_tracks", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["stream.video.sfu.models.TrackKind", TrackKind, "TRACK_KIND_"] },
            { no: 4, name: "joined_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "track_lookup_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Participant>): Participant {
        const message = { userId: "", sessionId: "", publishedTracks: [], trackLookupPrefix: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Participant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Participant): Participant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* repeated stream.video.sfu.models.TrackKind published_tracks */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.publishedTracks.push(reader.int32());
                    else
                        message.publishedTracks.push(reader.int32());
                    break;
                case /* google.protobuf.Timestamp joined_at */ 4:
                    message.joinedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.joinedAt);
                    break;
                case /* string track_lookup_prefix */ 5:
                    message.trackLookupPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Participant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* repeated stream.video.sfu.models.TrackKind published_tracks = 3; */
        if (message.publishedTracks.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.publishedTracks.length; i++)
                writer.int32(message.publishedTracks[i]);
            writer.join();
        }
        /* google.protobuf.Timestamp joined_at = 4; */
        if (message.joinedAt)
            Timestamp.internalBinaryWrite(message.joinedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string track_lookup_prefix = 5; */
        if (message.trackLookupPrefix !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.trackLookupPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.Participant
 */
export const Participant = new Participant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamQuality$Type extends MessageType<StreamQuality> {
    constructor() {
        super("stream.video.sfu.models.StreamQuality", [
            { no: 1, name: "video_quality", kind: "enum", T: () => ["stream.video.sfu.models.VideoQuality", VideoQuality, "VIDEO_QUALITY_"] },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamQuality>): StreamQuality {
        const message = { videoQuality: 0, userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamQuality>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamQuality): StreamQuality {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.models.VideoQuality video_quality */ 1:
                    message.videoQuality = reader.int32();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamQuality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.models.VideoQuality video_quality = 1; */
        if (message.videoQuality !== 0)
            writer.tag(1, WireType.Varint).int32(message.videoQuality);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality
 */
export const StreamQuality = new StreamQuality$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoDimension$Type extends MessageType<VideoDimension> {
    constructor() {
        super("stream.video.sfu.models.VideoDimension", [
            { no: 1, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoDimension>): VideoDimension {
        const message = { width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoDimension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoDimension): VideoDimension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 width */ 1:
                    message.width = reader.uint32();
                    break;
                case /* uint32 height */ 2:
                    message.height = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoDimension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).uint32(message.width);
        /* uint32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).uint32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension
 */
export const VideoDimension = new VideoDimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLayer$Type extends MessageType<VideoLayer> {
    constructor() {
        super("stream.video.sfu.models.VideoLayer", [
            { no: 1, name: "rid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "video_dimension", kind: "message", T: () => VideoDimension },
            { no: 4, name: "bitrate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "fps", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoLayer>): VideoLayer {
        const message = { rid: "", bitrate: 0, fps: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLayer): VideoLayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rid */ 1:
                    message.rid = reader.string();
                    break;
                case /* stream.video.sfu.models.VideoDimension video_dimension */ 2:
                    message.videoDimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.videoDimension);
                    break;
                case /* uint32 bitrate */ 4:
                    message.bitrate = reader.uint32();
                    break;
                case /* uint32 fps */ 5:
                    message.fps = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rid = 1; */
        if (message.rid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rid);
        /* stream.video.sfu.models.VideoDimension video_dimension = 2; */
        if (message.videoDimension)
            VideoDimension.internalBinaryWrite(message.videoDimension, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 bitrate = 4; */
        if (message.bitrate !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bitrate);
        /* uint32 fps = 5; */
        if (message.fps !== 0)
            writer.tag(5, WireType.Varint).uint32(message.fps);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer
 */
export const VideoLayer = new VideoLayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Codec$Type extends MessageType<Codec> {
    constructor() {
        super("stream.video.sfu.models.Codec", [
            { no: 1, name: "payload_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fmtp_line", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "clock_rate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "encoding_parameters", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "feedback", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Codec>): Codec {
        const message = { payloadType: 0, name: "", fmtpLine: "", clockRate: 0, encodingParameters: "", feedback: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Codec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Codec): Codec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 payload_type */ 1:
                    message.payloadType = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string fmtp_line */ 3:
                    message.fmtpLine = reader.string();
                    break;
                case /* uint32 clock_rate */ 4:
                    message.clockRate = reader.uint32();
                    break;
                case /* string encoding_parameters */ 5:
                    message.encodingParameters = reader.string();
                    break;
                case /* repeated string feedback */ 6:
                    message.feedback.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Codec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 payload_type = 1; */
        if (message.payloadType !== 0)
            writer.tag(1, WireType.Varint).uint32(message.payloadType);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string fmtp_line = 3; */
        if (message.fmtpLine !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fmtpLine);
        /* uint32 clock_rate = 4; */
        if (message.clockRate !== 0)
            writer.tag(4, WireType.Varint).uint32(message.clockRate);
        /* string encoding_parameters = 5; */
        if (message.encodingParameters !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.encodingParameters);
        /* repeated string feedback = 6; */
        for (let i = 0; i < message.feedback.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.feedback[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.Codec
 */
export const Codec = new Codec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ICETrickle$Type extends MessageType<ICETrickle> {
    constructor() {
        super("stream.video.sfu.models.ICETrickle", [
            { no: 1, name: "peer_type", kind: "enum", T: () => ["stream.video.sfu.models.PeerType", PeerType, "PEER_TYPE_"] },
            { no: 2, name: "ice_candidate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ICETrickle>): ICETrickle {
        const message = { peerType: 0, iceCandidate: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ICETrickle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICETrickle): ICETrickle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.models.PeerType peer_type */ 1:
                    message.peerType = reader.int32();
                    break;
                case /* string ice_candidate */ 2:
                    message.iceCandidate = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ICETrickle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.models.PeerType peer_type = 1; */
        if (message.peerType !== 0)
            writer.tag(1, WireType.Varint).int32(message.peerType);
        /* string ice_candidate = 2; */
        if (message.iceCandidate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iceCandidate);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle
 */
export const ICETrickle = new ICETrickle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrackInfo$Type extends MessageType<TrackInfo> {
    constructor() {
        super("stream.video.sfu.models.TrackInfo", [
            { no: 1, name: "track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "track_type", kind: "enum", T: () => ["stream.video.sfu.models.TrackType", TrackType, "TRACK_TYPE_"] },
            { no: 3, name: "kind", kind: "enum", T: () => ["stream.video.sfu.models.TrackKind", TrackKind, "TRACK_KIND_"] },
            { no: 5, name: "layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoLayer }
        ]);
    }
    create(value?: PartialMessage<TrackInfo>): TrackInfo {
        const message = { trackId: "", trackType: 0, kind: 0, layers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrackInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackInfo): TrackInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string track_id */ 1:
                    message.trackId = reader.string();
                    break;
                case /* stream.video.sfu.models.TrackType track_type */ 2:
                    message.trackType = reader.int32();
                    break;
                case /* stream.video.sfu.models.TrackKind kind */ 3:
                    message.kind = reader.int32();
                    break;
                case /* repeated stream.video.sfu.models.VideoLayer layers */ 5:
                    message.layers.push(VideoLayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string track_id = 1; */
        if (message.trackId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trackId);
        /* stream.video.sfu.models.TrackType track_type = 2; */
        if (message.trackType !== 0)
            writer.tag(2, WireType.Varint).int32(message.trackType);
        /* stream.video.sfu.models.TrackKind kind = 3; */
        if (message.kind !== 0)
            writer.tag(3, WireType.Varint).int32(message.kind);
        /* repeated stream.video.sfu.models.VideoLayer layers = 5; */
        for (let i = 0; i < message.layers.length; i++)
            VideoLayer.internalBinaryWrite(message.layers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo
 */
export const TrackInfo = new TrackInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Call$Type extends MessageType<Call> {
    constructor() {
        super("stream.video.sfu.models.Call", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "host_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "custom", kind: "message", T: () => Struct },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Call>): Call {
        const message = { type: "", id: "", createdByUserId: "", hostUserId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Call>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Call): Call {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string created_by_user_id */ 3:
                    message.createdByUserId = reader.string();
                    break;
                case /* string host_user_id */ 4:
                    message.hostUserId = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 5:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Call, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string created_by_user_id = 3; */
        if (message.createdByUserId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdByUserId);
        /* string host_user_id = 4; */
        if (message.hostUserId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hostUserId);
        /* google.protobuf.Struct custom = 5; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.models.Call
 */
export const Call = new Call$Type();
