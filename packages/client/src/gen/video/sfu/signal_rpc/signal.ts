/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/sfu/signal_rpc/signal.proto" (package "stream.video.sfu.signal", syntax proto3)
// tslint:disable
import { ICETrickle } from "../models/models";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrackInfo } from "../models/models";
import { EncodeCapabilities } from "../models/models";
import { PeerType } from "../models/models";
import { VideoDimension } from "../models/models";
import { TrackKind } from "../models/models";
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStateRequest
 */
export interface UpdateMuteStateRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf oneof: mute
     */
    mute: {
        oneofKind: "audioMuteChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.signal.AudioMuteChanged audio_mute_changed = 2;
         */
        audioMuteChanged: AudioMuteChanged;
    } | {
        oneofKind: "videoMuteChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.signal.VideoMuteChanged video_mute_changed = 3;
         */
        videoMuteChanged: VideoMuteChanged;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStateResponse
 */
export interface UpdateMuteStateResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.signal.AudioMuteChanged
 */
export interface AudioMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 1;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.VideoMuteChanged
 */
export interface VideoMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 2;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest
 */
export interface UpdateSubscriptionsRequest {
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3;
     */
    tracks: TrackSubscriptionDetails[];
}
/**
 * @generated from protobuf message stream.video.sfu.signal.TrackSubscriptionDetails
 */
export interface TrackSubscriptionDetails {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.TrackKind track_kind = 3;
     */
    trackKind: TrackKind;
    /**
     * @generated from protobuf field: stream.video.sfu.models.VideoDimension dimension = 4;
     */
    dimension?: VideoDimension;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendAnswerRequest
 */
export interface SendAnswerRequest {
    /**
     * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;
     */
    peerType: PeerType;
    /**
     * @generated from protobuf field: string sdp = 2;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 4;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendAnswerResponse
 */
export interface SendAnswerResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.signal.ICETrickleResponse
 */
export interface ICETrickleResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse
 */
export interface UpdateSubscriptionsResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SetPublisherRequest
 */
export interface SetPublisherRequest {
    /**
     * sdp offer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.EncodeCapabilities encode_capabilities = 4;
     */
    encodeCapabilities?: EncodeCapabilities;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo tracks = 5;
     */
    tracks: TrackInfo[];
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SetPublisherResponse
 */
export interface SetPublisherResponse {
    /**
     * sdp answer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bool ice_restart = 4;
     */
    iceRestart: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMuteStateRequest$Type extends MessageType<UpdateMuteStateRequest> {
    constructor() {
        super("stream.video.sfu.signal.UpdateMuteStateRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_mute_changed", kind: "message", oneof: "mute", T: () => AudioMuteChanged },
            { no: 3, name: "video_mute_changed", kind: "message", oneof: "mute", T: () => VideoMuteChanged }
        ]);
    }
    create(value?: PartialMessage<UpdateMuteStateRequest>): UpdateMuteStateRequest {
        const message = { sessionId: "", mute: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMuteStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStateRequest): UpdateMuteStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* stream.video.sfu.signal.AudioMuteChanged audio_mute_changed */ 2:
                    message.mute = {
                        oneofKind: "audioMuteChanged",
                        audioMuteChanged: AudioMuteChanged.internalBinaryRead(reader, reader.uint32(), options, (message.mute as any).audioMuteChanged)
                    };
                    break;
                case /* stream.video.sfu.signal.VideoMuteChanged video_mute_changed */ 3:
                    message.mute = {
                        oneofKind: "videoMuteChanged",
                        videoMuteChanged: VideoMuteChanged.internalBinaryRead(reader, reader.uint32(), options, (message.mute as any).videoMuteChanged)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMuteStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* stream.video.sfu.signal.AudioMuteChanged audio_mute_changed = 2; */
        if (message.mute.oneofKind === "audioMuteChanged")
            AudioMuteChanged.internalBinaryWrite(message.mute.audioMuteChanged, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.signal.VideoMuteChanged video_mute_changed = 3; */
        if (message.mute.oneofKind === "videoMuteChanged")
            VideoMuteChanged.internalBinaryWrite(message.mute.videoMuteChanged, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStateRequest
 */
export const UpdateMuteStateRequest = new UpdateMuteStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMuteStateResponse$Type extends MessageType<UpdateMuteStateResponse> {
    constructor() {
        super("stream.video.sfu.signal.UpdateMuteStateResponse", []);
    }
    create(value?: PartialMessage<UpdateMuteStateResponse>): UpdateMuteStateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMuteStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStateResponse): UpdateMuteStateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateMuteStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStateResponse
 */
export const UpdateMuteStateResponse = new UpdateMuteStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioMuteChanged$Type extends MessageType<AudioMuteChanged> {
    constructor() {
        super("stream.video.sfu.signal.AudioMuteChanged", [
            { no: 1, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AudioMuteChanged>): AudioMuteChanged {
        const message = { muted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioMuteChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioMuteChanged): AudioMuteChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool muted */ 1:
                    message.muted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool muted = 1; */
        if (message.muted !== false)
            writer.tag(1, WireType.Varint).bool(message.muted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged
 */
export const AudioMuteChanged = new AudioMuteChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoMuteChanged$Type extends MessageType<VideoMuteChanged> {
    constructor() {
        super("stream.video.sfu.signal.VideoMuteChanged", [
            { no: 2, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VideoMuteChanged>): VideoMuteChanged {
        const message = { muted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoMuteChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoMuteChanged): VideoMuteChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool muted */ 2:
                    message.muted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool muted = 2; */
        if (message.muted !== false)
            writer.tag(2, WireType.Varint).bool(message.muted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged
 */
export const VideoMuteChanged = new VideoMuteChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSubscriptionsRequest$Type extends MessageType<UpdateSubscriptionsRequest> {
    constructor() {
        super("stream.video.sfu.signal.UpdateSubscriptionsRequest", [
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tracks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrackSubscriptionDetails }
        ]);
    }
    create(value?: PartialMessage<UpdateSubscriptionsRequest>): UpdateSubscriptionsRequest {
        const message = { sessionId: "", tracks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSubscriptionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsRequest): UpdateSubscriptionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks */ 3:
                    message.tracks.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSubscriptionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3; */
        for (let i = 0; i < message.tracks.length; i++)
            TrackSubscriptionDetails.internalBinaryWrite(message.tracks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest
 */
export const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrackSubscriptionDetails$Type extends MessageType<TrackSubscriptionDetails> {
    constructor() {
        super("stream.video.sfu.signal.TrackSubscriptionDetails", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "track_kind", kind: "enum", T: () => ["stream.video.sfu.models.TrackKind", TrackKind, "TRACK_KIND_"] },
            { no: 4, name: "dimension", kind: "message", T: () => VideoDimension }
        ]);
    }
    create(value?: PartialMessage<TrackSubscriptionDetails>): TrackSubscriptionDetails {
        const message = { userId: "", sessionId: "", trackKind: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrackSubscriptionDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackSubscriptionDetails): TrackSubscriptionDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* stream.video.sfu.models.TrackKind track_kind */ 3:
                    message.trackKind = reader.int32();
                    break;
                case /* stream.video.sfu.models.VideoDimension dimension */ 4:
                    message.dimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackSubscriptionDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* stream.video.sfu.models.TrackKind track_kind = 3; */
        if (message.trackKind !== 0)
            writer.tag(3, WireType.Varint).int32(message.trackKind);
        /* stream.video.sfu.models.VideoDimension dimension = 4; */
        if (message.dimension)
            VideoDimension.internalBinaryWrite(message.dimension, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails
 */
export const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendAnswerRequest$Type extends MessageType<SendAnswerRequest> {
    constructor() {
        super("stream.video.sfu.signal.SendAnswerRequest", [
            { no: 1, name: "peer_type", kind: "enum", T: () => ["stream.video.sfu.models.PeerType", PeerType, "PEER_TYPE_"] },
            { no: 2, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendAnswerRequest>): SendAnswerRequest {
        const message = { peerType: 0, sdp: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendAnswerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerRequest): SendAnswerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.models.PeerType peer_type */ 1:
                    message.peerType = reader.int32();
                    break;
                case /* string sdp */ 2:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 4:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendAnswerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.models.PeerType peer_type = 1; */
        if (message.peerType !== 0)
            writer.tag(1, WireType.Varint).int32(message.peerType);
        /* string sdp = 2; */
        if (message.sdp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 4; */
        if (message.sessionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest
 */
export const SendAnswerRequest = new SendAnswerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendAnswerResponse$Type extends MessageType<SendAnswerResponse> {
    constructor() {
        super("stream.video.sfu.signal.SendAnswerResponse", []);
    }
    create(value?: PartialMessage<SendAnswerResponse>): SendAnswerResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendAnswerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerResponse): SendAnswerResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendAnswerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse
 */
export const SendAnswerResponse = new SendAnswerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ICETrickleResponse$Type extends MessageType<ICETrickleResponse> {
    constructor() {
        super("stream.video.sfu.signal.ICETrickleResponse", []);
    }
    create(value?: PartialMessage<ICETrickleResponse>): ICETrickleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ICETrickleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICETrickleResponse): ICETrickleResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ICETrickleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse
 */
export const ICETrickleResponse = new ICETrickleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSubscriptionsResponse$Type extends MessageType<UpdateSubscriptionsResponse> {
    constructor() {
        super("stream.video.sfu.signal.UpdateSubscriptionsResponse", []);
    }
    create(value?: PartialMessage<UpdateSubscriptionsResponse>): UpdateSubscriptionsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSubscriptionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsResponse): UpdateSubscriptionsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateSubscriptionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse
 */
export const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPublisherRequest$Type extends MessageType<SetPublisherRequest> {
    constructor() {
        super("stream.video.sfu.signal.SetPublisherRequest", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "encode_capabilities", kind: "message", T: () => EncodeCapabilities },
            { no: 5, name: "tracks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrackInfo }
        ]);
    }
    create(value?: PartialMessage<SetPublisherRequest>): SetPublisherRequest {
        const message = { sdp: "", sessionId: "", tracks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPublisherRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherRequest): SetPublisherRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                case /* stream.video.sfu.models.EncodeCapabilities encode_capabilities */ 4:
                    message.encodeCapabilities = EncodeCapabilities.internalBinaryRead(reader, reader.uint32(), options, message.encodeCapabilities);
                    break;
                case /* repeated stream.video.sfu.models.TrackInfo tracks */ 5:
                    message.tracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPublisherRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        /* stream.video.sfu.models.EncodeCapabilities encode_capabilities = 4; */
        if (message.encodeCapabilities)
            EncodeCapabilities.internalBinaryWrite(message.encodeCapabilities, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.sfu.models.TrackInfo tracks = 5; */
        for (let i = 0; i < message.tracks.length; i++)
            TrackInfo.internalBinaryWrite(message.tracks[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest
 */
export const SetPublisherRequest = new SetPublisherRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPublisherResponse$Type extends MessageType<SetPublisherResponse> {
    constructor() {
        super("stream.video.sfu.signal.SetPublisherResponse", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ice_restart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetPublisherResponse>): SetPublisherResponse {
        const message = { sdp: "", sessionId: "", iceRestart: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPublisherResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherResponse): SetPublisherResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                case /* bool ice_restart */ 4:
                    message.iceRestart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPublisherResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        /* bool ice_restart = 4; */
        if (message.iceRestart !== false)
            writer.tag(4, WireType.Varint).bool(message.iceRestart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse
 */
export const SetPublisherResponse = new SetPublisherResponse$Type();
/**
 * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer
 */
export const SignalServer = new ServiceType("stream.video.sfu.signal.SignalServer", [
    { name: "SetPublisher", options: {}, I: SetPublisherRequest, O: SetPublisherResponse },
    { name: "SendAnswer", options: {}, I: SendAnswerRequest, O: SendAnswerResponse },
    { name: "IceTrickle", options: {}, I: ICETrickle, O: ICETrickleResponse },
    { name: "UpdateSubscriptions", options: {}, I: UpdateSubscriptionsRequest, O: UpdateSubscriptionsResponse },
    { name: "UpdateMuteState", options: {}, I: UpdateMuteStateRequest, O: UpdateMuteStateResponse }
]);
