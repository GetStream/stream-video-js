/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/sfu/event/events.proto" (package "stream.video.sfu.event", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Codec } from "../models/models";
import { ConnectionQuality } from "../models/models";
import { StreamQuality } from "../models/models";
import { Participant } from "../models/models";
import { Call } from "../models/models";
/**
 * @generated from protobuf message stream.video.sfu.event.SfuEvent
 */
export interface SfuEvent {
    /**
     * @generated from protobuf oneof: event_payload
     */
    eventPayload: {
        oneofKind: "subscriberOffer";
        /**
         * @generated from protobuf field: stream.video.sfu.event.SubscriberOffer subscriber_offer = 1;
         */
        subscriberOffer: SubscriberOffer;
    } | {
        oneofKind: "connectionQualityChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 2;
         */
        connectionQualityChanged: ConnectionQualityChanged;
    } | {
        oneofKind: "audioLevelChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.event.AudioLevelChanged audio_level_changed = 3;
         */
        audioLevelChanged: AudioLevelChanged;
    } | {
        oneofKind: "subscriberCandidate";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ICECandidateTrickle subscriber_candidate = 4;
         */
        subscriberCandidate: ICECandidateTrickle;
    } | {
        oneofKind: "publisherCandidate";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ICECandidateTrickle publisher_candidate = 5;
         */
        publisherCandidate: ICECandidateTrickle;
    } | {
        oneofKind: "changePublishQuality";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6;
         */
        changePublishQuality: ChangePublishQuality;
    } | {
        oneofKind: "localDeviceChange";
        /**
         * @generated from protobuf field: stream.video.sfu.event.LocalDeviceChange local_device_change = 7;
         */
        localDeviceChange: LocalDeviceChange;
    } | {
        oneofKind: "muteStateChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.event.MuteStateChanged mute_state_changed = 8;
         */
        muteStateChanged: MuteStateChanged;
    } | {
        oneofKind: "videoQualityChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.event.VideoQualityChanged video_quality_changed = 9;
         */
        videoQualityChanged: VideoQualityChanged;
    } | {
        oneofKind: "participantJoined";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ParticipantJoined participant_joined = 10;
         */
        participantJoined: ParticipantJoined;
    } | {
        oneofKind: "participantLeft";
        /**
         * @generated from protobuf field: stream.video.sfu.event.ParticipantLeft participant_left = 11;
         */
        participantLeft: ParticipantLeft;
    } | {
        oneofKind: "dominantSpeakerChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12;
         */
        dominantSpeakerChanged: DominantSpeakerChanged;
    } | {
        oneofKind: undefined;
    };
}
/**
 * ParticipantJoined is fired when a user joins a call
 *
 * @generated from protobuf message stream.video.sfu.event.ParticipantJoined
 */
export interface ParticipantJoined {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;
     */
    participant?: Participant;
}
/**
 * ParticipantJoined is fired when a user leaves a call
 *
 * @generated from protobuf message stream.video.sfu.event.ParticipantLeft
 */
export interface ParticipantLeft {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;
     */
    participant?: Participant;
}
/**
 * @generated from protobuf message stream.video.sfu.event.MuteStateChanged
 */
export interface MuteStateChanged {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: bool audio_muted = 2;
     */
    audioMuted: boolean;
    /**
     * @generated from protobuf field: bool video_muted = 3;
     */
    videoMuted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.event.VideoQualityChanged
 */
export interface VideoQualityChanged {
    /**
     * @generated from protobuf field: repeated stream.video.sfu.models.StreamQuality stream_qualities = 1;
     */
    streamQualities: StreamQuality[];
}
/**
 * SubscriberOffer is sent when the SFU adds tracks to a subscription
 * this usually happens when a user joins a call and starts sending video
 *
 * @generated from protobuf message stream.video.sfu.event.SubscriberOffer
 */
export interface SubscriberOffer {
    /**
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
}
/**
 * @generated from protobuf message stream.video.sfu.event.LocalDeviceChange
 */
export interface LocalDeviceChange {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
/**
 * ICECandidateTrickle is about the ICE nonsense stuff
 *
 * @generated from protobuf message stream.video.sfu.event.ICECandidateTrickle
 */
export interface ICECandidateTrickle {
    /**
     * @generated from protobuf field: string candidate = 1;
     */
    candidate: string;
}
/**
 * ConnectionQuality is sent to inform about connection quality changes
 * eg. thierry's connection is not good -> render a red icon Zoom style
 *
 * @generated from protobuf message stream.video.sfu.event.ConnectionQualityChanged
 */
export interface ConnectionQualityChanged {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.ConnectionQuality connection_quality = 2;
     */
    connectionQuality: ConnectionQuality;
}
/**
 * DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call
 *
 * @generated from protobuf message stream.video.sfu.event.DominantSpeakerChanged
 */
export interface DominantSpeakerChanged {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * AudioLevelChanged is sent by the SFU to notify about audio levels by user
 *
 * @generated from protobuf message stream.video.sfu.event.AudioLevelChanged
 */
export interface AudioLevelChanged {
    /**
     * @generated from protobuf field: repeated stream.video.sfu.event.AudioLevel audio_levels = 1;
     */
    audioLevels: AudioLevel[];
}
/**
 * @generated from protobuf message stream.video.sfu.event.AudioLevel
 */
export interface AudioLevel {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * 0.0 means complete silence, 1.0 loudest
     *
     * @generated from protobuf field: float level = 2;
     */
    level: number;
}
/**
 * @generated from protobuf message stream.video.sfu.event.AudioLayerSetting
 */
export interface AudioLayerSetting {
}
/**
 * @generated from protobuf message stream.video.sfu.event.AudioMediaRequest
 */
export interface AudioMediaRequest {
    /**
     * @generated from protobuf field: int32 channelCount = 1;
     */
    channelCount: number;
}
/**
 * @generated from protobuf message stream.video.sfu.event.AudioSender
 */
export interface AudioSender {
    /**
     * @generated from protobuf field: stream.video.sfu.event.AudioMediaRequest mediaRequest = 1;
     */
    mediaRequest?: AudioMediaRequest;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;
     */
    codec?: Codec;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.event.AudioLayerSetting layers = 3;
     */
    layers: AudioLayerSetting[];
}
/**
 * @generated from protobuf message stream.video.sfu.event.VideoMediaRequest
 */
export interface VideoMediaRequest {
    /**
     * @generated from protobuf field: int32 idealHeight = 1;
     */
    idealHeight: number;
    /**
     * @generated from protobuf field: int32 idealWidth = 2;
     */
    idealWidth: number;
    /**
     * @generated from protobuf field: int32 idealFrameRate = 3;
     */
    idealFrameRate: number;
}
/**
 * @generated from protobuf message stream.video.sfu.event.VideoLayerSetting
 */
export interface VideoLayerSetting {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bool active = 2;
     */
    active: boolean;
    /**
     * @generated from protobuf field: int32 maxBitrate = 3;
     */
    maxBitrate: number;
    /**
     * @generated from protobuf field: float scaleResolutionDownBy = 4;
     */
    scaleResolutionDownBy: number;
    /**
     * @generated from protobuf field: stream.video.sfu.event.VideoLayerSetting.Priority priority = 5;
     */
    priority: VideoLayerSetting_Priority;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Codec codec = 6;
     */
    codec?: Codec;
}
/**
 * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority
 */
export enum VideoLayerSetting_Priority {
    /**
     * @generated from protobuf enum value: HIGH = 0;
     */
    HIGH = 0,
    /**
     * @generated from protobuf enum value: LOW = 1;
     */
    LOW = 1,
    /**
     * @generated from protobuf enum value: MEDIUM = 2;
     */
    MEDIUM = 2,
    /**
     * @generated from protobuf enum value: VERY_LOW = 3;
     */
    VERY_LOW = 3
}
/**
 * @generated from protobuf message stream.video.sfu.event.VideoSender
 */
export interface VideoSender {
    /**
     * @generated from protobuf field: stream.video.sfu.event.VideoMediaRequest mediaRequest = 1;
     */
    mediaRequest?: VideoMediaRequest;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;
     */
    codec?: Codec;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.event.VideoLayerSetting layers = 3;
     */
    layers: VideoLayerSetting[];
}
/**
 * sent to users when they need to change the quality of their video
 *
 * @generated from protobuf message stream.video.sfu.event.ChangePublishQuality
 */
export interface ChangePublishQuality {
    /**
     * @generated from protobuf field: repeated stream.video.sfu.event.AudioSender audio_sender = 1;
     */
    audioSender: AudioSender[];
    /**
     * @generated from protobuf field: repeated stream.video.sfu.event.VideoSender video_sender = 2;
     */
    videoSender: VideoSender[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SfuEvent$Type extends MessageType<SfuEvent> {
    constructor() {
        super("stream.video.sfu.event.SfuEvent", [
            { no: 1, name: "subscriber_offer", kind: "message", oneof: "eventPayload", T: () => SubscriberOffer },
            { no: 2, name: "connection_quality_changed", kind: "message", oneof: "eventPayload", T: () => ConnectionQualityChanged },
            { no: 3, name: "audio_level_changed", kind: "message", oneof: "eventPayload", T: () => AudioLevelChanged },
            { no: 4, name: "subscriber_candidate", kind: "message", oneof: "eventPayload", T: () => ICECandidateTrickle },
            { no: 5, name: "publisher_candidate", kind: "message", oneof: "eventPayload", T: () => ICECandidateTrickle },
            { no: 6, name: "change_publish_quality", kind: "message", oneof: "eventPayload", T: () => ChangePublishQuality },
            { no: 7, name: "local_device_change", kind: "message", oneof: "eventPayload", T: () => LocalDeviceChange },
            { no: 8, name: "mute_state_changed", kind: "message", oneof: "eventPayload", T: () => MuteStateChanged },
            { no: 9, name: "video_quality_changed", kind: "message", oneof: "eventPayload", T: () => VideoQualityChanged },
            { no: 10, name: "participant_joined", kind: "message", oneof: "eventPayload", T: () => ParticipantJoined },
            { no: 11, name: "participant_left", kind: "message", oneof: "eventPayload", T: () => ParticipantLeft },
            { no: 12, name: "dominant_speaker_changed", kind: "message", oneof: "eventPayload", T: () => DominantSpeakerChanged }
        ]);
    }
    create(value?: PartialMessage<SfuEvent>): SfuEvent {
        const message = { eventPayload: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SfuEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SfuEvent): SfuEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.event.SubscriberOffer subscriber_offer */ 1:
                    message.eventPayload = {
                        oneofKind: "subscriberOffer",
                        subscriberOffer: SubscriberOffer.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).subscriberOffer)
                    };
                    break;
                case /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed */ 2:
                    message.eventPayload = {
                        oneofKind: "connectionQualityChanged",
                        connectionQualityChanged: ConnectionQualityChanged.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).connectionQualityChanged)
                    };
                    break;
                case /* stream.video.sfu.event.AudioLevelChanged audio_level_changed */ 3:
                    message.eventPayload = {
                        oneofKind: "audioLevelChanged",
                        audioLevelChanged: AudioLevelChanged.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).audioLevelChanged)
                    };
                    break;
                case /* stream.video.sfu.event.ICECandidateTrickle subscriber_candidate */ 4:
                    message.eventPayload = {
                        oneofKind: "subscriberCandidate",
                        subscriberCandidate: ICECandidateTrickle.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).subscriberCandidate)
                    };
                    break;
                case /* stream.video.sfu.event.ICECandidateTrickle publisher_candidate */ 5:
                    message.eventPayload = {
                        oneofKind: "publisherCandidate",
                        publisherCandidate: ICECandidateTrickle.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).publisherCandidate)
                    };
                    break;
                case /* stream.video.sfu.event.ChangePublishQuality change_publish_quality */ 6:
                    message.eventPayload = {
                        oneofKind: "changePublishQuality",
                        changePublishQuality: ChangePublishQuality.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).changePublishQuality)
                    };
                    break;
                case /* stream.video.sfu.event.LocalDeviceChange local_device_change */ 7:
                    message.eventPayload = {
                        oneofKind: "localDeviceChange",
                        localDeviceChange: LocalDeviceChange.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).localDeviceChange)
                    };
                    break;
                case /* stream.video.sfu.event.MuteStateChanged mute_state_changed */ 8:
                    message.eventPayload = {
                        oneofKind: "muteStateChanged",
                        muteStateChanged: MuteStateChanged.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).muteStateChanged)
                    };
                    break;
                case /* stream.video.sfu.event.VideoQualityChanged video_quality_changed */ 9:
                    message.eventPayload = {
                        oneofKind: "videoQualityChanged",
                        videoQualityChanged: VideoQualityChanged.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).videoQualityChanged)
                    };
                    break;
                case /* stream.video.sfu.event.ParticipantJoined participant_joined */ 10:
                    message.eventPayload = {
                        oneofKind: "participantJoined",
                        participantJoined: ParticipantJoined.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantJoined)
                    };
                    break;
                case /* stream.video.sfu.event.ParticipantLeft participant_left */ 11:
                    message.eventPayload = {
                        oneofKind: "participantLeft",
                        participantLeft: ParticipantLeft.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).participantLeft)
                    };
                    break;
                case /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed */ 12:
                    message.eventPayload = {
                        oneofKind: "dominantSpeakerChanged",
                        dominantSpeakerChanged: DominantSpeakerChanged.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).dominantSpeakerChanged)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SfuEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.event.SubscriberOffer subscriber_offer = 1; */
        if (message.eventPayload.oneofKind === "subscriberOffer")
            SubscriberOffer.internalBinaryWrite(message.eventPayload.subscriberOffer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 2; */
        if (message.eventPayload.oneofKind === "connectionQualityChanged")
            ConnectionQualityChanged.internalBinaryWrite(message.eventPayload.connectionQualityChanged, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.AudioLevelChanged audio_level_changed = 3; */
        if (message.eventPayload.oneofKind === "audioLevelChanged")
            AudioLevelChanged.internalBinaryWrite(message.eventPayload.audioLevelChanged, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ICECandidateTrickle subscriber_candidate = 4; */
        if (message.eventPayload.oneofKind === "subscriberCandidate")
            ICECandidateTrickle.internalBinaryWrite(message.eventPayload.subscriberCandidate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ICECandidateTrickle publisher_candidate = 5; */
        if (message.eventPayload.oneofKind === "publisherCandidate")
            ICECandidateTrickle.internalBinaryWrite(message.eventPayload.publisherCandidate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6; */
        if (message.eventPayload.oneofKind === "changePublishQuality")
            ChangePublishQuality.internalBinaryWrite(message.eventPayload.changePublishQuality, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.LocalDeviceChange local_device_change = 7; */
        if (message.eventPayload.oneofKind === "localDeviceChange")
            LocalDeviceChange.internalBinaryWrite(message.eventPayload.localDeviceChange, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.MuteStateChanged mute_state_changed = 8; */
        if (message.eventPayload.oneofKind === "muteStateChanged")
            MuteStateChanged.internalBinaryWrite(message.eventPayload.muteStateChanged, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.VideoQualityChanged video_quality_changed = 9; */
        if (message.eventPayload.oneofKind === "videoQualityChanged")
            VideoQualityChanged.internalBinaryWrite(message.eventPayload.videoQualityChanged, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ParticipantJoined participant_joined = 10; */
        if (message.eventPayload.oneofKind === "participantJoined")
            ParticipantJoined.internalBinaryWrite(message.eventPayload.participantJoined, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.ParticipantLeft participant_left = 11; */
        if (message.eventPayload.oneofKind === "participantLeft")
            ParticipantLeft.internalBinaryWrite(message.eventPayload.participantLeft, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12; */
        if (message.eventPayload.oneofKind === "dominantSpeakerChanged")
            DominantSpeakerChanged.internalBinaryWrite(message.eventPayload.dominantSpeakerChanged, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent
 */
export const SfuEvent = new SfuEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantJoined$Type extends MessageType<ParticipantJoined> {
    constructor() {
        super("stream.video.sfu.event.ParticipantJoined", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantJoined>): ParticipantJoined {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantJoined>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantJoined): ParticipantJoined {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.models.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.sfu.models.Participant participant */ 2:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantJoined, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.models.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.models.Participant participant = 2; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined
 */
export const ParticipantJoined = new ParticipantJoined$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantLeft$Type extends MessageType<ParticipantLeft> {
    constructor() {
        super("stream.video.sfu.event.ParticipantLeft", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "participant", kind: "message", T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<ParticipantLeft>): ParticipantLeft {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantLeft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantLeft): ParticipantLeft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.models.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.sfu.models.Participant participant */ 2:
                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantLeft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.models.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.models.Participant participant = 2; */
        if (message.participant)
            Participant.internalBinaryWrite(message.participant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft
 */
export const ParticipantLeft = new ParticipantLeft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuteStateChanged$Type extends MessageType<MuteStateChanged> {
    constructor() {
        super("stream.video.sfu.event.MuteStateChanged", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "video_muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MuteStateChanged>): MuteStateChanged {
        const message = { userId: "", audioMuted: false, videoMuted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuteStateChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuteStateChanged): MuteStateChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* bool audio_muted */ 2:
                    message.audioMuted = reader.bool();
                    break;
                case /* bool video_muted */ 3:
                    message.videoMuted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuteStateChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* bool audio_muted = 2; */
        if (message.audioMuted !== false)
            writer.tag(2, WireType.Varint).bool(message.audioMuted);
        /* bool video_muted = 3; */
        if (message.videoMuted !== false)
            writer.tag(3, WireType.Varint).bool(message.videoMuted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.MuteStateChanged
 */
export const MuteStateChanged = new MuteStateChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoQualityChanged$Type extends MessageType<VideoQualityChanged> {
    constructor() {
        super("stream.video.sfu.event.VideoQualityChanged", [
            { no: 1, name: "stream_qualities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamQuality }
        ]);
    }
    create(value?: PartialMessage<VideoQualityChanged>): VideoQualityChanged {
        const message = { streamQualities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoQualityChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoQualityChanged): VideoQualityChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.sfu.models.StreamQuality stream_qualities */ 1:
                    message.streamQualities.push(StreamQuality.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoQualityChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.sfu.models.StreamQuality stream_qualities = 1; */
        for (let i = 0; i < message.streamQualities.length; i++)
            StreamQuality.internalBinaryWrite(message.streamQualities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.VideoQualityChanged
 */
export const VideoQualityChanged = new VideoQualityChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriberOffer$Type extends MessageType<SubscriberOffer> {
    constructor() {
        super("stream.video.sfu.event.SubscriberOffer", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriberOffer>): SubscriberOffer {
        const message = { sdp: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscriberOffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriberOffer): SubscriberOffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriberOffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer
 */
export const SubscriberOffer = new SubscriberOffer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocalDeviceChange$Type extends MessageType<LocalDeviceChange> {
    constructor() {
        super("stream.video.sfu.event.LocalDeviceChange", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocalDeviceChange>): LocalDeviceChange {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LocalDeviceChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocalDeviceChange): LocalDeviceChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocalDeviceChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.LocalDeviceChange
 */
export const LocalDeviceChange = new LocalDeviceChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ICECandidateTrickle$Type extends MessageType<ICECandidateTrickle> {
    constructor() {
        super("stream.video.sfu.event.ICECandidateTrickle", [
            { no: 1, name: "candidate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ICECandidateTrickle>): ICECandidateTrickle {
        const message = { candidate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ICECandidateTrickle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICECandidateTrickle): ICECandidateTrickle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string candidate */ 1:
                    message.candidate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ICECandidateTrickle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string candidate = 1; */
        if (message.candidate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.candidate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.ICECandidateTrickle
 */
export const ICECandidateTrickle = new ICECandidateTrickle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionQualityChanged$Type extends MessageType<ConnectionQualityChanged> {
    constructor() {
        super("stream.video.sfu.event.ConnectionQualityChanged", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "connection_quality", kind: "enum", T: () => ["stream.video.sfu.models.ConnectionQuality", ConnectionQuality] }
        ]);
    }
    create(value?: PartialMessage<ConnectionQualityChanged>): ConnectionQualityChanged {
        const message = { userId: "", connectionQuality: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectionQualityChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionQualityChanged): ConnectionQualityChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 2:
                    message.connectionQuality = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionQualityChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* stream.video.sfu.models.ConnectionQuality connection_quality = 2; */
        if (message.connectionQuality !== 0)
            writer.tag(2, WireType.Varint).int32(message.connectionQuality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged
 */
export const ConnectionQualityChanged = new ConnectionQualityChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DominantSpeakerChanged$Type extends MessageType<DominantSpeakerChanged> {
    constructor() {
        super("stream.video.sfu.event.DominantSpeakerChanged", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DominantSpeakerChanged>): DominantSpeakerChanged {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DominantSpeakerChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DominantSpeakerChanged): DominantSpeakerChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DominantSpeakerChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged
 */
export const DominantSpeakerChanged = new DominantSpeakerChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioLevelChanged$Type extends MessageType<AudioLevelChanged> {
    constructor() {
        super("stream.video.sfu.event.AudioLevelChanged", [
            { no: 1, name: "audio_levels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AudioLevel }
        ]);
    }
    create(value?: PartialMessage<AudioLevelChanged>): AudioLevelChanged {
        const message = { audioLevels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioLevelChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioLevelChanged): AudioLevelChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.sfu.event.AudioLevel audio_levels */ 1:
                    message.audioLevels.push(AudioLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioLevelChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.sfu.event.AudioLevel audio_levels = 1; */
        for (let i = 0; i < message.audioLevels.length; i++)
            AudioLevel.internalBinaryWrite(message.audioLevels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged
 */
export const AudioLevelChanged = new AudioLevelChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioLevel$Type extends MessageType<AudioLevel> {
    constructor() {
        super("stream.video.sfu.event.AudioLevel", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AudioLevel>): AudioLevel {
        const message = { userId: "", level: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioLevel): AudioLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* float level */ 2:
                    message.level = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* float level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Bit32).float(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel
 */
export const AudioLevel = new AudioLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioLayerSetting$Type extends MessageType<AudioLayerSetting> {
    constructor() {
        super("stream.video.sfu.event.AudioLayerSetting", []);
    }
    create(value?: PartialMessage<AudioLayerSetting>): AudioLayerSetting {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioLayerSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioLayerSetting): AudioLayerSetting {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AudioLayerSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.AudioLayerSetting
 */
export const AudioLayerSetting = new AudioLayerSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioMediaRequest$Type extends MessageType<AudioMediaRequest> {
    constructor() {
        super("stream.video.sfu.event.AudioMediaRequest", [
            { no: 1, name: "channelCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AudioMediaRequest>): AudioMediaRequest {
        const message = { channelCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioMediaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioMediaRequest): AudioMediaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 channelCount */ 1:
                    message.channelCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioMediaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 channelCount = 1; */
        if (message.channelCount !== 0)
            writer.tag(1, WireType.Varint).int32(message.channelCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest
 */
export const AudioMediaRequest = new AudioMediaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioSender$Type extends MessageType<AudioSender> {
    constructor() {
        super("stream.video.sfu.event.AudioSender", [
            { no: 1, name: "mediaRequest", kind: "message", T: () => AudioMediaRequest },
            { no: 2, name: "codec", kind: "message", T: () => Codec },
            { no: 3, name: "layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AudioLayerSetting }
        ]);
    }
    create(value?: PartialMessage<AudioSender>): AudioSender {
        const message = { layers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioSender>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioSender): AudioSender {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.event.AudioMediaRequest mediaRequest */ 1:
                    message.mediaRequest = AudioMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);
                    break;
                case /* stream.video.sfu.models.Codec codec */ 2:
                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);
                    break;
                case /* repeated stream.video.sfu.event.AudioLayerSetting layers */ 3:
                    message.layers.push(AudioLayerSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioSender, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.event.AudioMediaRequest mediaRequest = 1; */
        if (message.mediaRequest)
            AudioMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.models.Codec codec = 2; */
        if (message.codec)
            Codec.internalBinaryWrite(message.codec, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.sfu.event.AudioLayerSetting layers = 3; */
        for (let i = 0; i < message.layers.length; i++)
            AudioLayerSetting.internalBinaryWrite(message.layers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender
 */
export const AudioSender = new AudioSender$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoMediaRequest$Type extends MessageType<VideoMediaRequest> {
    constructor() {
        super("stream.video.sfu.event.VideoMediaRequest", [
            { no: 1, name: "idealHeight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "idealWidth", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "idealFrameRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoMediaRequest>): VideoMediaRequest {
        const message = { idealHeight: 0, idealWidth: 0, idealFrameRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoMediaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoMediaRequest): VideoMediaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 idealHeight */ 1:
                    message.idealHeight = reader.int32();
                    break;
                case /* int32 idealWidth */ 2:
                    message.idealWidth = reader.int32();
                    break;
                case /* int32 idealFrameRate */ 3:
                    message.idealFrameRate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoMediaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 idealHeight = 1; */
        if (message.idealHeight !== 0)
            writer.tag(1, WireType.Varint).int32(message.idealHeight);
        /* int32 idealWidth = 2; */
        if (message.idealWidth !== 0)
            writer.tag(2, WireType.Varint).int32(message.idealWidth);
        /* int32 idealFrameRate = 3; */
        if (message.idealFrameRate !== 0)
            writer.tag(3, WireType.Varint).int32(message.idealFrameRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest
 */
export const VideoMediaRequest = new VideoMediaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoLayerSetting$Type extends MessageType<VideoLayerSetting> {
    constructor() {
        super("stream.video.sfu.event.VideoLayerSetting", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "maxBitrate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "scaleResolutionDownBy", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "priority", kind: "enum", T: () => ["stream.video.sfu.event.VideoLayerSetting.Priority", VideoLayerSetting_Priority] },
            { no: 6, name: "codec", kind: "message", T: () => Codec }
        ]);
    }
    create(value?: PartialMessage<VideoLayerSetting>): VideoLayerSetting {
        const message = { name: "", active: false, maxBitrate: 0, scaleResolutionDownBy: 0, priority: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoLayerSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoLayerSetting): VideoLayerSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool active */ 2:
                    message.active = reader.bool();
                    break;
                case /* int32 maxBitrate */ 3:
                    message.maxBitrate = reader.int32();
                    break;
                case /* float scaleResolutionDownBy */ 4:
                    message.scaleResolutionDownBy = reader.float();
                    break;
                case /* stream.video.sfu.event.VideoLayerSetting.Priority priority */ 5:
                    message.priority = reader.int32();
                    break;
                case /* stream.video.sfu.models.Codec codec */ 6:
                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoLayerSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool active = 2; */
        if (message.active !== false)
            writer.tag(2, WireType.Varint).bool(message.active);
        /* int32 maxBitrate = 3; */
        if (message.maxBitrate !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxBitrate);
        /* float scaleResolutionDownBy = 4; */
        if (message.scaleResolutionDownBy !== 0)
            writer.tag(4, WireType.Bit32).float(message.scaleResolutionDownBy);
        /* stream.video.sfu.event.VideoLayerSetting.Priority priority = 5; */
        if (message.priority !== 0)
            writer.tag(5, WireType.Varint).int32(message.priority);
        /* stream.video.sfu.models.Codec codec = 6; */
        if (message.codec)
            Codec.internalBinaryWrite(message.codec, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting
 */
export const VideoLayerSetting = new VideoLayerSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoSender$Type extends MessageType<VideoSender> {
    constructor() {
        super("stream.video.sfu.event.VideoSender", [
            { no: 1, name: "mediaRequest", kind: "message", T: () => VideoMediaRequest },
            { no: 2, name: "codec", kind: "message", T: () => Codec },
            { no: 3, name: "layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoLayerSetting }
        ]);
    }
    create(value?: PartialMessage<VideoSender>): VideoSender {
        const message = { layers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoSender>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoSender): VideoSender {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.event.VideoMediaRequest mediaRequest */ 1:
                    message.mediaRequest = VideoMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);
                    break;
                case /* stream.video.sfu.models.Codec codec */ 2:
                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);
                    break;
                case /* repeated stream.video.sfu.event.VideoLayerSetting layers */ 3:
                    message.layers.push(VideoLayerSetting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoSender, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.event.VideoMediaRequest mediaRequest = 1; */
        if (message.mediaRequest)
            VideoMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.models.Codec codec = 2; */
        if (message.codec)
            Codec.internalBinaryWrite(message.codec, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.sfu.event.VideoLayerSetting layers = 3; */
        for (let i = 0; i < message.layers.length; i++)
            VideoLayerSetting.internalBinaryWrite(message.layers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender
 */
export const VideoSender = new VideoSender$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePublishQuality$Type extends MessageType<ChangePublishQuality> {
    constructor() {
        super("stream.video.sfu.event.ChangePublishQuality", [
            { no: 1, name: "audio_sender", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AudioSender },
            { no: 2, name: "video_sender", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoSender }
        ]);
    }
    create(value?: PartialMessage<ChangePublishQuality>): ChangePublishQuality {
        const message = { audioSender: [], videoSender: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePublishQuality>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePublishQuality): ChangePublishQuality {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.sfu.event.AudioSender audio_sender */ 1:
                    message.audioSender.push(AudioSender.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stream.video.sfu.event.VideoSender video_sender */ 2:
                    message.videoSender.push(VideoSender.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePublishQuality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.sfu.event.AudioSender audio_sender = 1; */
        for (let i = 0; i < message.audioSender.length; i++)
            AudioSender.internalBinaryWrite(message.audioSender[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.sfu.event.VideoSender video_sender = 2; */
        for (let i = 0; i < message.videoSender.length; i++)
            VideoSender.internalBinaryWrite(message.videoSender[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality
 */
export const ChangePublishQuality = new ChangePublishQuality$Type();
