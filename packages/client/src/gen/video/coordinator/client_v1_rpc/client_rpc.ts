/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/client_v1_rpc/client_rpc.proto" (package "stream.video.coordinator.client_v1_rpc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MediaStateChanged } from "../stat_v1/stat";
import { ParticipantDisconnected } from "../stat_v1/stat";
import { ParticipantConnected } from "../stat_v1/stat";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Device } from "../push_v1/push";
import { DeviceInput } from "../push_v1/push";
import { Credentials } from "../edge_v1/edge";
import { LatencyMeasurements } from "../edge_v1/edge";
import { MembersEnvelope } from "./envelopes";
import { CallsEnvelope } from "./envelopes";
import { Sort } from "../utils_v1/utils";
import { CallOptions } from "../call_v1/call";
import { Edge } from "../edge_v1/edge";
import { UserInput } from "../user_v1/user";
import { CallEnvelope } from "./envelopes";
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallRequest
 */
export interface GetCallRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallResponse
 */
export interface GetCallResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.MemberInput
 */
export interface MemberInput {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string role = 2;
     */
    role: string;
    /**
     * @generated from protobuf field: bytes custom_json = 3;
     */
    customJson: Uint8Array;
    /**
     * The user data for the user
     * If the user does not exist, this will be used to create the user
     * If the user already exists, this input will be ignored
     *
     * @generated from protobuf field: stream.video.coordinator.user_v1.UserInput user_input = 4;
     */
    userInput?: UserInput;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpsertCallMembersRequest
 */
export interface UpsertCallMembersRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.client_v1_rpc.MemberInput members = 2;
     */
    members: MemberInput[];
    /**
     * Ringing option, used to signal to clients' UI
     *
     * @generated from protobuf field: bool ring = 3;
     */
    ring: boolean;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpsertCallMembersResponse
 */
export interface UpsertCallMembersResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallMembersRequest
 */
export interface DeleteCallMembersRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * @generated from protobuf field: repeated string user_ids = 2;
     */
    userIds: string[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallMembersResponse
 */
export interface DeleteCallMembersResponse {
}
/**
 * A message that carries data for call creation
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateCallInput
 */
export interface CreateCallInput {
    /**
     * Call properties to set
     *
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallInput call = 1;
     */
    call?: CallInput;
    /**
     * Members to add to the created call
     *
     * @generated from protobuf field: repeated stream.video.coordinator.client_v1_rpc.MemberInput members = 2;
     */
    members: MemberInput[];
    /**
     * Ringing option, used to signal to clients' UI
     *
     * @generated from protobuf field: optional bool ring = 3;
     */
    ring?: boolean;
}
/**
 * A request message for GetOrCreateCall endpoint
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateCallRequest
 */
export interface CreateCallRequest {
    /**
     * Call type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Call ID. If empty, will be generated as UUIDv4
     *
     * @generated from protobuf field: optional string id = 2;
     */
    id?: string;
    /**
     * Call creation input, only used if the call does not exist
     *
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3;
     */
    input?: CreateCallInput;
}
/**
 * A request message for GetOrCreateCall endpoint
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetOrCreateCallRequest
 */
export interface GetOrCreateCallRequest {
    /**
     * Call type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Call ID
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * Call creation input, only used if the call does not exist
     *
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3;
     */
    input?: CreateCallInput;
}
/**
 * A request message for JoinCall endpoint
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.JoinCallRequest
 */
export interface JoinCallRequest {
    /**
     * Call type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Call ID
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * Call creation input, only used if the call does not exist
     *
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3;
     */
    input?: CreateCallInput;
    /**
     * Preferred client datacenter. This is optional and when set, preferred datacenter selection is not guaranteed
     *
     * @generated from protobuf field: string datacenter_id = 4;
     */
    datacenterId: string;
}
/**
 * A request message for GetOrCreateCall endpoint
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.JoinCallResponse
 */
export interface JoinCallResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
    /**
     * Whether a call was created
     *
     * @generated from protobuf field: bool created = 2;
     */
    created: boolean;
    /**
     * A list of endpoints to measure latency
     *
     * @generated from protobuf field: repeated stream.video.coordinator.edge_v1.Edge edges = 3;
     */
    edges: Edge[];
}
/**
 * Represents all updatable room fields
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CallInput
 */
export interface CallInput {
    /**
     * Custom JSON object that is stored in this call
     * All users with read permissions will have access to this object
     *
     * @generated from protobuf field: bytes custom_json = 1;
     */
    customJson: Uint8Array;
    /**
     * Call options to set
     *
     * @generated from protobuf field: stream.video.coordinator.call_v1.CallOptions options = 2;
     */
    options?: CallOptions;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetOrCreateCallResponse
 */
export interface GetOrCreateCallResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
    /**
     * Whether a call was created
     *
     * @generated from protobuf field: bool created = 2;
     */
    created: boolean;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallRequest
 */
export interface UpdateCallRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallInput input = 2;
     */
    input?: CallInput;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallResponse
 */
export interface UpdateCallResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.RoleOverride
 */
export interface RoleOverride {
    /**
     * the users that should get the new role, cannot be empty
     *
     * @generated from protobuf field: repeated string user_ids = 1;
     */
    userIds: string[];
    /**
     * the new role
     *
     * @generated from protobuf field: optional string role_name = 2;
     */
    roleName?: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.PermissionGrantOverride
 */
export interface PermissionGrantOverride {
    /**
     * the users that will get the new permissions granted
     * if empty, the grant applies to all users
     *
     * @generated from protobuf field: repeated string user_ids = 1;
     */
    userIds: string[];
    /**
     * the list of permissions granted to users
     *
     * @generated from protobuf field: repeated string permissions = 2;
     */
    permissions: string[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsRequest
 */
export interface UpdateCallPermissionsRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * @generated from protobuf oneof: grant_input
     */
    grantInput: {
        oneofKind: "roleOverride";
        /**
         * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.RoleOverride role_override = 2;
         */
        roleOverride: RoleOverride;
    } | {
        oneofKind: "permissionOverride";
        /**
         * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.PermissionGrantOverride permission_override = 3;
         */
        permissionOverride: PermissionGrantOverride;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsResponse
 */
export interface UpdateCallPermissionsResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.EndCallRequest
 */
export interface EndCallRequest {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.EndCallResponse
 */
export interface EndCallResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateCallResponse
 */
export interface CreateCallResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsRequest
 */
export interface QueryCallsRequest {
    /**
     * @generated from protobuf field: bytes mq_json = 1;
     */
    mqJson: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 limit = 2;
     */
    limit?: number;
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.utils_v1.Sort sorts = 3;
     */
    sorts: Sort[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsResponse
 */
export interface QueryCallsResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallsEnvelope calls = 1;
     */
    calls?: CallsEnvelope;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryMembersRequest
 */
export interface QueryMembersRequest {
    /**
     * @generated from protobuf field: bytes mq_json = 1;
     */
    mqJson: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 limit = 2;
     */
    limit?: number;
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.utils_v1.Sort sorts = 3;
     */
    sorts: Sort[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryMembersResponse
 */
export interface QueryMembersResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.MembersEnvelope members = 1;
     */
    members?: MembersEnvelope;
}
/**
 * A request message for GetCallEdgeServer endpoint
 *
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallEdgeServerRequest
 */
export interface GetCallEdgeServerRequest {
    /**
     * Call CID to get SFU for
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * Latency measurement results
     * Optional
     *
     * @generated from protobuf field: stream.video.coordinator.edge_v1.LatencyMeasurements measurements = 2;
     */
    measurements?: LatencyMeasurements;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallEdgeServerResponse
 */
export interface GetCallEdgeServerResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1;
     */
    call?: CallEnvelope;
    /**
     * Call edge server credentials
     *
     * @generated from protobuf field: stream.video.coordinator.edge_v1.Credentials credentials = 2;
     */
    credentials?: Credentials;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateDeviceRequest
 */
export interface CreateDeviceRequest {
    /**
     * @generated from protobuf field: stream.video.coordinator.push_v1.DeviceInput input = 1;
     */
    input?: DeviceInput;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.CreateDeviceResponse
 */
export interface CreateDeviceResponse {
    /**
     * @generated from protobuf field: stream.video.coordinator.push_v1.Device device = 1;
     */
    device?: Device;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteDeviceRequest
 */
export interface DeleteDeviceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.DeleteDeviceResponse
 */
export interface DeleteDeviceResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryDevicesRequest
 */
export interface QueryDevicesRequest {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.QueryDevicesResponse
 */
export interface QueryDevicesResponse {
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.push_v1.Device devices = 1;
     */
    devices: Device[];
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendEventRequest
 */
export interface SendEventRequest {
    /**
     * The call cid
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * The type of event
     *
     * @generated from protobuf field: stream.video.coordinator.client_v1_rpc.UserEventType event_type = 2;
     */
    eventType: UserEventType;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendEventResponse
 */
export interface SendEventResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventRequest
 */
export interface SendCustomEventRequest {
    /**
     * The call cid
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * The type of event
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * The data of the event
     *
     * @generated from protobuf field: bytes data_json = 3;
     */
    dataJson: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventResponse
 */
export interface SendCustomEventResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest
 */
export interface ReportCallStatsRequest {
    /**
     * A concatenation of call type and call id with ":" as delimiter
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * A WebRTC Stats report encoded as a JSON string, as defined in https://www.w3.org/TR/webrtc/#dom-rtcstatsreport
     *
     * @generated from protobuf field: bytes stats_json = 2;
     */
    statsJson: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse
 */
export interface ReportCallStatsResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatEventRequest
 */
export interface ReportCallStatEventRequest {
    /**
     * A concatenation of call type and call id with ":" as delimiter
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * Event timestamp as RFC3339 string.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "participantConnected";
        /**
         * @generated from protobuf field: stream.video.coordinator.stat_v1.ParticipantConnected participant_connected = 3;
         */
        participantConnected: ParticipantConnected;
    } | {
        oneofKind: "participantDisconnected";
        /**
         * @generated from protobuf field: stream.video.coordinator.stat_v1.ParticipantDisconnected participant_disconnected = 4;
         */
        participantDisconnected: ParticipantDisconnected;
    } | {
        oneofKind: "mediaStateChanged";
        /**
         * @generated from protobuf field: stream.video.coordinator.stat_v1.MediaStateChanged media_state_changed = 5;
         */
        mediaStateChanged: MediaStateChanged;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatEventResponse
 */
export interface ReportCallStatEventResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsRequest
 */
export interface GetCallStatsRequest {
    /**
     * A concatenation of call type and call id with ":" as delimiter
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueRequest
 */
export interface ReportIssueRequest {
    /**
     * A concatenation of call type and call id with ":" as delimiter
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * Optional description.
     *
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: bytes custom_json = 3;
     */
    customJson: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueResponse
 */
export interface ReportIssueResponse {
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallRequest
 */
export interface ReviewCallRequest {
    /**
     * A concatenation of call type and call id with ":" as delimiter
     *
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
    /**
     * Rating between 0 and 5 stars.
     *
     * @generated from protobuf field: float stars = 2;
     */
    stars: number;
    /**
     * Optional description.
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * Optional custom data.
     *
     * @generated from protobuf field: bytes custom_json = 4;
     */
    customJson: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallResponse
 */
export interface ReviewCallResponse {
}
/**
 * @generated from protobuf enum stream.video.coordinator.client_v1_rpc.UserEventType
 */
export enum UserEventType {
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_ACCEPTED_CALL = 1;
     */
    ACCEPTED_CALL = 1,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_REJECTED_CALL = 2;
     */
    REJECTED_CALL = 2,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_CANCELLED_CALL = 3;
     */
    CANCELLED_CALL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCallRequest$Type extends MessageType<GetCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallRequest>): GetCallRequest {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallRequest): GetCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallRequest
 */
export const GetCallRequest = new GetCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallResponse$Type extends MessageType<GetCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope }
        ]);
    }
    create(value?: PartialMessage<GetCallResponse>): GetCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallResponse): GetCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallResponse
 */
export const GetCallResponse = new GetCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberInput$Type extends MessageType<MemberInput> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.MemberInput", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "custom_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "user_input", kind: "message", T: () => UserInput }
        ]);
    }
    create(value?: PartialMessage<MemberInput>): MemberInput {
        const message = { userId: "", role: "", customJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemberInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberInput): MemberInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string role */ 2:
                    message.role = reader.string();
                    break;
                case /* bytes custom_json */ 3:
                    message.customJson = reader.bytes();
                    break;
                case /* stream.video.coordinator.user_v1.UserInput user_input */ 4:
                    message.userInput = UserInput.internalBinaryRead(reader, reader.uint32(), options, message.userInput);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemberInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string role = 2; */
        if (message.role !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.role);
        /* bytes custom_json = 3; */
        if (message.customJson.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.customJson);
        /* stream.video.coordinator.user_v1.UserInput user_input = 4; */
        if (message.userInput)
            UserInput.internalBinaryWrite(message.userInput, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.MemberInput
 */
export const MemberInput = new MemberInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertCallMembersRequest$Type extends MessageType<UpsertCallMembersRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpsertCallMembersRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MemberInput },
            { no: 3, name: "ring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertCallMembersRequest>): UpsertCallMembersRequest {
        const message = { callCid: "", members: [], ring: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertCallMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertCallMembersRequest): UpsertCallMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* repeated stream.video.coordinator.client_v1_rpc.MemberInput members */ 2:
                    message.members.push(MemberInput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool ring */ 3:
                    message.ring = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertCallMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* repeated stream.video.coordinator.client_v1_rpc.MemberInput members = 2; */
        for (let i = 0; i < message.members.length; i++)
            MemberInput.internalBinaryWrite(message.members[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool ring = 3; */
        if (message.ring !== false)
            writer.tag(3, WireType.Varint).bool(message.ring);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpsertCallMembersRequest
 */
export const UpsertCallMembersRequest = new UpsertCallMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertCallMembersResponse$Type extends MessageType<UpsertCallMembersResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpsertCallMembersResponse", []);
    }
    create(value?: PartialMessage<UpsertCallMembersResponse>): UpsertCallMembersResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertCallMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertCallMembersResponse): UpsertCallMembersResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpsertCallMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpsertCallMembersResponse
 */
export const UpsertCallMembersResponse = new UpsertCallMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallMembersRequest$Type extends MessageType<DeleteCallMembersRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteCallMembersRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCallMembersRequest>): DeleteCallMembersRequest {
        const message = { callCid: "", userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallMembersRequest): DeleteCallMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* repeated string user_ids */ 2:
                    message.userIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCallMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* repeated string user_ids = 2; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.userIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallMembersRequest
 */
export const DeleteCallMembersRequest = new DeleteCallMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallMembersResponse$Type extends MessageType<DeleteCallMembersResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteCallMembersResponse", []);
    }
    create(value?: PartialMessage<DeleteCallMembersResponse>): DeleteCallMembersResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallMembersResponse): DeleteCallMembersResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCallMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteCallMembersResponse
 */
export const DeleteCallMembersResponse = new DeleteCallMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallInput$Type extends MessageType<CreateCallInput> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateCallInput", [
            { no: 1, name: "call", kind: "message", T: () => CallInput },
            { no: 2, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MemberInput },
            { no: 3, name: "ring", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateCallInput>): CreateCallInput {
        const message = { members: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallInput): CreateCallInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallInput call */ 1:
                    message.call = CallInput.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* repeated stream.video.coordinator.client_v1_rpc.MemberInput members */ 2:
                    message.members.push(MemberInput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool ring */ 3:
                    message.ring = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallInput call = 1; */
        if (message.call)
            CallInput.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.coordinator.client_v1_rpc.MemberInput members = 2; */
        for (let i = 0; i < message.members.length; i++)
            MemberInput.internalBinaryWrite(message.members[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool ring = 3; */
        if (message.ring !== undefined)
            writer.tag(3, WireType.Varint).bool(message.ring);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateCallInput
 */
export const CreateCallInput = new CreateCallInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallRequest$Type extends MessageType<CreateCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateCallRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "input", kind: "message", T: () => CreateCallInput }
        ]);
    }
    create(value?: PartialMessage<CreateCallRequest>): CreateCallRequest {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallRequest): CreateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* optional string id */ 2:
                    message.id = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.CreateCallInput input */ 3:
                    message.input = CreateCallInput.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* optional string id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3; */
        if (message.input)
            CreateCallInput.internalBinaryWrite(message.input, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateCallRequest
 */
export const CreateCallRequest = new CreateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrCreateCallRequest$Type extends MessageType<GetOrCreateCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetOrCreateCallRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "input", kind: "message", T: () => CreateCallInput }
        ]);
    }
    create(value?: PartialMessage<GetOrCreateCallRequest>): GetOrCreateCallRequest {
        const message = { type: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOrCreateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrCreateCallRequest): GetOrCreateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.CreateCallInput input */ 3:
                    message.input = CreateCallInput.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrCreateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3; */
        if (message.input)
            CreateCallInput.internalBinaryWrite(message.input, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetOrCreateCallRequest
 */
export const GetOrCreateCallRequest = new GetOrCreateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallRequest$Type extends MessageType<JoinCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.JoinCallRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "input", kind: "message", T: () => CreateCallInput },
            { no: 4, name: "datacenter_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinCallRequest>): JoinCallRequest {
        const message = { type: "", id: "", datacenterId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallRequest): JoinCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.CreateCallInput input */ 3:
                    message.input = CreateCallInput.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                case /* string datacenter_id */ 4:
                    message.datacenterId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* stream.video.coordinator.client_v1_rpc.CreateCallInput input = 3; */
        if (message.input)
            CreateCallInput.internalBinaryWrite(message.input, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string datacenter_id = 4; */
        if (message.datacenterId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.datacenterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.JoinCallRequest
 */
export const JoinCallRequest = new JoinCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallResponse$Type extends MessageType<JoinCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.JoinCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope },
            { no: 2, name: "created", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "edges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Edge }
        ]);
    }
    create(value?: PartialMessage<JoinCallResponse>): JoinCallResponse {
        const message = { created: false, edges: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallResponse): JoinCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* bool created */ 2:
                    message.created = reader.bool();
                    break;
                case /* repeated stream.video.coordinator.edge_v1.Edge edges */ 3:
                    message.edges.push(Edge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool created = 2; */
        if (message.created !== false)
            writer.tag(2, WireType.Varint).bool(message.created);
        /* repeated stream.video.coordinator.edge_v1.Edge edges = 3; */
        for (let i = 0; i < message.edges.length; i++)
            Edge.internalBinaryWrite(message.edges[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.JoinCallResponse
 */
export const JoinCallResponse = new JoinCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallInput$Type extends MessageType<CallInput> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CallInput", [
            { no: 1, name: "custom_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "options", kind: "message", T: () => CallOptions }
        ]);
    }
    create(value?: PartialMessage<CallInput>): CallInput {
        const message = { customJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallInput): CallInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes custom_json */ 1:
                    message.customJson = reader.bytes();
                    break;
                case /* stream.video.coordinator.call_v1.CallOptions options */ 2:
                    message.options = CallOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes custom_json = 1; */
        if (message.customJson.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.customJson);
        /* stream.video.coordinator.call_v1.CallOptions options = 2; */
        if (message.options)
            CallOptions.internalBinaryWrite(message.options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CallInput
 */
export const CallInput = new CallInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrCreateCallResponse$Type extends MessageType<GetOrCreateCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetOrCreateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope },
            { no: 2, name: "created", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetOrCreateCallResponse>): GetOrCreateCallResponse {
        const message = { created: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOrCreateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrCreateCallResponse): GetOrCreateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* bool created */ 2:
                    message.created = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrCreateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool created = 2; */
        if (message.created !== false)
            writer.tag(2, WireType.Varint).bool(message.created);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetOrCreateCallResponse
 */
export const GetOrCreateCallResponse = new GetOrCreateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallRequest$Type extends MessageType<UpdateCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "input", kind: "message", T: () => CallInput }
        ]);
    }
    create(value?: PartialMessage<UpdateCallRequest>): UpdateCallRequest {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallRequest): UpdateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.CallInput input */ 2:
                    message.input = CallInput.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* stream.video.coordinator.client_v1_rpc.CallInput input = 2; */
        if (message.input)
            CallInput.internalBinaryWrite(message.input, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallRequest
 */
export const UpdateCallRequest = new UpdateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallResponse$Type extends MessageType<UpdateCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope }
        ]);
    }
    create(value?: PartialMessage<UpdateCallResponse>): UpdateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallResponse): UpdateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallResponse
 */
export const UpdateCallResponse = new UpdateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleOverride$Type extends MessageType<RoleOverride> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.RoleOverride", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleOverride>): RoleOverride {
        const message = { userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoleOverride>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleOverride): RoleOverride {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string user_ids */ 1:
                    message.userIds.push(reader.string());
                    break;
                case /* optional string role_name */ 2:
                    message.roleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleOverride, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string user_ids = 1; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.userIds[i]);
        /* optional string role_name = 2; */
        if (message.roleName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.roleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.RoleOverride
 */
export const RoleOverride = new RoleOverride$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionGrantOverride$Type extends MessageType<PermissionGrantOverride> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.PermissionGrantOverride", [
            { no: 1, name: "user_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permissions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PermissionGrantOverride>): PermissionGrantOverride {
        const message = { userIds: [], permissions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PermissionGrantOverride>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermissionGrantOverride): PermissionGrantOverride {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string user_ids */ 1:
                    message.userIds.push(reader.string());
                    break;
                case /* repeated string permissions */ 2:
                    message.permissions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermissionGrantOverride, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string user_ids = 1; */
        for (let i = 0; i < message.userIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.userIds[i]);
        /* repeated string permissions = 2; */
        for (let i = 0; i < message.permissions.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.permissions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.PermissionGrantOverride
 */
export const PermissionGrantOverride = new PermissionGrantOverride$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallPermissionsRequest$Type extends MessageType<UpdateCallPermissionsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_override", kind: "message", oneof: "grantInput", T: () => RoleOverride },
            { no: 3, name: "permission_override", kind: "message", oneof: "grantInput", T: () => PermissionGrantOverride }
        ]);
    }
    create(value?: PartialMessage<UpdateCallPermissionsRequest>): UpdateCallPermissionsRequest {
        const message = { callCid: "", grantInput: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallPermissionsRequest): UpdateCallPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.RoleOverride role_override */ 2:
                    message.grantInput = {
                        oneofKind: "roleOverride",
                        roleOverride: RoleOverride.internalBinaryRead(reader, reader.uint32(), options, (message.grantInput as any).roleOverride)
                    };
                    break;
                case /* stream.video.coordinator.client_v1_rpc.PermissionGrantOverride permission_override */ 3:
                    message.grantInput = {
                        oneofKind: "permissionOverride",
                        permissionOverride: PermissionGrantOverride.internalBinaryRead(reader, reader.uint32(), options, (message.grantInput as any).permissionOverride)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* stream.video.coordinator.client_v1_rpc.RoleOverride role_override = 2; */
        if (message.grantInput.oneofKind === "roleOverride")
            RoleOverride.internalBinaryWrite(message.grantInput.roleOverride, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.client_v1_rpc.PermissionGrantOverride permission_override = 3; */
        if (message.grantInput.oneofKind === "permissionOverride")
            PermissionGrantOverride.internalBinaryWrite(message.grantInput.permissionOverride, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsRequest
 */
export const UpdateCallPermissionsRequest = new UpdateCallPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallPermissionsResponse$Type extends MessageType<UpdateCallPermissionsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsResponse", []);
    }
    create(value?: PartialMessage<UpdateCallPermissionsResponse>): UpdateCallPermissionsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallPermissionsResponse): UpdateCallPermissionsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateCallPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.UpdateCallPermissionsResponse
 */
export const UpdateCallPermissionsResponse = new UpdateCallPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallRequest$Type extends MessageType<EndCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.EndCallRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EndCallRequest>): EndCallRequest {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallRequest): EndCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.EndCallRequest
 */
export const EndCallRequest = new EndCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallResponse$Type extends MessageType<EndCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.EndCallResponse", []);
    }
    create(value?: PartialMessage<EndCallResponse>): EndCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallResponse): EndCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.EndCallResponse
 */
export const EndCallResponse = new EndCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallResponse$Type extends MessageType<CreateCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope }
        ]);
    }
    create(value?: PartialMessage<CreateCallResponse>): CreateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallResponse): CreateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateCallResponse
 */
export const CreateCallResponse = new CreateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCallsRequest$Type extends MessageType<QueryCallsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryCallsRequest", [
            { no: 1, name: "mq_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sorts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sort }
        ]);
    }
    create(value?: PartialMessage<QueryCallsRequest>): QueryCallsRequest {
        const message = { mqJson: new Uint8Array(0), sorts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCallsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCallsRequest): QueryCallsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes mq_json */ 1:
                    message.mqJson = reader.bytes();
                    break;
                case /* optional int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* repeated stream.video.coordinator.utils_v1.Sort sorts */ 3:
                    message.sorts.push(Sort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCallsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes mq_json = 1; */
        if (message.mqJson.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.mqJson);
        /* optional int32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* repeated stream.video.coordinator.utils_v1.Sort sorts = 3; */
        for (let i = 0; i < message.sorts.length; i++)
            Sort.internalBinaryWrite(message.sorts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsRequest
 */
export const QueryCallsRequest = new QueryCallsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCallsResponse$Type extends MessageType<QueryCallsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryCallsResponse", [
            { no: 1, name: "calls", kind: "message", T: () => CallsEnvelope }
        ]);
    }
    create(value?: PartialMessage<QueryCallsResponse>): QueryCallsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCallsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCallsResponse): QueryCallsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallsEnvelope calls */ 1:
                    message.calls = CallsEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.calls);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCallsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallsEnvelope calls = 1; */
        if (message.calls)
            CallsEnvelope.internalBinaryWrite(message.calls, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryCallsResponse
 */
export const QueryCallsResponse = new QueryCallsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMembersRequest$Type extends MessageType<QueryMembersRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryMembersRequest", [
            { no: 1, name: "mq_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sorts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sort }
        ]);
    }
    create(value?: PartialMessage<QueryMembersRequest>): QueryMembersRequest {
        const message = { mqJson: new Uint8Array(0), sorts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMembersRequest): QueryMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes mq_json */ 1:
                    message.mqJson = reader.bytes();
                    break;
                case /* optional int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* repeated stream.video.coordinator.utils_v1.Sort sorts */ 3:
                    message.sorts.push(Sort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes mq_json = 1; */
        if (message.mqJson.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.mqJson);
        /* optional int32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* repeated stream.video.coordinator.utils_v1.Sort sorts = 3; */
        for (let i = 0; i < message.sorts.length; i++)
            Sort.internalBinaryWrite(message.sorts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryMembersRequest
 */
export const QueryMembersRequest = new QueryMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMembersResponse$Type extends MessageType<QueryMembersResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryMembersResponse", [
            { no: 1, name: "members", kind: "message", T: () => MembersEnvelope }
        ]);
    }
    create(value?: PartialMessage<QueryMembersResponse>): QueryMembersResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMembersResponse): QueryMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.MembersEnvelope members */ 1:
                    message.members = MembersEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.members);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.MembersEnvelope members = 1; */
        if (message.members)
            MembersEnvelope.internalBinaryWrite(message.members, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryMembersResponse
 */
export const QueryMembersResponse = new QueryMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallEdgeServerRequest$Type extends MessageType<GetCallEdgeServerRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallEdgeServerRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "measurements", kind: "message", T: () => LatencyMeasurements }
        ]);
    }
    create(value?: PartialMessage<GetCallEdgeServerRequest>): GetCallEdgeServerRequest {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallEdgeServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallEdgeServerRequest): GetCallEdgeServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* stream.video.coordinator.edge_v1.LatencyMeasurements measurements */ 2:
                    message.measurements = LatencyMeasurements.internalBinaryRead(reader, reader.uint32(), options, message.measurements);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallEdgeServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* stream.video.coordinator.edge_v1.LatencyMeasurements measurements = 2; */
        if (message.measurements)
            LatencyMeasurements.internalBinaryWrite(message.measurements, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallEdgeServerRequest
 */
export const GetCallEdgeServerRequest = new GetCallEdgeServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallEdgeServerResponse$Type extends MessageType<GetCallEdgeServerResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallEdgeServerResponse", [
            { no: 1, name: "call", kind: "message", T: () => CallEnvelope },
            { no: 2, name: "credentials", kind: "message", T: () => Credentials }
        ]);
    }
    create(value?: PartialMessage<GetCallEdgeServerResponse>): GetCallEdgeServerResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallEdgeServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallEdgeServerResponse): GetCallEdgeServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.client_v1_rpc.CallEnvelope call */ 1:
                    message.call = CallEnvelope.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.coordinator.edge_v1.Credentials credentials */ 2:
                    message.credentials = Credentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallEdgeServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.client_v1_rpc.CallEnvelope call = 1; */
        if (message.call)
            CallEnvelope.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.edge_v1.Credentials credentials = 2; */
        if (message.credentials)
            Credentials.internalBinaryWrite(message.credentials, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallEdgeServerResponse
 */
export const GetCallEdgeServerResponse = new GetCallEdgeServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceRequest$Type extends MessageType<CreateDeviceRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateDeviceRequest", [
            { no: 1, name: "input", kind: "message", T: () => DeviceInput }
        ]);
    }
    create(value?: PartialMessage<CreateDeviceRequest>): CreateDeviceRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeviceRequest): CreateDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.push_v1.DeviceInput input */ 1:
                    message.input = DeviceInput.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.push_v1.DeviceInput input = 1; */
        if (message.input)
            DeviceInput.internalBinaryWrite(message.input, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateDeviceRequest
 */
export const CreateDeviceRequest = new CreateDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceResponse$Type extends MessageType<CreateDeviceResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.CreateDeviceResponse", [
            { no: 1, name: "device", kind: "message", T: () => Device }
        ]);
    }
    create(value?: PartialMessage<CreateDeviceResponse>): CreateDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeviceResponse): CreateDeviceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.push_v1.Device device */ 1:
                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.push_v1.Device device = 1; */
        if (message.device)
            Device.internalBinaryWrite(message.device, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.CreateDeviceResponse
 */
export const CreateDeviceResponse = new CreateDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeviceRequest$Type extends MessageType<DeleteDeviceRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteDeviceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteDeviceRequest>): DeleteDeviceRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeviceRequest): DeleteDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteDeviceRequest
 */
export const DeleteDeviceRequest = new DeleteDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeviceResponse$Type extends MessageType<DeleteDeviceResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.DeleteDeviceResponse", []);
    }
    create(value?: PartialMessage<DeleteDeviceResponse>): DeleteDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeviceResponse): DeleteDeviceResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.DeleteDeviceResponse
 */
export const DeleteDeviceResponse = new DeleteDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDevicesRequest$Type extends MessageType<QueryDevicesRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryDevicesRequest", []);
    }
    create(value?: PartialMessage<QueryDevicesRequest>): QueryDevicesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDevicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDevicesRequest): QueryDevicesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryDevicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryDevicesRequest
 */
export const QueryDevicesRequest = new QueryDevicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDevicesResponse$Type extends MessageType<QueryDevicesResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.QueryDevicesResponse", [
            { no: 1, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device }
        ]);
    }
    create(value?: PartialMessage<QueryDevicesResponse>): QueryDevicesResponse {
        const message = { devices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDevicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDevicesResponse): QueryDevicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.coordinator.push_v1.Device devices */ 1:
                    message.devices.push(Device.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDevicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.coordinator.push_v1.Device devices = 1; */
        for (let i = 0; i < message.devices.length; i++)
            Device.internalBinaryWrite(message.devices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.QueryDevicesResponse
 */
export const QueryDevicesResponse = new QueryDevicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventRequest$Type extends MessageType<SendEventRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendEventRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event_type", kind: "enum", T: () => ["stream.video.coordinator.client_v1_rpc.UserEventType", UserEventType, "USER_EVENT_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SendEventRequest>): SendEventRequest {
        const message = { callCid: "", eventType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventRequest): SendEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* stream.video.coordinator.client_v1_rpc.UserEventType event_type */ 2:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* stream.video.coordinator.client_v1_rpc.UserEventType event_type = 2; */
        if (message.eventType !== 0)
            writer.tag(2, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendEventRequest
 */
export const SendEventRequest = new SendEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventResponse$Type extends MessageType<SendEventResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendEventResponse", []);
    }
    create(value?: PartialMessage<SendEventResponse>): SendEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventResponse): SendEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendEventResponse
 */
export const SendEventResponse = new SendEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventRequest$Type extends MessageType<SendCustomEventRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendCustomEventRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "data_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendCustomEventRequest>): SendCustomEventRequest {
        const message = { callCid: "", type: "", dataJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventRequest): SendCustomEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* bytes data_json */ 3:
                    message.dataJson = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendCustomEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* bytes data_json = 3; */
        if (message.dataJson.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.dataJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventRequest
 */
export const SendCustomEventRequest = new SendCustomEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventResponse$Type extends MessageType<SendCustomEventResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.SendCustomEventResponse", []);
    }
    create(value?: PartialMessage<SendCustomEventResponse>): SendCustomEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventResponse): SendCustomEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendCustomEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.SendCustomEventResponse
 */
export const SendCustomEventResponse = new SendCustomEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsRequest$Type extends MessageType<ReportCallStatsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stats_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ReportCallStatsRequest>): ReportCallStatsRequest {
        const message = { callCid: "", statsJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsRequest): ReportCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* bytes stats_json */ 2:
                    message.statsJson = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* bytes stats_json = 2; */
        if (message.statsJson.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.statsJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest
 */
export const ReportCallStatsRequest = new ReportCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsResponse$Type extends MessageType<ReportCallStatsResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse", []);
    }
    create(value?: PartialMessage<ReportCallStatsResponse>): ReportCallStatsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsResponse): ReportCallStatsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportCallStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse
 */
export const ReportCallStatsResponse = new ReportCallStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatEventRequest$Type extends MessageType<ReportCallStatEventRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatEventRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "participant_connected", kind: "message", oneof: "event", T: () => ParticipantConnected },
            { no: 4, name: "participant_disconnected", kind: "message", oneof: "event", T: () => ParticipantDisconnected },
            { no: 5, name: "media_state_changed", kind: "message", oneof: "event", T: () => MediaStateChanged }
        ]);
    }
    create(value?: PartialMessage<ReportCallStatEventRequest>): ReportCallStatEventRequest {
        const message = { callCid: "", event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatEventRequest): ReportCallStatEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* stream.video.coordinator.stat_v1.ParticipantConnected participant_connected */ 3:
                    message.event = {
                        oneofKind: "participantConnected",
                        participantConnected: ParticipantConnected.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).participantConnected)
                    };
                    break;
                case /* stream.video.coordinator.stat_v1.ParticipantDisconnected participant_disconnected */ 4:
                    message.event = {
                        oneofKind: "participantDisconnected",
                        participantDisconnected: ParticipantDisconnected.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).participantDisconnected)
                    };
                    break;
                case /* stream.video.coordinator.stat_v1.MediaStateChanged media_state_changed */ 5:
                    message.event = {
                        oneofKind: "mediaStateChanged",
                        mediaStateChanged: MediaStateChanged.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).mediaStateChanged)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportCallStatEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.stat_v1.ParticipantConnected participant_connected = 3; */
        if (message.event.oneofKind === "participantConnected")
            ParticipantConnected.internalBinaryWrite(message.event.participantConnected, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.stat_v1.ParticipantDisconnected participant_disconnected = 4; */
        if (message.event.oneofKind === "participantDisconnected")
            ParticipantDisconnected.internalBinaryWrite(message.event.participantDisconnected, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.stat_v1.MediaStateChanged media_state_changed = 5; */
        if (message.event.oneofKind === "mediaStateChanged")
            MediaStateChanged.internalBinaryWrite(message.event.mediaStateChanged, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatEventRequest
 */
export const ReportCallStatEventRequest = new ReportCallStatEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatEventResponse$Type extends MessageType<ReportCallStatEventResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportCallStatEventResponse", []);
    }
    create(value?: PartialMessage<ReportCallStatEventResponse>): ReportCallStatEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatEventResponse): ReportCallStatEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportCallStatEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportCallStatEventResponse
 */
export const ReportCallStatEventResponse = new ReportCallStatEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallStatsRequest$Type extends MessageType<GetCallStatsRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.GetCallStatsRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallStatsRequest>): GetCallStatsRequest {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallStatsRequest): GetCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.GetCallStatsRequest
 */
export const GetCallStatsRequest = new GetCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueRequest$Type extends MessageType<ReportIssueRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportIssueRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "custom_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ReportIssueRequest>): ReportIssueRequest {
        const message = { callCid: "", description: "", customJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueRequest): ReportIssueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* bytes custom_json */ 3:
                    message.customJson = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportIssueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* bytes custom_json = 3; */
        if (message.customJson.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.customJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueRequest
 */
export const ReportIssueRequest = new ReportIssueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueResponse$Type extends MessageType<ReportIssueResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReportIssueResponse", []);
    }
    create(value?: PartialMessage<ReportIssueResponse>): ReportIssueResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueResponse): ReportIssueResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportIssueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReportIssueResponse
 */
export const ReportIssueResponse = new ReportIssueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallRequest$Type extends MessageType<ReviewCallRequest> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReviewCallRequest", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stars", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "custom_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ReviewCallRequest>): ReviewCallRequest {
        const message = { callCid: "", stars: 0, description: "", customJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallRequest): ReviewCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                case /* float stars */ 2:
                    message.stars = reader.float();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* bytes custom_json */ 4:
                    message.customJson = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReviewCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        /* float stars = 2; */
        if (message.stars !== 0)
            writer.tag(2, WireType.Bit32).float(message.stars);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* bytes custom_json = 4; */
        if (message.customJson.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.customJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallRequest
 */
export const ReviewCallRequest = new ReviewCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallResponse$Type extends MessageType<ReviewCallResponse> {
    constructor() {
        super("stream.video.coordinator.client_v1_rpc.ReviewCallResponse", []);
    }
    create(value?: PartialMessage<ReviewCallResponse>): ReviewCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallResponse): ReviewCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReviewCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.client_v1_rpc.ReviewCallResponse
 */
export const ReviewCallResponse = new ReviewCallResponse$Type();
/**
 * @generated ServiceType for protobuf service stream.video.coordinator.client_v1_rpc.ClientRPC
 */
export const ClientRPC = new ServiceType("stream.video.coordinator.client_v1_rpc.ClientRPC", [
    { name: "CreateCall", options: {}, I: CreateCallRequest, O: CreateCallResponse },
    { name: "GetOrCreateCall", options: {}, I: GetOrCreateCallRequest, O: GetOrCreateCallResponse },
    { name: "JoinCall", options: {}, I: JoinCallRequest, O: JoinCallResponse },
    { name: "GetCallEdgeServer", options: {}, I: GetCallEdgeServerRequest, O: GetCallEdgeServerResponse },
    { name: "UpdateCall", options: {}, I: UpdateCallRequest, O: UpdateCallResponse },
    { name: "UpdateCallPermissions", options: {}, I: UpdateCallPermissionsRequest, O: UpdateCallPermissionsResponse },
    { name: "EndCall", options: {}, I: EndCallRequest, O: EndCallResponse },
    { name: "QueryCalls", options: {}, I: QueryCallsRequest, O: QueryCallsResponse },
    { name: "QueryMembers", options: {}, I: QueryMembersRequest, O: QueryMembersResponse },
    { name: "CreateDevice", options: {}, I: CreateDeviceRequest, O: CreateDeviceResponse },
    { name: "DeleteDevice", options: {}, I: DeleteDeviceRequest, O: DeleteDeviceResponse },
    { name: "QueryDevices", options: {}, I: QueryDevicesRequest, O: QueryDevicesResponse },
    { name: "UpsertCallMembers", options: {}, I: UpsertCallMembersRequest, O: UpsertCallMembersResponse },
    { name: "DeleteCallMembers", options: {}, I: DeleteCallMembersRequest, O: DeleteCallMembersResponse },
    { name: "SendEvent", options: {}, I: SendEventRequest, O: SendEventResponse },
    { name: "SendCustomEvent", options: {}, I: SendCustomEventRequest, O: SendCustomEventResponse },
    { name: "ReportCallStats", options: {}, I: ReportCallStatsRequest, O: ReportCallStatsResponse },
    { name: "ReportCallStatEvent", options: {}, I: ReportCallStatEventRequest, O: ReportCallStatEventResponse },
    { name: "ReviewCall", options: {}, I: ReviewCallRequest, O: ReviewCallResponse },
    { name: "ReportIssue", options: {}, I: ReportIssueRequest, O: ReportIssueResponse }
]);
