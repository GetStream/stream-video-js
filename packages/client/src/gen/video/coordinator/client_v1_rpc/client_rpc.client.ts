/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/client_v1_rpc/client_rpc.proto" (package "stream.video.coordinator.client_v1_rpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ClientRPC } from "./client_rpc";
import type { ReportIssueResponse } from "./client_rpc";
import type { ReportIssueRequest } from "./client_rpc";
import type { ReviewCallResponse } from "./client_rpc";
import type { ReviewCallRequest } from "./client_rpc";
import type { GetCallStatsResponse } from "./client_rpc";
import type { GetCallStatsRequest } from "./client_rpc";
import type { ReportCallStatsResponse } from "./client_rpc";
import type { ReportCallStatsRequest } from "./client_rpc";
import type { SendCustomEventResponse } from "./client_rpc";
import type { SendCustomEventRequest } from "./client_rpc";
import type { SendEventResponse } from "./client_rpc";
import type { SendEventRequest } from "./client_rpc";
import type { QueryDevicesResponse } from "./client_rpc";
import type { QueryDevicesRequest } from "./client_rpc";
import type { DeleteDeviceResponse } from "./client_rpc";
import type { DeleteDeviceRequest } from "./client_rpc";
import type { CreateDeviceResponse } from "./client_rpc";
import type { CreateDeviceRequest } from "./client_rpc";
import type { SelectEdgeServerResponse } from "./client_rpc";
import type { SelectEdgeServerRequest } from "./client_rpc";
import type { JoinCallResponse } from "./client_rpc";
import type { JoinCallRequest } from "./client_rpc";
import type { QueryCallsResponse } from "./client_rpc";
import type { QueryCallsRequest } from "./client_rpc";
import type { GetCallResponse } from "./client_rpc";
import type { GetCallRequest } from "./client_rpc";
import type { EndCallResponse } from "./client_rpc";
import type { EndCallRequest } from "./client_rpc";
import type { StartCallResponse } from "./client_rpc";
import type { StartCallRequest } from "./client_rpc";
import type { DeleteRoomMembersResponse } from "./client_rpc";
import type { DeleteRoomMembersRequest } from "./client_rpc";
import type { UpdateRoomMembersResponse } from "./client_rpc";
import type { UpdateRoomMembersRequest } from "./client_rpc";
import type { QueryMembersResponse } from "./client_rpc";
import type { QueryMembersRequest } from "./client_rpc";
import type { LeaveRoomResponse } from "./client_rpc";
import type { LeaveRoomRequest } from "./client_rpc";
import type { JoinRoomResponse } from "./client_rpc";
import type { JoinRoomRequest } from "./client_rpc";
import type { QueryRoomsResponse } from "./client_rpc";
import type { QueryRoomsRequest } from "./client_rpc";
import type { DeleteRoomResponse } from "./client_rpc";
import type { DeleteRoomRequest } from "./client_rpc";
import type { UpdateRoomResponse } from "./client_rpc";
import type { UpdateRoomRequest } from "./client_rpc";
import type { GetRoomResponse } from "./client_rpc";
import type { GetRoomRequest } from "./client_rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateRoomResponse } from "./client_rpc";
import type { CreateRoomRequest } from "./client_rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service stream.video.coordinator.client_v1_rpc.ClientRPC
 */
export interface IClientRPCClient {
    /**
     * CreateRoom creates a room
     *
     * @generated from protobuf rpc: CreateRoom(stream.video.coordinator.client_v1_rpc.CreateRoomRequest) returns (stream.video.coordinator.client_v1_rpc.CreateRoomResponse);
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse>;
    /**
     * GetRoom gets a room by ID
     *
     * @generated from protobuf rpc: GetRoom(stream.video.coordinator.client_v1_rpc.GetRoomRequest) returns (stream.video.coordinator.client_v1_rpc.GetRoomResponse);
     */
    getRoom(input: GetRoomRequest, options?: RpcOptions): UnaryCall<GetRoomRequest, GetRoomResponse>;
    /**
     * UpdateRoom updates a room
     *
     * @generated from protobuf rpc: UpdateRoom(stream.video.coordinator.client_v1_rpc.UpdateRoomRequest) returns (stream.video.coordinator.client_v1_rpc.UpdateRoomResponse);
     */
    updateRoom(input: UpdateRoomRequest, options?: RpcOptions): UnaryCall<UpdateRoomRequest, UpdateRoomResponse>;
    /**
     * DeleteRoom deletes a room
     *
     * @generated from protobuf rpc: DeleteRoom(stream.video.coordinator.client_v1_rpc.DeleteRoomRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteRoomResponse);
     */
    deleteRoom(input: DeleteRoomRequest, options?: RpcOptions): UnaryCall<DeleteRoomRequest, DeleteRoomResponse>;
    /**
     * QueryRooms gets a list of rooms that match your query criteria
     *
     * @generated from protobuf rpc: QueryRooms(stream.video.coordinator.client_v1_rpc.QueryRoomsRequest) returns (stream.video.coordinator.client_v1_rpc.QueryRoomsResponse);
     */
    queryRooms(input: QueryRoomsRequest, options?: RpcOptions): UnaryCall<QueryRoomsRequest, QueryRoomsResponse>;
    /**
     * JoinRoom adds yourself to a room
     *
     * @generated from protobuf rpc: JoinRoom(stream.video.coordinator.client_v1_rpc.JoinRoomRequest) returns (stream.video.coordinator.client_v1_rpc.JoinRoomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinRoomResponse>;
    /**
     * LeaveRoom removes yourself from a room
     *
     * @generated from protobuf rpc: LeaveRoom(stream.video.coordinator.client_v1_rpc.LeaveRoomRequest) returns (stream.video.coordinator.client_v1_rpc.LeaveRoomResponse);
     */
    leaveRoom(input: LeaveRoomRequest, options?: RpcOptions): UnaryCall<LeaveRoomRequest, LeaveRoomResponse>;
    /**
     * QueryMembers gets a list of members that match your query criteria
     *
     * @generated from protobuf rpc: QueryMembers(stream.video.coordinator.client_v1_rpc.QueryMembersRequest) returns (stream.video.coordinator.client_v1_rpc.QueryMembersResponse);
     */
    queryMembers(input: QueryMembersRequest, options?: RpcOptions): UnaryCall<QueryMembersRequest, QueryMembersResponse>;
    /**
     * UpdateMembers creates or updates members in a room.
     * If a member is not found, It will be created.
     *
     * @generated from protobuf rpc: UpdateRoomMembers(stream.video.coordinator.client_v1_rpc.UpdateRoomMembersRequest) returns (stream.video.coordinator.client_v1_rpc.UpdateRoomMembersResponse);
     */
    updateRoomMembers(input: UpdateRoomMembersRequest, options?: RpcOptions): UnaryCall<UpdateRoomMembersRequest, UpdateRoomMembersResponse>;
    /**
     * DeleteMembers deletes members from a room.
     *
     * @generated from protobuf rpc: DeleteRoomMembers(stream.video.coordinator.client_v1_rpc.DeleteRoomMembersRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteRoomMembersResponse);
     */
    deleteRoomMembers(input: DeleteRoomMembersRequest, options?: RpcOptions): UnaryCall<DeleteRoomMembersRequest, DeleteRoomMembersResponse>;
    /**
     * @generated from protobuf rpc: StartCall(stream.video.coordinator.client_v1_rpc.StartCallRequest) returns (stream.video.coordinator.client_v1_rpc.StartCallResponse);
     */
    startCall(input: StartCallRequest, options?: RpcOptions): UnaryCall<StartCallRequest, StartCallResponse>;
    /**
     * @generated from protobuf rpc: EndCall(stream.video.coordinator.client_v1_rpc.EndCallRequest) returns (stream.video.coordinator.client_v1_rpc.EndCallResponse);
     */
    endCall(input: EndCallRequest, options?: RpcOptions): UnaryCall<EndCallRequest, EndCallResponse>;
    /**
     * GetCall retrieves the state for one call, the user calling this endpoint is created if missing
     *
     * @generated from protobuf rpc: GetCall(stream.video.coordinator.client_v1_rpc.GetCallRequest) returns (stream.video.coordinator.client_v1_rpc.GetCallResponse);
     */
    getCall(input: GetCallRequest, options?: RpcOptions): UnaryCall<GetCallRequest, GetCallResponse>;
    /**
     * @generated from protobuf rpc: QueryCalls(stream.video.coordinator.client_v1_rpc.QueryCallsRequest) returns (stream.video.coordinator.client_v1_rpc.QueryCallsResponse);
     */
    queryCalls(input: QueryCallsRequest, options?: RpcOptions): UnaryCall<QueryCallsRequest, QueryCallsResponse>;
    /**
     * JoinCall returns the call state and the list of edges that the user should be check for latency
     * this endpoint is meant to be used to prepare the information needed to call the SelectEdgeServer endpoint
     *
     * @generated from protobuf rpc: JoinCall(stream.video.coordinator.client_v1_rpc.JoinCallRequest) returns (stream.video.coordinator.client_v1_rpc.JoinCallResponse);
     */
    joinCall(input: JoinCallRequest, options?: RpcOptions): UnaryCall<JoinCallRequest, JoinCallResponse>;
    /**
     * @generated from protobuf rpc: SelectEdgeServer(stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest) returns (stream.video.coordinator.client_v1_rpc.SelectEdgeServerResponse);
     */
    selectEdgeServer(input: SelectEdgeServerRequest, options?: RpcOptions): UnaryCall<SelectEdgeServerRequest, SelectEdgeServerResponse>;
    /**
     * @generated from protobuf rpc: CreateDevice(stream.video.coordinator.client_v1_rpc.CreateDeviceRequest) returns (stream.video.coordinator.client_v1_rpc.CreateDeviceResponse);
     */
    createDevice(input: CreateDeviceRequest, options?: RpcOptions): UnaryCall<CreateDeviceRequest, CreateDeviceResponse>;
    /**
     * @generated from protobuf rpc: DeleteDevice(stream.video.coordinator.client_v1_rpc.DeleteDeviceRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteDeviceResponse);
     */
    deleteDevice(input: DeleteDeviceRequest, options?: RpcOptions): UnaryCall<DeleteDeviceRequest, DeleteDeviceResponse>;
    /**
     * @generated from protobuf rpc: QueryDevices(stream.video.coordinator.client_v1_rpc.QueryDevicesRequest) returns (stream.video.coordinator.client_v1_rpc.QueryDevicesResponse);
     */
    queryDevices(input: QueryDevicesRequest, options?: RpcOptions): UnaryCall<QueryDevicesRequest, QueryDevicesResponse>;
    /**
     * add reaction should perhaps just be handled by chat
     *
     * @generated from protobuf rpc: SendEvent(stream.video.coordinator.client_v1_rpc.SendEventRequest) returns (stream.video.coordinator.client_v1_rpc.SendEventResponse);
     */
    sendEvent(input: SendEventRequest, options?: RpcOptions): UnaryCall<SendEventRequest, SendEventResponse>;
    /**
     * @generated from protobuf rpc: SendCustomEvent(stream.video.coordinator.client_v1_rpc.SendCustomEventRequest) returns (stream.video.coordinator.client_v1_rpc.SendCustomEventResponse);
     */
    sendCustomEvent(input: SendCustomEventRequest, options?: RpcOptions): UnaryCall<SendCustomEventRequest, SendCustomEventResponse>;
    // room is a confusing name. better to call it breakout room
    // breakout rooms have their own audio/video track
    // breakout rooms have their own chat

    // *
    // TODO
    // rpc CreateBreakoutRoom(CreateBreakoutRoomRequest) returns (CreateBreakoutRoomResponse);
    // rpc JoinBreakoutRoom() returns ();
    // rpc LeaveBreakoutRoom() returns ();
    // rpc DeleteBreakoutRoom() returns ();

    /**
     * endpoint for storing stats (perhaps we should move this to the SFU layer though)
     *
     * @generated from protobuf rpc: ReportCallStats(stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest) returns (stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse);
     */
    reportCallStats(input: ReportCallStatsRequest, options?: RpcOptions): UnaryCall<ReportCallStatsRequest, ReportCallStatsResponse>;
    /**
     * @generated from protobuf rpc: GetCallStats(stream.video.coordinator.client_v1_rpc.GetCallStatsRequest) returns (stream.video.coordinator.client_v1_rpc.GetCallStatsResponse);
     */
    getCallStats(input: GetCallStatsRequest, options?: RpcOptions): UnaryCall<GetCallStatsRequest, GetCallStatsResponse>;
    /**
     * endpoint for reviewing/rating the quality of calls
     *
     * @generated from protobuf rpc: ReviewCall(stream.video.coordinator.client_v1_rpc.ReviewCallRequest) returns (stream.video.coordinator.client_v1_rpc.ReviewCallResponse);
     */
    reviewCall(input: ReviewCallRequest, options?: RpcOptions): UnaryCall<ReviewCallRequest, ReviewCallResponse>;
    /**
     * endpoint for users to report issues with a call
     *
     * @generated from protobuf rpc: ReportIssue(stream.video.coordinator.client_v1_rpc.ReportIssueRequest) returns (stream.video.coordinator.client_v1_rpc.ReportIssueResponse);
     */
    reportIssue(input: ReportIssueRequest, options?: RpcOptions): UnaryCall<ReportIssueRequest, ReportIssueResponse>;
}
/**
 * @generated from protobuf service stream.video.coordinator.client_v1_rpc.ClientRPC
 */
export class ClientRPCClient implements IClientRPCClient, ServiceInfo {
    typeName = ClientRPC.typeName;
    methods = ClientRPC.methods;
    options = ClientRPC.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CreateRoom creates a room
     *
     * @generated from protobuf rpc: CreateRoom(stream.video.coordinator.client_v1_rpc.CreateRoomRequest) returns (stream.video.coordinator.client_v1_rpc.CreateRoomResponse);
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoomRequest, CreateRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetRoom gets a room by ID
     *
     * @generated from protobuf rpc: GetRoom(stream.video.coordinator.client_v1_rpc.GetRoomRequest) returns (stream.video.coordinator.client_v1_rpc.GetRoomResponse);
     */
    getRoom(input: GetRoomRequest, options?: RpcOptions): UnaryCall<GetRoomRequest, GetRoomResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRoomRequest, GetRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateRoom updates a room
     *
     * @generated from protobuf rpc: UpdateRoom(stream.video.coordinator.client_v1_rpc.UpdateRoomRequest) returns (stream.video.coordinator.client_v1_rpc.UpdateRoomResponse);
     */
    updateRoom(input: UpdateRoomRequest, options?: RpcOptions): UnaryCall<UpdateRoomRequest, UpdateRoomResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRoomRequest, UpdateRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteRoom deletes a room
     *
     * @generated from protobuf rpc: DeleteRoom(stream.video.coordinator.client_v1_rpc.DeleteRoomRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteRoomResponse);
     */
    deleteRoom(input: DeleteRoomRequest, options?: RpcOptions): UnaryCall<DeleteRoomRequest, DeleteRoomResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRoomRequest, DeleteRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * QueryRooms gets a list of rooms that match your query criteria
     *
     * @generated from protobuf rpc: QueryRooms(stream.video.coordinator.client_v1_rpc.QueryRoomsRequest) returns (stream.video.coordinator.client_v1_rpc.QueryRoomsResponse);
     */
    queryRooms(input: QueryRoomsRequest, options?: RpcOptions): UnaryCall<QueryRoomsRequest, QueryRoomsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryRoomsRequest, QueryRoomsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * JoinRoom adds yourself to a room
     *
     * @generated from protobuf rpc: JoinRoom(stream.video.coordinator.client_v1_rpc.JoinRoomRequest) returns (stream.video.coordinator.client_v1_rpc.JoinRoomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinRoomResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRoomRequest, JoinRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * LeaveRoom removes yourself from a room
     *
     * @generated from protobuf rpc: LeaveRoom(stream.video.coordinator.client_v1_rpc.LeaveRoomRequest) returns (stream.video.coordinator.client_v1_rpc.LeaveRoomResponse);
     */
    leaveRoom(input: LeaveRoomRequest, options?: RpcOptions): UnaryCall<LeaveRoomRequest, LeaveRoomResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<LeaveRoomRequest, LeaveRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * QueryMembers gets a list of members that match your query criteria
     *
     * @generated from protobuf rpc: QueryMembers(stream.video.coordinator.client_v1_rpc.QueryMembersRequest) returns (stream.video.coordinator.client_v1_rpc.QueryMembersResponse);
     */
    queryMembers(input: QueryMembersRequest, options?: RpcOptions): UnaryCall<QueryMembersRequest, QueryMembersResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryMembersRequest, QueryMembersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateMembers creates or updates members in a room.
     * If a member is not found, It will be created.
     *
     * @generated from protobuf rpc: UpdateRoomMembers(stream.video.coordinator.client_v1_rpc.UpdateRoomMembersRequest) returns (stream.video.coordinator.client_v1_rpc.UpdateRoomMembersResponse);
     */
    updateRoomMembers(input: UpdateRoomMembersRequest, options?: RpcOptions): UnaryCall<UpdateRoomMembersRequest, UpdateRoomMembersResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRoomMembersRequest, UpdateRoomMembersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteMembers deletes members from a room.
     *
     * @generated from protobuf rpc: DeleteRoomMembers(stream.video.coordinator.client_v1_rpc.DeleteRoomMembersRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteRoomMembersResponse);
     */
    deleteRoomMembers(input: DeleteRoomMembersRequest, options?: RpcOptions): UnaryCall<DeleteRoomMembersRequest, DeleteRoomMembersResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRoomMembersRequest, DeleteRoomMembersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartCall(stream.video.coordinator.client_v1_rpc.StartCallRequest) returns (stream.video.coordinator.client_v1_rpc.StartCallResponse);
     */
    startCall(input: StartCallRequest, options?: RpcOptions): UnaryCall<StartCallRequest, StartCallResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartCallRequest, StartCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EndCall(stream.video.coordinator.client_v1_rpc.EndCallRequest) returns (stream.video.coordinator.client_v1_rpc.EndCallResponse);
     */
    endCall(input: EndCallRequest, options?: RpcOptions): UnaryCall<EndCallRequest, EndCallResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<EndCallRequest, EndCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetCall retrieves the state for one call, the user calling this endpoint is created if missing
     *
     * @generated from protobuf rpc: GetCall(stream.video.coordinator.client_v1_rpc.GetCallRequest) returns (stream.video.coordinator.client_v1_rpc.GetCallResponse);
     */
    getCall(input: GetCallRequest, options?: RpcOptions): UnaryCall<GetCallRequest, GetCallResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCallRequest, GetCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: QueryCalls(stream.video.coordinator.client_v1_rpc.QueryCallsRequest) returns (stream.video.coordinator.client_v1_rpc.QueryCallsResponse);
     */
    queryCalls(input: QueryCallsRequest, options?: RpcOptions): UnaryCall<QueryCallsRequest, QueryCallsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryCallsRequest, QueryCallsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * JoinCall returns the call state and the list of edges that the user should be check for latency
     * this endpoint is meant to be used to prepare the information needed to call the SelectEdgeServer endpoint
     *
     * @generated from protobuf rpc: JoinCall(stream.video.coordinator.client_v1_rpc.JoinCallRequest) returns (stream.video.coordinator.client_v1_rpc.JoinCallResponse);
     */
    joinCall(input: JoinCallRequest, options?: RpcOptions): UnaryCall<JoinCallRequest, JoinCallResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinCallRequest, JoinCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SelectEdgeServer(stream.video.coordinator.client_v1_rpc.SelectEdgeServerRequest) returns (stream.video.coordinator.client_v1_rpc.SelectEdgeServerResponse);
     */
    selectEdgeServer(input: SelectEdgeServerRequest, options?: RpcOptions): UnaryCall<SelectEdgeServerRequest, SelectEdgeServerResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SelectEdgeServerRequest, SelectEdgeServerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateDevice(stream.video.coordinator.client_v1_rpc.CreateDeviceRequest) returns (stream.video.coordinator.client_v1_rpc.CreateDeviceResponse);
     */
    createDevice(input: CreateDeviceRequest, options?: RpcOptions): UnaryCall<CreateDeviceRequest, CreateDeviceResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDeviceRequest, CreateDeviceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteDevice(stream.video.coordinator.client_v1_rpc.DeleteDeviceRequest) returns (stream.video.coordinator.client_v1_rpc.DeleteDeviceResponse);
     */
    deleteDevice(input: DeleteDeviceRequest, options?: RpcOptions): UnaryCall<DeleteDeviceRequest, DeleteDeviceResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDeviceRequest, DeleteDeviceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: QueryDevices(stream.video.coordinator.client_v1_rpc.QueryDevicesRequest) returns (stream.video.coordinator.client_v1_rpc.QueryDevicesResponse);
     */
    queryDevices(input: QueryDevicesRequest, options?: RpcOptions): UnaryCall<QueryDevicesRequest, QueryDevicesResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryDevicesRequest, QueryDevicesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * add reaction should perhaps just be handled by chat
     *
     * @generated from protobuf rpc: SendEvent(stream.video.coordinator.client_v1_rpc.SendEventRequest) returns (stream.video.coordinator.client_v1_rpc.SendEventResponse);
     */
    sendEvent(input: SendEventRequest, options?: RpcOptions): UnaryCall<SendEventRequest, SendEventResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendEventRequest, SendEventResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendCustomEvent(stream.video.coordinator.client_v1_rpc.SendCustomEventRequest) returns (stream.video.coordinator.client_v1_rpc.SendCustomEventResponse);
     */
    sendCustomEvent(input: SendCustomEventRequest, options?: RpcOptions): UnaryCall<SendCustomEventRequest, SendCustomEventResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendCustomEventRequest, SendCustomEventResponse>("unary", this._transport, method, opt, input);
    }
    // room is a confusing name. better to call it breakout room
    // breakout rooms have their own audio/video track
    // breakout rooms have their own chat

    // *
    // TODO
    // rpc CreateBreakoutRoom(CreateBreakoutRoomRequest) returns (CreateBreakoutRoomResponse);
    // rpc JoinBreakoutRoom() returns ();
    // rpc LeaveBreakoutRoom() returns ();
    // rpc DeleteBreakoutRoom() returns ();

    /**
     * endpoint for storing stats (perhaps we should move this to the SFU layer though)
     *
     * @generated from protobuf rpc: ReportCallStats(stream.video.coordinator.client_v1_rpc.ReportCallStatsRequest) returns (stream.video.coordinator.client_v1_rpc.ReportCallStatsResponse);
     */
    reportCallStats(input: ReportCallStatsRequest, options?: RpcOptions): UnaryCall<ReportCallStatsRequest, ReportCallStatsResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReportCallStatsRequest, ReportCallStatsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCallStats(stream.video.coordinator.client_v1_rpc.GetCallStatsRequest) returns (stream.video.coordinator.client_v1_rpc.GetCallStatsResponse);
     */
    getCallStats(input: GetCallStatsRequest, options?: RpcOptions): UnaryCall<GetCallStatsRequest, GetCallStatsResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCallStatsRequest, GetCallStatsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * endpoint for reviewing/rating the quality of calls
     *
     * @generated from protobuf rpc: ReviewCall(stream.video.coordinator.client_v1_rpc.ReviewCallRequest) returns (stream.video.coordinator.client_v1_rpc.ReviewCallResponse);
     */
    reviewCall(input: ReviewCallRequest, options?: RpcOptions): UnaryCall<ReviewCallRequest, ReviewCallResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReviewCallRequest, ReviewCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * endpoint for users to report issues with a call
     *
     * @generated from protobuf rpc: ReportIssue(stream.video.coordinator.client_v1_rpc.ReportIssueRequest) returns (stream.video.coordinator.client_v1_rpc.ReportIssueResponse);
     */
    reportIssue(input: ReportIssueRequest, options?: RpcOptions): UnaryCall<ReportIssueRequest, ReportIssueResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReportIssueRequest, ReportIssueResponse>("unary", this._transport, method, opt, input);
    }
}
