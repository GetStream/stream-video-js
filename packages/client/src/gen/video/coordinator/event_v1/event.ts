/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/event_v1/event.proto" (package "stream.video.coordinator.event_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.RecordingStarted
 */
export interface RecordingStarted {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.RecordingStopped
 */
export interface RecordingStopped {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.UserUpdated
 */
export interface UserUpdated {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.BroadcastStarted
 */
export interface BroadcastStarted {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.BroadcastEnded
 */
export interface BroadcastEnded {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallMembersUpdated
 */
export interface CallMembersUpdated {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallMembersDeleted
 */
export interface CallMembersDeleted {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallCreated
 */
export interface CallCreated {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallUpdated
 */
export interface CallUpdated {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallStarted
 */
export interface CallStarted {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallEnded
 */
export interface CallEnded {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.event_v1.CallDeleted
 */
export interface CallDeleted {
    /**
     * @generated from protobuf field: string call_cid = 1;
     */
    callCid: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class RecordingStarted$Type extends MessageType<RecordingStarted> {
    constructor() {
        super("stream.video.coordinator.event_v1.RecordingStarted", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordingStarted>): RecordingStarted {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecordingStarted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordingStarted): RecordingStarted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordingStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.RecordingStarted
 */
export const RecordingStarted = new RecordingStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordingStopped$Type extends MessageType<RecordingStopped> {
    constructor() {
        super("stream.video.coordinator.event_v1.RecordingStopped", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordingStopped>): RecordingStopped {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecordingStopped>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordingStopped): RecordingStopped {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordingStopped, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.RecordingStopped
 */
export const RecordingStopped = new RecordingStopped$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserUpdated$Type extends MessageType<UserUpdated> {
    constructor() {
        super("stream.video.coordinator.event_v1.UserUpdated", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserUpdated>): UserUpdated {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserUpdated): UserUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.UserUpdated
 */
export const UserUpdated = new UserUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastStarted$Type extends MessageType<BroadcastStarted> {
    constructor() {
        super("stream.video.coordinator.event_v1.BroadcastStarted", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BroadcastStarted>): BroadcastStarted {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastStarted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastStarted): BroadcastStarted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.BroadcastStarted
 */
export const BroadcastStarted = new BroadcastStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastEnded$Type extends MessageType<BroadcastEnded> {
    constructor() {
        super("stream.video.coordinator.event_v1.BroadcastEnded", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BroadcastEnded>): BroadcastEnded {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastEnded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastEnded): BroadcastEnded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastEnded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.BroadcastEnded
 */
export const BroadcastEnded = new BroadcastEnded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallMembersUpdated$Type extends MessageType<CallMembersUpdated> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallMembersUpdated", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallMembersUpdated>): CallMembersUpdated {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallMembersUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallMembersUpdated): CallMembersUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallMembersUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallMembersUpdated
 */
export const CallMembersUpdated = new CallMembersUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallMembersDeleted$Type extends MessageType<CallMembersDeleted> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallMembersDeleted", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallMembersDeleted>): CallMembersDeleted {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallMembersDeleted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallMembersDeleted): CallMembersDeleted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallMembersDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallMembersDeleted
 */
export const CallMembersDeleted = new CallMembersDeleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallCreated$Type extends MessageType<CallCreated> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallCreated", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallCreated>): CallCreated {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallCreated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallCreated): CallCreated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallCreated
 */
export const CallCreated = new CallCreated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallUpdated$Type extends MessageType<CallUpdated> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallUpdated", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallUpdated>): CallUpdated {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallUpdated): CallUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallUpdated
 */
export const CallUpdated = new CallUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallStarted$Type extends MessageType<CallStarted> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallStarted", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallStarted>): CallStarted {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallStarted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallStarted): CallStarted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallStarted
 */
export const CallStarted = new CallStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallEnded$Type extends MessageType<CallEnded> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallEnded", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallEnded>): CallEnded {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallEnded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallEnded): CallEnded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallEnded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallEnded
 */
export const CallEnded = new CallEnded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallDeleted$Type extends MessageType<CallDeleted> {
    constructor() {
        super("stream.video.coordinator.event_v1.CallDeleted", [
            { no: 1, name: "call_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallDeleted>): CallDeleted {
        const message = { callCid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallDeleted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallDeleted): CallDeleted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_cid */ 1:
                    message.callCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_cid = 1; */
        if (message.callCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.event_v1.CallDeleted
 */
export const CallDeleted = new CallDeleted$Type();
