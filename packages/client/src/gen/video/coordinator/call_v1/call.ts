/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/call_v1/call.proto" (package "stream.video.coordinator.call_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TranscribeOptions } from "../feature_v1/feature";
import { Broadcast } from "../broadcast_v1/broadcast";
import { Struct } from "../../../google/protobuf/struct";
import { Participant } from "../participant_v1/participant";
import { Features } from "../feature_v1/feature";
import { Permissions } from "../permission_v1/permission";
/**
 * @generated from protobuf message stream.video.coordinator.call_v1.CallType
 */
export interface CallType {
    /**
     * The unique name for the call type.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The permissions set for this call type.
     *
     * @generated from protobuf field: map<string, stream.video.coordinator.permission_v1.Permissions> permissions = 2;
     */
    permissions: {
        [key: string]: Permissions;
    };
    /**
     * The features enabled by default for this type of calls.
     *
     * @generated from protobuf field: stream.video.coordinator.feature_v1.Features features = 3;
     */
    features?: Features;
    /**
     * @generated from protobuf field: string created_at = 4;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 5;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.call_v1.CallState
 */
export interface CallState {
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.participant_v1.Participant participants = 1;
     */
    participants: Participant[];
}
/**
 * @generated from protobuf message stream.video.coordinator.call_v1.Call
 */
export interface Call {
    /**
     * The call type.
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * The call id.
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * The id of the user that created this call.
     *
     * @generated from protobuf field: string created_by_user_id = 3;
     */
    createdByUserId: string;
    /**
     * The id of the current host for this call.
     *
     * @generated from protobuf field: string host_user_id = 4;
     */
    hostUserId: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct custom = 5;
     */
    custom?: Struct;
    /**
     * Call creation date as RFC3339 string.
     *
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * Call last update date as RFC3339 string.
     *
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
    /**
     * When recording is true, calls are recorded on S3.
     *
     * @generated from protobuf field: bool recording = 8;
     */
    recording: boolean;
    /**
     * Broadcast settings for this call.
     *
     * @generated from protobuf field: stream.video.coordinator.broadcast_v1.Broadcast broadcast = 9;
     */
    broadcast?: Broadcast;
    /**
     * Enable transcription by default.
     *
     * @generated from protobuf field: bool transcribe = 10;
     */
    transcribe: boolean;
    /**
     * @generated from protobuf field: stream.video.coordinator.feature_v1.TranscribeOptions transcribe_options = 11;
     */
    transcribeOptions?: TranscribeOptions;
}
// @generated message type with reflection information, may provide speed optimized methods
class CallType$Type extends MessageType<CallType> {
    constructor() {
        super("stream.video.coordinator.call_v1.CallType", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "permissions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Permissions } },
            { no: 3, name: "features", kind: "message", T: () => Features },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CallType>): CallType {
        const message = { name: "", permissions: {}, createdAt: "", updatedAt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallType): CallType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* map<string, stream.video.coordinator.permission_v1.Permissions> permissions */ 2:
                    this.binaryReadMap2(message.permissions, reader, options);
                    break;
                case /* stream.video.coordinator.feature_v1.Features features */ 3:
                    message.features = Features.internalBinaryRead(reader, reader.uint32(), options, message.features);
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 5:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CallType["permissions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CallType["permissions"] | undefined, val: CallType["permissions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Permissions.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.coordinator.call_v1.CallType.permissions");
            }
        }
        map[key ?? ""] = val ?? Permissions.create();
    }
    internalBinaryWrite(message: CallType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* map<string, stream.video.coordinator.permission_v1.Permissions> permissions = 2; */
        for (let k of Object.keys(message.permissions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Permissions.internalBinaryWrite(message.permissions[k], writer, options);
            writer.join().join();
        }
        /* stream.video.coordinator.feature_v1.Features features = 3; */
        if (message.features)
            Features.internalBinaryWrite(message.features, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.call_v1.CallType
 */
export const CallType = new CallType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallState$Type extends MessageType<CallState> {
    constructor() {
        super("stream.video.coordinator.call_v1.CallState", [
            { no: 1, name: "participants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Participant }
        ]);
    }
    create(value?: PartialMessage<CallState>): CallState {
        const message = { participants: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallState): CallState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.coordinator.participant_v1.Participant participants */ 1:
                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.coordinator.participant_v1.Participant participants = 1; */
        for (let i = 0; i < message.participants.length; i++)
            Participant.internalBinaryWrite(message.participants[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.call_v1.CallState
 */
export const CallState = new CallState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Call$Type extends MessageType<Call> {
    constructor() {
        super("stream.video.coordinator.call_v1.Call", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 3, name: "created_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 4, name: "host_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "custom", kind: "message", T: () => Struct },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 8, name: "recording", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "broadcast", kind: "message", T: () => Broadcast },
            { no: 10, name: "transcribe", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "transcribe_options", kind: "message", T: () => TranscribeOptions }
        ]);
    }
    create(value?: PartialMessage<Call>): Call {
        const message = { type: "", id: "", createdByUserId: "", hostUserId: "", createdAt: "", updatedAt: "", recording: false, transcribe: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Call>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Call): Call {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string created_by_user_id */ 3:
                    message.createdByUserId = reader.string();
                    break;
                case /* string host_user_id */ 4:
                    message.hostUserId = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 5:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                case /* bool recording */ 8:
                    message.recording = reader.bool();
                    break;
                case /* stream.video.coordinator.broadcast_v1.Broadcast broadcast */ 9:
                    message.broadcast = Broadcast.internalBinaryRead(reader, reader.uint32(), options, message.broadcast);
                    break;
                case /* bool transcribe */ 10:
                    message.transcribe = reader.bool();
                    break;
                case /* stream.video.coordinator.feature_v1.TranscribeOptions transcribe_options */ 11:
                    message.transcribeOptions = TranscribeOptions.internalBinaryRead(reader, reader.uint32(), options, message.transcribeOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Call, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string created_by_user_id = 3; */
        if (message.createdByUserId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdByUserId);
        /* string host_user_id = 4; */
        if (message.hostUserId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hostUserId);
        /* google.protobuf.Struct custom = 5; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        /* bool recording = 8; */
        if (message.recording !== false)
            writer.tag(8, WireType.Varint).bool(message.recording);
        /* stream.video.coordinator.broadcast_v1.Broadcast broadcast = 9; */
        if (message.broadcast)
            Broadcast.internalBinaryWrite(message.broadcast, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool transcribe = 10; */
        if (message.transcribe !== false)
            writer.tag(10, WireType.Varint).bool(message.transcribe);
        /* stream.video.coordinator.feature_v1.TranscribeOptions transcribe_options = 11; */
        if (message.transcribeOptions)
            TranscribeOptions.internalBinaryWrite(message.transcribeOptions, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.call_v1.Call
 */
export const Call = new Call$Type();
