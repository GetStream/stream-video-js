/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/stat_v1/stat.proto" (package "stream.video.coordinator.stat_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message stream.video.coordinator.stat_v1.CallStatEvent
 */
export interface CallStatEvent {
    /**
     * @generated from protobuf field: stream.video.coordinator.stat_v1.CallStatEventType type = 1;
     */
    type: CallStatEventType;
    /**
     * Call creation date as RFC3339 string.
     *
     * @generated from protobuf field: string time = 2;
     */
    time: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.stat_v1.ParticipantCallStatEvent
 */
export interface ParticipantCallStatEvent {
    /**
     * @generated from protobuf field: string participant_id = 1;
     */
    participantId: string;
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines = 2;
     */
    callTimelines: CallStatEvent[];
}
/**
 * @generated from protobuf message stream.video.coordinator.stat_v1.CallStats
 */
export interface CallStats {
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines = 1;
     */
    callTimelines: CallStatEvent[];
    /**
     * @generated from protobuf field: repeated stream.video.coordinator.stat_v1.ParticipantCallStatEvent participant_timelines = 2;
     */
    participantTimelines: ParticipantCallStatEvent[];
}
/**
 * @generated from protobuf enum stream.video.coordinator.stat_v1.CallStatEventType
 */
export enum CallStatEventType {
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_AUDIO_FROZEN_UNSPECIFIED = 0;
     */
    AUDIO_FROZEN_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_AUDIO_DELAY = 1;
     */
    AUDIO_DELAY = 1,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_FROZEN = 2;
     */
    VIDEO_FROZEN = 2,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_DELAY = 3;
     */
    VIDEO_DELAY = 3,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_NOT_OPTIMAL = 4;
     */
    VIDEO_NOT_OPTIMAL = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class CallStatEvent$Type extends MessageType<CallStatEvent> {
    constructor() {
        super("stream.video.coordinator.stat_v1.CallStatEvent", [
            { no: 1, name: "type", kind: "enum", T: () => ["stream.video.coordinator.stat_v1.CallStatEventType", CallStatEventType, "CALL_STAT_EVENT_TYPE_"] },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<CallStatEvent>): CallStatEvent {
        const message = { type: 0, time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallStatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallStatEvent): CallStatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.coordinator.stat_v1.CallStatEventType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallStatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.coordinator.stat_v1.CallStatEventType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.stat_v1.CallStatEvent
 */
export const CallStatEvent = new CallStatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantCallStatEvent$Type extends MessageType<ParticipantCallStatEvent> {
    constructor() {
        super("stream.video.coordinator.stat_v1.ParticipantCallStatEvent", [
            { no: 1, name: "participant_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallStatEvent }
        ]);
    }
    create(value?: PartialMessage<ParticipantCallStatEvent>): ParticipantCallStatEvent {
        const message = { participantId: "", callTimelines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantCallStatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantCallStatEvent): ParticipantCallStatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string participant_id */ 1:
                    message.participantId = reader.string();
                    break;
                case /* repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines */ 2:
                    message.callTimelines.push(CallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantCallStatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string participant_id = 1; */
        if (message.participantId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.participantId);
        /* repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines = 2; */
        for (let i = 0; i < message.callTimelines.length; i++)
            CallStatEvent.internalBinaryWrite(message.callTimelines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.stat_v1.ParticipantCallStatEvent
 */
export const ParticipantCallStatEvent = new ParticipantCallStatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallStats$Type extends MessageType<CallStats> {
    constructor() {
        super("stream.video.coordinator.stat_v1.CallStats", [
            { no: 1, name: "call_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallStatEvent },
            { no: 2, name: "participant_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ParticipantCallStatEvent }
        ]);
    }
    create(value?: PartialMessage<CallStats>): CallStats {
        const message = { callTimelines: [], participantTimelines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallStats): CallStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines */ 1:
                    message.callTimelines.push(CallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stream.video.coordinator.stat_v1.ParticipantCallStatEvent participant_timelines */ 2:
                    message.participantTimelines.push(ParticipantCallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.coordinator.stat_v1.CallStatEvent call_timelines = 1; */
        for (let i = 0; i < message.callTimelines.length; i++)
            CallStatEvent.internalBinaryWrite(message.callTimelines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.coordinator.stat_v1.ParticipantCallStatEvent participant_timelines = 2; */
        for (let i = 0; i < message.participantTimelines.length; i++)
            ParticipantCallStatEvent.internalBinaryWrite(message.participantTimelines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.stat_v1.CallStats
 */
export const CallStats = new CallStats$Type();
