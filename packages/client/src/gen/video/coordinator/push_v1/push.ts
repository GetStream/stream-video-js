/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,client_generic,server_none,eslint_disable
// @generated from protobuf file "video/coordinator/push_v1/push.proto" (package "stream.video.coordinator.push_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * Keep in sync with stream.config.push.PushProvider
 *
 * @generated from protobuf message stream.video.coordinator.push_v1.PushProvider
 */
export interface PushProvider {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool disabled = 2;
     */
    disabled: boolean;
    /**
     * @generated from protobuf field: string disabled_reason = 3;
     */
    disabledReason: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 5;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf oneof: credentials
     */
    credentials: {
        oneofKind: "apn";
        /**
         * @generated from protobuf field: stream.video.coordinator.push_v1.ApnCredentials apn = 6;
         */
        apn: ApnCredentials;
    } | {
        oneofKind: "firebase";
        /**
         * @generated from protobuf field: stream.video.coordinator.push_v1.FirebaseCredentials firebase = 7;
         */
        firebase: FirebaseCredentials;
    } | {
        oneofKind: "huawei";
        /**
         * @generated from protobuf field: stream.video.coordinator.push_v1.HuaweiCredentials huawei = 8;
         */
        huawei: HuaweiCredentials;
    } | {
        oneofKind: "xiaomi";
        /**
         * @generated from protobuf field: stream.video.coordinator.push_v1.XiaomiCredentials xiaomi = 9;
         */
        xiaomi: XiaomiCredentials;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.coordinator.push_v1.ApnCredentials
 */
export interface ApnCredentials {
    /**
     * @generated from protobuf field: bytes certificate_p12 = 1;
     */
    certificateP12: Uint8Array;
    /**
     * @generated from protobuf field: string topic = 2;
     */
    topic: string;
    /**
     * @generated from protobuf field: string team_id = 3;
     */
    teamId: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.push_v1.FirebaseCredentials
 */
export interface FirebaseCredentials {
    /**
     * @generated from protobuf field: string credentials = 1;
     */
    credentials: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.push_v1.HuaweiCredentials
 */
export interface HuaweiCredentials {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string secret = 2;
     */
    secret: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.push_v1.XiaomiCredentials
 */
export interface XiaomiCredentials {
    /**
     * @generated from protobuf field: string package_name = 1;
     */
    packageName: string;
    /**
     * @generated from protobuf field: string secret = 2;
     */
    secret: string;
}
/**
 * @generated from protobuf message stream.video.coordinator.push_v1.Device
 */
export interface Device {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: bool disabled = 3;
     */
    disabled: boolean;
    /**
     * @generated from protobuf field: string disabled_reason = 4;
     */
    disabledReason: string;
    /**
     * @generated from protobuf field: string push_provider_name = 5;
     */
    pushProviderName: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;
     */
    updatedAt?: Timestamp;
}
/**
 * An object that is used in requests to create or update a device
 *
 * @generated from protobuf message stream.video.coordinator.push_v1.DeviceInput
 */
export interface DeviceInput {
    /**
     * Unique device ID, specific to a provider
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Push provider ID, as configured in application push notification settings
     * Refers to a set of credentials and templates of one of the supported push providers
     *
     * @generated from protobuf field: string push_provider_id = 2;
     */
    pushProviderId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PushProvider$Type extends MessageType<PushProvider> {
    constructor() {
        super("stream.video.coordinator.push_v1.PushProvider", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "disabled_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "apn", kind: "message", oneof: "credentials", T: () => ApnCredentials },
            { no: 7, name: "firebase", kind: "message", oneof: "credentials", T: () => FirebaseCredentials },
            { no: 8, name: "huawei", kind: "message", oneof: "credentials", T: () => HuaweiCredentials },
            { no: 9, name: "xiaomi", kind: "message", oneof: "credentials", T: () => XiaomiCredentials }
        ]);
    }
    create(value?: PartialMessage<PushProvider>): PushProvider {
        const message = { id: "", disabled: false, disabledReason: "", credentials: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PushProvider>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushProvider): PushProvider {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool disabled */ 2:
                    message.disabled = reader.bool();
                    break;
                case /* string disabled_reason */ 3:
                    message.disabledReason = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 4:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 5:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* stream.video.coordinator.push_v1.ApnCredentials apn */ 6:
                    message.credentials = {
                        oneofKind: "apn",
                        apn: ApnCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentials as any).apn)
                    };
                    break;
                case /* stream.video.coordinator.push_v1.FirebaseCredentials firebase */ 7:
                    message.credentials = {
                        oneofKind: "firebase",
                        firebase: FirebaseCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentials as any).firebase)
                    };
                    break;
                case /* stream.video.coordinator.push_v1.HuaweiCredentials huawei */ 8:
                    message.credentials = {
                        oneofKind: "huawei",
                        huawei: HuaweiCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentials as any).huawei)
                    };
                    break;
                case /* stream.video.coordinator.push_v1.XiaomiCredentials xiaomi */ 9:
                    message.credentials = {
                        oneofKind: "xiaomi",
                        xiaomi: XiaomiCredentials.internalBinaryRead(reader, reader.uint32(), options, (message.credentials as any).xiaomi)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushProvider, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool disabled = 2; */
        if (message.disabled !== false)
            writer.tag(2, WireType.Varint).bool(message.disabled);
        /* string disabled_reason = 3; */
        if (message.disabledReason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.disabledReason);
        /* google.protobuf.Timestamp created_at = 4; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 5; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.push_v1.ApnCredentials apn = 6; */
        if (message.credentials.oneofKind === "apn")
            ApnCredentials.internalBinaryWrite(message.credentials.apn, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.push_v1.FirebaseCredentials firebase = 7; */
        if (message.credentials.oneofKind === "firebase")
            FirebaseCredentials.internalBinaryWrite(message.credentials.firebase, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.push_v1.HuaweiCredentials huawei = 8; */
        if (message.credentials.oneofKind === "huawei")
            HuaweiCredentials.internalBinaryWrite(message.credentials.huawei, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.coordinator.push_v1.XiaomiCredentials xiaomi = 9; */
        if (message.credentials.oneofKind === "xiaomi")
            XiaomiCredentials.internalBinaryWrite(message.credentials.xiaomi, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.PushProvider
 */
export const PushProvider = new PushProvider$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApnCredentials$Type extends MessageType<ApnCredentials> {
    constructor() {
        super("stream.video.coordinator.push_v1.ApnCredentials", [
            { no: 1, name: "certificate_p12", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApnCredentials>): ApnCredentials {
        const message = { certificateP12: new Uint8Array(0), topic: "", teamId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ApnCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApnCredentials): ApnCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes certificate_p12 */ 1:
                    message.certificateP12 = reader.bytes();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                case /* string team_id */ 3:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApnCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes certificate_p12 = 1; */
        if (message.certificateP12.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.certificateP12);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        /* string team_id = 3; */
        if (message.teamId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.ApnCredentials
 */
export const ApnCredentials = new ApnCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FirebaseCredentials$Type extends MessageType<FirebaseCredentials> {
    constructor() {
        super("stream.video.coordinator.push_v1.FirebaseCredentials", [
            { no: 1, name: "credentials", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FirebaseCredentials>): FirebaseCredentials {
        const message = { credentials: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FirebaseCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FirebaseCredentials): FirebaseCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string credentials */ 1:
                    message.credentials = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FirebaseCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string credentials = 1; */
        if (message.credentials !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.credentials);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.FirebaseCredentials
 */
export const FirebaseCredentials = new FirebaseCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuaweiCredentials$Type extends MessageType<HuaweiCredentials> {
    constructor() {
        super("stream.video.coordinator.push_v1.HuaweiCredentials", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HuaweiCredentials>): HuaweiCredentials {
        const message = { id: "", secret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuaweiCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuaweiCredentials): HuaweiCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string secret */ 2:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuaweiCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string secret = 2; */
        if (message.secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.HuaweiCredentials
 */
export const HuaweiCredentials = new HuaweiCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class XiaomiCredentials$Type extends MessageType<XiaomiCredentials> {
    constructor() {
        super("stream.video.coordinator.push_v1.XiaomiCredentials", [
            { no: 1, name: "package_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<XiaomiCredentials>): XiaomiCredentials {
        const message = { packageName: "", secret: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<XiaomiCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: XiaomiCredentials): XiaomiCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string package_name */ 1:
                    message.packageName = reader.string();
                    break;
                case /* string secret */ 2:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: XiaomiCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string package_name = 1; */
        if (message.packageName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packageName);
        /* string secret = 2; */
        if (message.secret !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.XiaomiCredentials
 */
export const XiaomiCredentials = new XiaomiCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Device$Type extends MessageType<Device> {
    constructor() {
        super("stream.video.coordinator.push_v1.Device", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "disabled_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "push_provider_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Device>): Device {
        const message = { userId: "", id: "", disabled: false, disabledReason: "", pushProviderName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Device>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Device): Device {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* bool disabled */ 3:
                    message.disabled = reader.bool();
                    break;
                case /* string disabled_reason */ 4:
                    message.disabledReason = reader.string();
                    break;
                case /* string push_provider_name */ 5:
                    message.pushProviderName = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Device, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* bool disabled = 3; */
        if (message.disabled !== false)
            writer.tag(3, WireType.Varint).bool(message.disabled);
        /* string disabled_reason = 4; */
        if (message.disabledReason !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.disabledReason);
        /* string push_provider_name = 5; */
        if (message.pushProviderName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.pushProviderName);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.Device
 */
export const Device = new Device$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceInput$Type extends MessageType<DeviceInput> {
    constructor() {
        super("stream.video.coordinator.push_v1.DeviceInput", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "push_provider_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceInput>): DeviceInput {
        const message = { id: "", pushProviderId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceInput): DeviceInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string push_provider_id */ 2:
                    message.pushProviderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string push_provider_id = 2; */
        if (message.pushProviderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pushProviderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.coordinator.push_v1.DeviceInput
 */
export const DeviceInput = new DeviceInput$Type();
