/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "edge_v1/edge.proto" (package "stream.video.edge_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Edges are where we deploy video servers
 *
 * @generated from protobuf message stream.video.edge_v1.Edge
 */
export interface Edge {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string latency_url = 2;
     */
    latencyUrl: string;
}
// TODO: to discuss. do we keep a log per call of
// - people joining
// - reactions
// - etc?
// - maybe it only makes sense when you transcribe the call

/**
 * Edges are where we deploy video servers
 *
 * @generated from protobuf message stream.video.edge_v1.EdgeServer
 */
export interface EdgeServer {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Returns information about the server location
 *
 * @generated from protobuf message stream.video.edge_v1.EdgeServer.Coordinates
 */
export interface EdgeServer_Coordinates {
    /**
     * @generated from protobuf field: float lat = 1;
     */
    lat: number;
    /**
     * @generated from protobuf field: float long = 2;
     */
    long: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Edge$Type extends MessageType<Edge> {
    constructor() {
        super("stream.video.edge_v1.Edge", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 2, name: "latency_url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<Edge>): Edge {
        const message = { name: "", latencyUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Edge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Edge): Edge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string latency_url */ 2:
                    message.latencyUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Edge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string latency_url = 2; */
        if (message.latencyUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.latencyUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.edge_v1.Edge
 */
export const Edge = new Edge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EdgeServer$Type extends MessageType<EdgeServer> {
    constructor() {
        super("stream.video.edge_v1.EdgeServer", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EdgeServer>): EdgeServer {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EdgeServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EdgeServer): EdgeServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EdgeServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.edge_v1.EdgeServer
 */
export const EdgeServer = new EdgeServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EdgeServer_Coordinates$Type extends MessageType<EdgeServer_Coordinates> {
    constructor() {
        super("stream.video.edge_v1.EdgeServer.Coordinates", [
            { no: 1, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "long", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<EdgeServer_Coordinates>): EdgeServer_Coordinates {
        const message = { lat: 0, long: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EdgeServer_Coordinates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EdgeServer_Coordinates): EdgeServer_Coordinates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float lat */ 1:
                    message.lat = reader.float();
                    break;
                case /* float long */ 2:
                    message.long = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EdgeServer_Coordinates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float lat = 1; */
        if (message.lat !== 0)
            writer.tag(1, WireType.Bit32).float(message.lat);
        /* float long = 2; */
        if (message.long !== 0)
            writer.tag(2, WireType.Bit32).float(message.long);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.edge_v1.EdgeServer.Coordinates
 */
export const EdgeServer_Coordinates = new EdgeServer_Coordinates$Type();
