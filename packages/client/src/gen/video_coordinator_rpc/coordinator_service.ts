/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "video_coordinator_rpc/coordinator_service.proto" (package "stream.video", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Broadcast } from "../video_models/models";
import { Edge } from "../video_models/models";
import { User } from "../video_models/models";
import { Device } from "../video_models/models";
import { EdgeServer } from "../video_models/models";
import { Latency } from "../video_models/models";
import { TranscribeOptions } from "../video_models/models";
import { RTMPOptions } from "../video_models/models";
import { BoolValue } from "../google/protobuf/wrappers";
import { Struct } from "../google/protobuf/struct";
import { CallState } from "../video_models/models";
import { Call } from "../video_models/models";
import { Features } from "../video_models/models";
import { Permissions } from "../video_models/models";
import { CallType } from "../video_models/models";
import { ApplicationSettings } from "../video_models/models";
import { SqsSettings } from "../video_models/models";
import { StringValue } from "../google/protobuf/wrappers";
import { PushProvider } from "../video_models/models";
/**
 * @generated from protobuf message stream.video.AddPushProviderRequest
 */
export interface AddPushProviderRequest {
    /**
     * @generated from protobuf field: stream.video.PushProvider settings = 1;
     */
    settings?: PushProvider;
}
/**
 * @generated from protobuf message stream.video.UpdatePushProviderRequest
 */
export interface UpdatePushProviderRequest {
    /**
     * @generated from protobuf field: stream.video.PushProvider settings = 1;
     */
    settings?: PushProvider;
}
/**
 * @generated from protobuf message stream.video.DeletePushProviderRequest
 */
export interface DeletePushProviderRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message stream.video.UpdateAppSettingsRequest
 */
export interface UpdateAppSettingsRequest {
    /**
     * the webhook URL
     *
     * @generated from protobuf field: google.protobuf.StringValue webhook_url = 1;
     */
    webhookUrl?: StringValue;
    /**
     * sqs settings
     *
     * @generated from protobuf field: stream.video.SqsSettings sqs_settings = 2;
     */
    sqsSettings?: SqsSettings;
}
/**
 * @generated from protobuf message stream.video.AppSettingsResponse
 */
export interface AppSettingsResponse {
    /**
     * @generated from protobuf field: stream.video.ApplicationSettings settings = 1;
     */
    settings?: ApplicationSettings;
}
/**
 * @generated from protobuf message stream.video.DeleteRoleRequest
 */
export interface DeleteRoleRequest {
    /**
     * the name of the role
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message stream.video.DeleteRoleResponse
 */
export interface DeleteRoleResponse {
}
/**
 * @generated from protobuf message stream.video.CreateRoleRequest
 */
export interface CreateRoleRequest {
    /**
     * the unique name for the role
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message stream.video.CreateRoleResponse
 */
export interface CreateRoleResponse {
}
/**
 * @generated from protobuf message stream.video.DeleteCallTypeRequest
 */
export interface DeleteCallTypeRequest {
    /**
     * the name of the call type
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message stream.video.DeleteCallTypeResponse
 */
export interface DeleteCallTypeResponse {
}
/**
 * @generated from protobuf message stream.video.CallTypeResponse
 */
export interface CallTypeResponse {
    /**
     * the call type updated
     *
     * @generated from protobuf field: stream.video.CallType call_type = 1;
     */
    callType?: CallType;
}
/**
 * @generated from protobuf message stream.video.CallTypeRequestInput
 */
export interface CallTypeRequestInput {
    /**
     * the name of the call type, must be unique for the application
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * the permission granted to users by their role
     *
     * @generated from protobuf field: map<string, stream.video.Permissions> grants = 2;
     */
    grants: {
        [key: string]: Permissions;
    };
    /**
     * the feature settings
     *
     * @generated from protobuf field: stream.video.Features features = 3;
     */
    features?: Features;
}
/**
 * @generated from protobuf message stream.video.ListPermissionsRequest
 */
export interface ListPermissionsRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
}
/**
 * @generated from protobuf message stream.video.ListPermissionsResponse
 */
export interface ListPermissionsResponse {
    /**
     * the set of permissions by user role
     *
     * @generated from protobuf field: map<string, stream.video.Permissions> permissions = 1;
     */
    permissions: {
        [key: string]: Permissions;
    };
}
/**
 * @generated from protobuf message stream.video.GetCallRequest
 */
export interface GetCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message stream.video.GetCallResponse
 */
export interface GetCallResponse {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.CallState call_state = 2;
     */
    callState?: CallState;
}
/**
 * @generated from protobuf message stream.video.CreateOrUpdateCallsRequest
 */
export interface CreateOrUpdateCallsRequest {
    /**
     * @generated from protobuf field: repeated stream.video.CreateCallRequest calls = 1;
     */
    calls: CreateCallRequest[];
}
/**
 * @generated from protobuf message stream.video.CreateOrUpdateCallsResponse
 */
export interface CreateOrUpdateCallsResponse {
    /**
     * @generated from protobuf field: repeated stream.video.Call calls = 1;
     */
    calls: Call[];
}
/**
 * @generated from protobuf message stream.video.CreateCallRequest
 */
export interface CreateCallRequest {
    /**
     * the call type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string; // required
    /**
     * the call id, if not provided a unique value will be generated based on UUID v4
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string; // required
    /**
     * call custom data
     *
     * @generated from protobuf field: google.protobuf.Struct custom = 3;
     */
    custom?: Struct;
    /**
     * the list of participant ids
     *
     * @generated from protobuf field: repeated string participant_ids = 4;
     */
    participantIds: string[];
    /**
     * HLS broadcast, overrides the default call type setting if provided
     *
     * @generated from protobuf field: google.protobuf.BoolValue hls_broadcast = 6;
     */
    hlsBroadcast?: BoolValue;
    /**
     * request video to be forwarded to a list of RTMP servers
     *
     * @generated from protobuf field: stream.video.RTMPOptions rtmp = 7;
     */
    rtmp?: RTMPOptions;
    /**
     * transcription, overrides the default call type setting if provided
     *
     * @generated from protobuf field: google.protobuf.BoolValue transcribe = 8;
     */
    transcribe?: BoolValue;
    /**
     * the transcription options for this call, only relevant if transcribe is enabled
     *
     * @generated from protobuf field: stream.video.TranscribeOptions transcribe_options = 9;
     */
    transcribeOptions?: TranscribeOptions;
    /**
     * the recording option, overrides the default call type setting if provided
     *
     * @generated from protobuf field: google.protobuf.BoolValue recording = 10;
     */
    recording?: BoolValue;
    /**
     * the ring option, overrides the default call type setting if provided
     *
     * @generated from protobuf field: google.protobuf.BoolValue notify = 11;
     */
    notify?: BoolValue;
}
/**
 * @generated from protobuf message stream.video.CreateCallResponse
 */
export interface CreateCallResponse {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.UpdateCallRequest
 */
export interface UpdateCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: bytes json_encoded_custom_data = 3;
     */
    jsonEncodedCustomData: Uint8Array; // TODO: additional options and overrides to default settings
}
/**
 * @generated from protobuf message stream.video.UpdateCallResponse
 */
export interface UpdateCallResponse {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
}
/**
 * @generated from protobuf message stream.video.DeleteCallRequest
 */
export interface DeleteCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message stream.video.DeleteCallResponse
 */
export interface DeleteCallResponse {
}
/**
 * @generated from protobuf message stream.video.SelectEdgeServerRequest
 */
export interface SelectEdgeServerRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * @generated from protobuf field: map<string, stream.video.Latency> latency_by_edge = 3;
     */
    latencyByEdge: {
        [key: string]: Latency;
    };
}
/**
 * @generated from protobuf message stream.video.SelectEdgeServerResponse
 */
export interface SelectEdgeServerResponse {
    /**
     * the edge server hosting the video call
     *
     * @generated from protobuf field: stream.video.EdgeServer edge_server = 1;
     */
    edgeServer?: EdgeServer;
    /**
     * the auth token needed to authenticate to the edge server
     *
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message stream.video.AddDeviceRequest
 */
export interface AddDeviceRequest {
    /**
     * the device id to register
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * the name of the push notification provider (eg. apn-production)
     *
     * @generated from protobuf field: string push_provider_name = 2;
     */
    pushProviderName: string;
    /**
     * the id of the user the device is registered to, only server-side requests can provide this
     *
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.AddDeviceResponse
 */
export interface AddDeviceResponse {
    /**
     * @generated from protobuf field: stream.video.Device device = 1;
     */
    device?: Device;
}
/**
 * @generated from protobuf message stream.video.RemoveDeviceRequest
 */
export interface RemoveDeviceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.RemoveDeviceResponse
 */
export interface RemoveDeviceResponse {
}
/**
 * @generated from protobuf message stream.video.ListDevicesRequest
 */
export interface ListDevicesRequest {
    /**
     * the id of the user, only server-side requests can provide this
     *
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message stream.video.ListDevicesResponse
 */
export interface ListDevicesResponse {
    /**
     * @generated from protobuf field: repeated stream.video.Device devices = 1;
     */
    devices: Device[];
}
/**
 * @generated from protobuf message stream.video.CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated string teams = 2;
     */
    teams: string[];
    /**
     * @generated from protobuf field: string role = 3;
     */
    role: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct custom = 4;
     */
    custom?: Struct;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string image_url = 6;
     */
    imageUrl: string;
}
/**
 * CreateOrUpdateUsersRequest runs a partial update or create on the list of users
 * specify replace = true to do a hard update instead of partial update
 *
 * @generated from protobuf message stream.video.CreateOrUpdateUsersRequest
 */
export interface CreateOrUpdateUsersRequest {
    /**
     * @generated from protobuf field: repeated stream.video.CreateUserRequest users = 1;
     */
    users: CreateUserRequest[];
    /**
     * @generated from protobuf field: bool full_update = 2;
     */
    fullUpdate: boolean; // full update (defaults to false and does a partial update)
}
/**
 * @generated from protobuf message stream.video.CreateOrUpdateUsersResponse
 */
export interface CreateOrUpdateUsersResponse {
    /**
     * @generated from protobuf field: repeated stream.video.User users = 1;
     */
    users: User[];
}
/**
 * @generated from protobuf message stream.video.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * TODO: do we support both soft and hard delete
 *
 * @generated from protobuf message stream.video.ExportUserRequest
 */
export interface ExportUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * TODO: talk about what data we should export on the GDPR endpoints for a user
 *
 * @generated from protobuf message stream.video.ExportUserResponse
 */
export interface ExportUserResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message stream.video.DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message stream.video.CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * @generated from protobuf field: stream.video.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message stream.video.SendCustomEventRequest
 */
export interface SendCustomEventRequest {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message stream.video.SendCustomEventResponse
 */
export interface SendCustomEventResponse {
}
/**
 * @generated from protobuf message stream.video.JoinCallRequest
 */
export interface JoinCallRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message stream.video.UserCapability
 */
export interface UserCapability {
    /**
     * @generated from protobuf field: string action = 1;
     */
    action: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * @generated from protobuf message stream.video.JoinCallResponse
 */
export interface JoinCallResponse {
    /**
     * @generated from protobuf field: stream.video.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: stream.video.Call call = 2;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.CallState call_state = 3;
     */
    callState?: CallState;
    /**
     * @generated from protobuf field: repeated stream.video.Edge edges = 4;
     */
    edges: Edge[];
    /**
     * @generated from protobuf field: repeated stream.video.UserCapability own_capabilities = 5;
     */
    ownCapabilities: UserCapability[];
}
/**
 * @generated from protobuf message stream.video.LeaveCallRequest
 */
export interface LeaveCallRequest {
}
/**
 * @generated from protobuf message stream.video.LeaveCallResponse
 */
export interface LeaveCallResponse {
}
/**
 * @generated from protobuf message stream.video.EndCallRequest
 */
export interface EndCallRequest {
}
/**
 * @generated from protobuf message stream.video.EndCallResponse
 */
export interface EndCallResponse {
}
/**
 * @generated from protobuf message stream.video.StartBroadcastRequest
 */
export interface StartBroadcastRequest {
    /**
     * call id and type
     *
     * @generated from protobuf field: string call_id = 1;
     */
    callId: string;
    /**
     * @generated from protobuf field: string call_type = 2;
     */
    callType: string;
    /**
     * toggles HLS broadcasting on/off
     *
     * @generated from protobuf field: bool hls_broadcast = 3;
     */
    hlsBroadcast: boolean;
    /**
     * enables rtmp broadcasting
     *
     * @generated from protobuf field: stream.video.RTMPOptions rtmp = 5;
     */
    rtmp?: RTMPOptions;
}
/**
 * @generated from protobuf message stream.video.StartBroadcastResponse
 */
export interface StartBroadcastResponse {
    /**
     * @generated from protobuf field: stream.video.Broadcast broadcast = 1;
     */
    broadcast?: Broadcast;
}
/**
 * @generated from protobuf message stream.video.StopBroadcastRequest
 */
export interface StopBroadcastRequest {
}
/**
 * @generated from protobuf message stream.video.StopBroadcastResponse
 */
export interface StopBroadcastResponse {
}
/**
 * TODO: research what options we need here
 *
 * @generated from protobuf message stream.video.TranscribeCallRequest
 */
export interface TranscribeCallRequest {
}
/**
 * @generated from protobuf message stream.video.TranscribeCallResponse
 */
export interface TranscribeCallResponse {
}
/**
 * @generated from protobuf message stream.video.StopTranscribeCallRequest
 */
export interface StopTranscribeCallRequest {
}
/**
 * @generated from protobuf message stream.video.StopTranscribeCallResponse
 */
export interface StopTranscribeCallResponse {
}
/**
 * @generated from protobuf message stream.video.StoreLatencyRequest
 */
export interface StoreLatencyRequest {
}
/**
 * @generated from protobuf message stream.video.StoreLatencyResponse
 */
export interface StoreLatencyResponse {
}
/**
 * @generated from protobuf message stream.video.StartRecordingRequest
 */
export interface StartRecordingRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
}
/**
 * @generated from protobuf message stream.video.ReportCallStatsRequest
 */
export interface ReportCallStatsRequest {
    /**
     * The call type
     *
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * The call id
     *
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * A WebRTC Stats report, as defined in https://www.w3.org/TR/webrtc/#dom-rtcstatsreport
     *
     * @generated from protobuf field: google.protobuf.Struct stats = 3;
     */
    stats?: Struct;
}
/**
 * @generated from protobuf message stream.video.CallStatEvent
 */
export interface CallStatEvent {
    /**
     * @generated from protobuf field: stream.video.CallStatEventType type = 1;
     */
    type: CallStatEventType;
    /**
     * call creation date as RFC3339 string
     *
     * @generated from protobuf field: string time = 2;
     */
    time: string;
}
/**
 * @generated from protobuf message stream.video.ReportIssueRequest
 */
export interface ReportIssueRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * optional description
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct custom = 4;
     */
    custom?: Struct;
}
/**
 * @generated from protobuf message stream.video.ReviewCallRequest
 */
export interface ReviewCallRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * rating between 0 and 5 stars
     *
     * @generated from protobuf field: float stars = 3;
     */
    stars: number;
    /**
     * optional description
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * optional custom data
     *
     * @generated from protobuf field: google.protobuf.Struct custom = 5;
     */
    custom?: Struct;
}
/**
 * @generated from protobuf message stream.video.ReviewCallResponse
 */
export interface ReviewCallResponse {
}
/**
 * @generated from protobuf message stream.video.ReportIssueResponse
 */
export interface ReportIssueResponse {
}
/**
 * @generated from protobuf message stream.video.ParticipantCallStatEvent
 */
export interface ParticipantCallStatEvent {
    /**
     * @generated from protobuf field: string participant_id = 1;
     */
    participantId: string;
    /**
     * @generated from protobuf field: repeated stream.video.CallStatEvent call_timelines = 2;
     */
    callTimelines: CallStatEvent[];
}
/**
 * @generated from protobuf message stream.video.GetCallStatsRequest
 */
export interface GetCallStatsRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
}
/**
 * @generated from protobuf message stream.video.CallStats
 */
export interface CallStats {
    /**
     * @generated from protobuf field: repeated stream.video.CallStatEvent call_timelines = 1;
     */
    callTimelines: CallStatEvent[];
    /**
     * @generated from protobuf field: repeated stream.video.ParticipantCallStatEvent participant_timelines = 2;
     */
    participantTimelines: ParticipantCallStatEvent[];
}
/**
 * @generated from protobuf message stream.video.GetCallStatsResponse
 */
export interface GetCallStatsResponse {
    /**
     * @generated from protobuf field: stream.video.Call call = 1;
     */
    call?: Call;
    /**
     * @generated from protobuf field: stream.video.CallStats call_stats = 2;
     */
    callStats?: CallStats;
}
/**
 * @generated from protobuf message stream.video.ReportCallStatsResponse
 */
export interface ReportCallStatsResponse {
}
/**
 * @generated from protobuf message stream.video.StartRecordingResponse
 */
export interface StartRecordingResponse {
}
/**
 * @generated from protobuf message stream.video.StopRecordingRequest
 */
export interface StopRecordingRequest {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
}
/**
 * @generated from protobuf message stream.video.StopRecordingResponse
 */
export interface StopRecordingResponse {
    /**
     * @generated from protobuf field: string s3_file_url = 1;
     */
    s3FileUrl: string;
}
/**
 * TODO: how do we do filtering and pagination with proto?
 * here we need to be able to filter, sort and limit by
 * call id, call custom attribute, call creation time, call including a user, call by type
 *
 * @generated from protobuf message stream.video.GetRecordingsRequest
 */
export interface GetRecordingsRequest {
}
/**
 * @generated from protobuf message stream.video.GetRecordingsResponse
 */
export interface GetRecordingsResponse {
    /**
     * @generated from protobuf field: repeated stream.video.GetRecordingsResponse.Recording recordings = 1;
     */
    recordings: GetRecordingsResponse_Recording[];
}
/**
 * @generated from protobuf message stream.video.GetRecordingsResponse.Recording
 */
export interface GetRecordingsResponse_Recording {
    /**
     * @generated from protobuf field: string call_type = 1;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 2;
     */
    callId: string;
    /**
     * @generated from protobuf field: string s3_file_url = 3;
     */
    s3FileUrl: string;
    /**
     * @generated from protobuf field: string start_time = 4;
     */
    startTime: string;
    /**
     * @generated from protobuf field: string stop_time = 5;
     */
    stopTime: string;
}
/**
 * @generated from protobuf message stream.video.SendEventRequest
 */
export interface SendEventRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string call_type = 2;
     */
    callType: string;
    /**
     * @generated from protobuf field: string call_id = 3;
     */
    callId: string;
    /**
     * @generated from protobuf field: stream.video.UserEventType event_type = 4;
     */
    eventType: UserEventType;
}
/**
 * @generated from protobuf message stream.video.SendEventResponse
 */
export interface SendEventResponse {
}
/**
 * @generated from protobuf enum stream.video.CallStatEventType
 */
export enum CallStatEventType {
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_AUDIO_FROZEN_UNSPECIFIED = 0;
     */
    AUDIO_FROZEN_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_AUDIO_DELAY = 1;
     */
    AUDIO_DELAY = 1,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_FROZEN = 2;
     */
    VIDEO_FROZEN = 2,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_DELAY = 3;
     */
    VIDEO_DELAY = 3,
    /**
     * @generated from protobuf enum value: CALL_STAT_EVENT_TYPE_VIDEO_NOT_OPTIMAL = 4;
     */
    VIDEO_NOT_OPTIMAL = 4
}
/**
 * @generated from protobuf enum stream.video.UserEventType
 */
export enum UserEventType {
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_AUDIO_MUTED_UNSPECIFIED = 0;
     */
    AUDIO_MUTED_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_AUDIO_UNMUTED = 1;
     */
    AUDIO_UNMUTED = 1,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_VIDEO_STARTED = 2;
     */
    VIDEO_STARTED = 2,
    /**
     * @generated from protobuf enum value: USER_EVENT_TYPE_VIDEO_STOPPED = 3;
     */
    VIDEO_STOPPED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class AddPushProviderRequest$Type extends MessageType<AddPushProviderRequest> {
    constructor() {
        super("stream.video.AddPushProviderRequest", [
            { no: 1, name: "settings", kind: "message", T: () => PushProvider }
        ]);
    }
    create(value?: PartialMessage<AddPushProviderRequest>): AddPushProviderRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddPushProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPushProviderRequest): AddPushProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.PushProvider settings */ 1:
                    message.settings = PushProvider.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPushProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.PushProvider settings = 1; */
        if (message.settings)
            PushProvider.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.AddPushProviderRequest
 */
export const AddPushProviderRequest = new AddPushProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePushProviderRequest$Type extends MessageType<UpdatePushProviderRequest> {
    constructor() {
        super("stream.video.UpdatePushProviderRequest", [
            { no: 1, name: "settings", kind: "message", T: () => PushProvider }
        ]);
    }
    create(value?: PartialMessage<UpdatePushProviderRequest>): UpdatePushProviderRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePushProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePushProviderRequest): UpdatePushProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.PushProvider settings */ 1:
                    message.settings = PushProvider.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePushProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.PushProvider settings = 1; */
        if (message.settings)
            PushProvider.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UpdatePushProviderRequest
 */
export const UpdatePushProviderRequest = new UpdatePushProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePushProviderRequest$Type extends MessageType<DeletePushProviderRequest> {
    constructor() {
        super("stream.video.DeletePushProviderRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePushProviderRequest>): DeletePushProviderRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeletePushProviderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePushProviderRequest): DeletePushProviderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePushProviderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeletePushProviderRequest
 */
export const DeletePushProviderRequest = new DeletePushProviderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAppSettingsRequest$Type extends MessageType<UpdateAppSettingsRequest> {
    constructor() {
        super("stream.video.UpdateAppSettingsRequest", [
            { no: 1, name: "webhook_url", kind: "message", T: () => StringValue },
            { no: 2, name: "sqs_settings", kind: "message", T: () => SqsSettings }
        ]);
    }
    create(value?: PartialMessage<UpdateAppSettingsRequest>): UpdateAppSettingsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAppSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAppSettingsRequest): UpdateAppSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue webhook_url */ 1:
                    message.webhookUrl = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.webhookUrl);
                    break;
                case /* stream.video.SqsSettings sqs_settings */ 2:
                    message.sqsSettings = SqsSettings.internalBinaryRead(reader, reader.uint32(), options, message.sqsSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAppSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue webhook_url = 1; */
        if (message.webhookUrl)
            StringValue.internalBinaryWrite(message.webhookUrl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.SqsSettings sqs_settings = 2; */
        if (message.sqsSettings)
            SqsSettings.internalBinaryWrite(message.sqsSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UpdateAppSettingsRequest
 */
export const UpdateAppSettingsRequest = new UpdateAppSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppSettingsResponse$Type extends MessageType<AppSettingsResponse> {
    constructor() {
        super("stream.video.AppSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => ApplicationSettings }
        ]);
    }
    create(value?: PartialMessage<AppSettingsResponse>): AppSettingsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppSettingsResponse): AppSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.ApplicationSettings settings */ 1:
                    message.settings = ApplicationSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.ApplicationSettings settings = 1; */
        if (message.settings)
            ApplicationSettings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.AppSettingsResponse
 */
export const AppSettingsResponse = new AppSettingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleRequest$Type extends MessageType<DeleteRoleRequest> {
    constructor() {
        super("stream.video.DeleteRoleRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleRequest>): DeleteRoleRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleRequest): DeleteRoleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRoleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteRoleRequest
 */
export const DeleteRoleRequest = new DeleteRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleResponse$Type extends MessageType<DeleteRoleResponse> {
    constructor() {
        super("stream.video.DeleteRoleResponse", []);
    }
    create(value?: PartialMessage<DeleteRoleResponse>): DeleteRoleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleResponse): DeleteRoleResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteRoleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteRoleResponse
 */
export const DeleteRoleResponse = new DeleteRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleRequest$Type extends MessageType<CreateRoleRequest> {
    constructor() {
        super("stream.video.CreateRoleRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRoleRequest>): CreateRoleRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRoleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleRequest): CreateRoleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateRoleRequest
 */
export const CreateRoleRequest = new CreateRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleResponse$Type extends MessageType<CreateRoleResponse> {
    constructor() {
        super("stream.video.CreateRoleResponse", []);
    }
    create(value?: PartialMessage<CreateRoleResponse>): CreateRoleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRoleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleResponse): CreateRoleResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateRoleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateRoleResponse
 */
export const CreateRoleResponse = new CreateRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallTypeRequest$Type extends MessageType<DeleteCallTypeRequest> {
    constructor() {
        super("stream.video.DeleteCallTypeRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCallTypeRequest>): DeleteCallTypeRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallTypeRequest): DeleteCallTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCallTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteCallTypeRequest
 */
export const DeleteCallTypeRequest = new DeleteCallTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallTypeResponse$Type extends MessageType<DeleteCallTypeResponse> {
    constructor() {
        super("stream.video.DeleteCallTypeResponse", []);
    }
    create(value?: PartialMessage<DeleteCallTypeResponse>): DeleteCallTypeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallTypeResponse): DeleteCallTypeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCallTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteCallTypeResponse
 */
export const DeleteCallTypeResponse = new DeleteCallTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallTypeResponse$Type extends MessageType<CallTypeResponse> {
    constructor() {
        super("stream.video.CallTypeResponse", [
            { no: 1, name: "call_type", kind: "message", T: () => CallType }
        ]);
    }
    create(value?: PartialMessage<CallTypeResponse>): CallTypeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallTypeResponse): CallTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.CallType call_type */ 1:
                    message.callType = CallType.internalBinaryRead(reader, reader.uint32(), options, message.callType);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.CallType call_type = 1; */
        if (message.callType)
            CallType.internalBinaryWrite(message.callType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallTypeResponse
 */
export const CallTypeResponse = new CallTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallTypeRequestInput$Type extends MessageType<CallTypeRequestInput> {
    constructor() {
        super("stream.video.CallTypeRequestInput", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "grants", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Permissions } },
            { no: 3, name: "features", kind: "message", T: () => Features }
        ]);
    }
    create(value?: PartialMessage<CallTypeRequestInput>): CallTypeRequestInput {
        const message = { name: "", grants: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallTypeRequestInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallTypeRequestInput): CallTypeRequestInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* map<string, stream.video.Permissions> grants */ 2:
                    this.binaryReadMap2(message.grants, reader, options);
                    break;
                case /* stream.video.Features features */ 3:
                    message.features = Features.internalBinaryRead(reader, reader.uint32(), options, message.features);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CallTypeRequestInput["grants"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CallTypeRequestInput["grants"] | undefined, val: CallTypeRequestInput["grants"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Permissions.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.CallTypeRequestInput.grants");
            }
        }
        map[key ?? ""] = val ?? Permissions.create();
    }
    internalBinaryWrite(message: CallTypeRequestInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* map<string, stream.video.Permissions> grants = 2; */
        for (let k of Object.keys(message.grants)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Permissions.internalBinaryWrite(message.grants[k], writer, options);
            writer.join().join();
        }
        /* stream.video.Features features = 3; */
        if (message.features)
            Features.internalBinaryWrite(message.features, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallTypeRequestInput
 */
export const CallTypeRequestInput = new CallTypeRequestInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPermissionsRequest$Type extends MessageType<ListPermissionsRequest> {
    constructor() {
        super("stream.video.ListPermissionsRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPermissionsRequest>): ListPermissionsRequest {
        const message = { callType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPermissionsRequest): ListPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ListPermissionsRequest
 */
export const ListPermissionsRequest = new ListPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPermissionsResponse$Type extends MessageType<ListPermissionsResponse> {
    constructor() {
        super("stream.video.ListPermissionsResponse", [
            { no: 1, name: "permissions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Permissions } }
        ]);
    }
    create(value?: PartialMessage<ListPermissionsResponse>): ListPermissionsResponse {
        const message = { permissions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPermissionsResponse): ListPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, stream.video.Permissions> permissions */ 1:
                    this.binaryReadMap1(message.permissions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ListPermissionsResponse["permissions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ListPermissionsResponse["permissions"] | undefined, val: ListPermissionsResponse["permissions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Permissions.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.ListPermissionsResponse.permissions");
            }
        }
        map[key ?? ""] = val ?? Permissions.create();
    }
    internalBinaryWrite(message: ListPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, stream.video.Permissions> permissions = 1; */
        for (let k of Object.keys(message.permissions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Permissions.internalBinaryWrite(message.permissions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ListPermissionsResponse
 */
export const ListPermissionsResponse = new ListPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallRequest$Type extends MessageType<GetCallRequest> {
    constructor() {
        super("stream.video.GetCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallRequest>): GetCallRequest {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallRequest): GetCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetCallRequest
 */
export const GetCallRequest = new GetCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallResponse$Type extends MessageType<GetCallResponse> {
    constructor() {
        super("stream.video.GetCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "call_state", kind: "message", T: () => CallState }
        ]);
    }
    create(value?: PartialMessage<GetCallResponse>): GetCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallResponse): GetCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.CallState call_state */ 2:
                    message.callState = CallState.internalBinaryRead(reader, reader.uint32(), options, message.callState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallState call_state = 2; */
        if (message.callState)
            CallState.internalBinaryWrite(message.callState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetCallResponse
 */
export const GetCallResponse = new GetCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCallsRequest$Type extends MessageType<CreateOrUpdateCallsRequest> {
    constructor() {
        super("stream.video.CreateOrUpdateCallsRequest", [
            { no: 1, name: "calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateCallRequest }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCallsRequest>): CreateOrUpdateCallsRequest {
        const message = { calls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCallsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCallsRequest): CreateOrUpdateCallsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.CreateCallRequest calls */ 1:
                    message.calls.push(CreateCallRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCallsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.CreateCallRequest calls = 1; */
        for (let i = 0; i < message.calls.length; i++)
            CreateCallRequest.internalBinaryWrite(message.calls[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateOrUpdateCallsRequest
 */
export const CreateOrUpdateCallsRequest = new CreateOrUpdateCallsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCallsResponse$Type extends MessageType<CreateOrUpdateCallsResponse> {
    constructor() {
        super("stream.video.CreateOrUpdateCallsResponse", [
            { no: 1, name: "calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Call }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCallsResponse>): CreateOrUpdateCallsResponse {
        const message = { calls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCallsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCallsResponse): CreateOrUpdateCallsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.Call calls */ 1:
                    message.calls.push(Call.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCallsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.Call calls = 1; */
        for (let i = 0; i < message.calls.length; i++)
            Call.internalBinaryWrite(message.calls[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateOrUpdateCallsResponse
 */
export const CreateOrUpdateCallsResponse = new CreateOrUpdateCallsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallRequest$Type extends MessageType<CreateCallRequest> {
    constructor() {
        super("stream.video.CreateCallRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "custom", kind: "message", T: () => Struct },
            { no: 4, name: "participant_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hls_broadcast", kind: "message", T: () => BoolValue },
            { no: 7, name: "rtmp", kind: "message", T: () => RTMPOptions },
            { no: 8, name: "transcribe", kind: "message", T: () => BoolValue },
            { no: 9, name: "transcribe_options", kind: "message", T: () => TranscribeOptions },
            { no: 10, name: "recording", kind: "message", T: () => BoolValue },
            { no: 11, name: "notify", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<CreateCallRequest>): CreateCallRequest {
        const message = { type: "", id: "", participantIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallRequest): CreateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 3:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                case /* repeated string participant_ids */ 4:
                    message.participantIds.push(reader.string());
                    break;
                case /* google.protobuf.BoolValue hls_broadcast */ 6:
                    message.hlsBroadcast = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.hlsBroadcast);
                    break;
                case /* stream.video.RTMPOptions rtmp */ 7:
                    message.rtmp = RTMPOptions.internalBinaryRead(reader, reader.uint32(), options, message.rtmp);
                    break;
                case /* google.protobuf.BoolValue transcribe */ 8:
                    message.transcribe = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.transcribe);
                    break;
                case /* stream.video.TranscribeOptions transcribe_options */ 9:
                    message.transcribeOptions = TranscribeOptions.internalBinaryRead(reader, reader.uint32(), options, message.transcribeOptions);
                    break;
                case /* google.protobuf.BoolValue recording */ 10:
                    message.recording = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.recording);
                    break;
                case /* google.protobuf.BoolValue notify */ 11:
                    message.notify = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.notify);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Struct custom = 3; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string participant_ids = 4; */
        for (let i = 0; i < message.participantIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.participantIds[i]);
        /* google.protobuf.BoolValue hls_broadcast = 6; */
        if (message.hlsBroadcast)
            BoolValue.internalBinaryWrite(message.hlsBroadcast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.RTMPOptions rtmp = 7; */
        if (message.rtmp)
            RTMPOptions.internalBinaryWrite(message.rtmp, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue transcribe = 8; */
        if (message.transcribe)
            BoolValue.internalBinaryWrite(message.transcribe, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.TranscribeOptions transcribe_options = 9; */
        if (message.transcribeOptions)
            TranscribeOptions.internalBinaryWrite(message.transcribeOptions, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue recording = 10; */
        if (message.recording)
            BoolValue.internalBinaryWrite(message.recording, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue notify = 11; */
        if (message.notify)
            BoolValue.internalBinaryWrite(message.notify, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateCallRequest
 */
export const CreateCallRequest = new CreateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCallResponse$Type extends MessageType<CreateCallResponse> {
    constructor() {
        super("stream.video.CreateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateCallResponse>): CreateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCallResponse): CreateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateCallResponse
 */
export const CreateCallResponse = new CreateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallRequest$Type extends MessageType<UpdateCallRequest> {
    constructor() {
        super("stream.video.UpdateCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "json_encoded_custom_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateCallRequest>): UpdateCallRequest {
        const message = { id: "", type: "", jsonEncodedCustomData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallRequest): UpdateCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* bytes json_encoded_custom_data */ 3:
                    message.jsonEncodedCustomData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* bytes json_encoded_custom_data = 3; */
        if (message.jsonEncodedCustomData.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.jsonEncodedCustomData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UpdateCallRequest
 */
export const UpdateCallRequest = new UpdateCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCallResponse$Type extends MessageType<UpdateCallResponse> {
    constructor() {
        super("stream.video.UpdateCallResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call }
        ]);
    }
    create(value?: PartialMessage<UpdateCallResponse>): UpdateCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCallResponse): UpdateCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UpdateCallResponse
 */
export const UpdateCallResponse = new UpdateCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallRequest$Type extends MessageType<DeleteCallRequest> {
    constructor() {
        super("stream.video.DeleteCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCallRequest>): DeleteCallRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallRequest): DeleteCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteCallRequest
 */
export const DeleteCallRequest = new DeleteCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCallResponse$Type extends MessageType<DeleteCallResponse> {
    constructor() {
        super("stream.video.DeleteCallResponse", []);
    }
    create(value?: PartialMessage<DeleteCallResponse>): DeleteCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCallResponse): DeleteCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteCallResponse
 */
export const DeleteCallResponse = new DeleteCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEdgeServerRequest$Type extends MessageType<SelectEdgeServerRequest> {
    constructor() {
        super("stream.video.SelectEdgeServerRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "latency_by_edge", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Latency } }
        ]);
    }
    create(value?: PartialMessage<SelectEdgeServerRequest>): SelectEdgeServerRequest {
        const message = { callType: "", callId: "", latencyByEdge: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEdgeServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEdgeServerRequest): SelectEdgeServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* map<string, stream.video.Latency> latency_by_edge */ 3:
                    this.binaryReadMap3(message.latencyByEdge, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SelectEdgeServerRequest["latencyByEdge"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SelectEdgeServerRequest["latencyByEdge"] | undefined, val: SelectEdgeServerRequest["latencyByEdge"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Latency.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.SelectEdgeServerRequest.latency_by_edge");
            }
        }
        map[key ?? ""] = val ?? Latency.create();
    }
    internalBinaryWrite(message: SelectEdgeServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* map<string, stream.video.Latency> latency_by_edge = 3; */
        for (let k of Object.keys(message.latencyByEdge)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Latency.internalBinaryWrite(message.latencyByEdge[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SelectEdgeServerRequest
 */
export const SelectEdgeServerRequest = new SelectEdgeServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEdgeServerResponse$Type extends MessageType<SelectEdgeServerResponse> {
    constructor() {
        super("stream.video.SelectEdgeServerResponse", [
            { no: 1, name: "edge_server", kind: "message", T: () => EdgeServer, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<SelectEdgeServerResponse>): SelectEdgeServerResponse {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEdgeServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEdgeServerResponse): SelectEdgeServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.EdgeServer edge_server */ 1:
                    message.edgeServer = EdgeServer.internalBinaryRead(reader, reader.uint32(), options, message.edgeServer);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectEdgeServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.EdgeServer edge_server = 1; */
        if (message.edgeServer)
            EdgeServer.internalBinaryWrite(message.edgeServer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SelectEdgeServerResponse
 */
export const SelectEdgeServerResponse = new SelectEdgeServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDeviceRequest$Type extends MessageType<AddDeviceRequest> {
    constructor() {
        super("stream.video.AddDeviceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "push_provider_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddDeviceRequest>): AddDeviceRequest {
        const message = { id: "", pushProviderName: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDeviceRequest): AddDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string push_provider_name */ 2:
                    message.pushProviderName = reader.string();
                    break;
                case /* string user_id */ 3:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string push_provider_name = 2; */
        if (message.pushProviderName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pushProviderName);
        /* string user_id = 3; */
        if (message.userId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.AddDeviceRequest
 */
export const AddDeviceRequest = new AddDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDeviceResponse$Type extends MessageType<AddDeviceResponse> {
    constructor() {
        super("stream.video.AddDeviceResponse", [
            { no: 1, name: "device", kind: "message", T: () => Device }
        ]);
    }
    create(value?: PartialMessage<AddDeviceResponse>): AddDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDeviceResponse): AddDeviceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Device device */ 1:
                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Device device = 1; */
        if (message.device)
            Device.internalBinaryWrite(message.device, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.AddDeviceResponse
 */
export const AddDeviceResponse = new AddDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDeviceRequest$Type extends MessageType<RemoveDeviceRequest> {
    constructor() {
        super("stream.video.RemoveDeviceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveDeviceRequest>): RemoveDeviceRequest {
        const message = { id: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDeviceRequest): RemoveDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.RemoveDeviceRequest
 */
export const RemoveDeviceRequest = new RemoveDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDeviceResponse$Type extends MessageType<RemoveDeviceResponse> {
    constructor() {
        super("stream.video.RemoveDeviceResponse", []);
    }
    create(value?: PartialMessage<RemoveDeviceResponse>): RemoveDeviceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveDeviceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDeviceResponse): RemoveDeviceResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveDeviceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.RemoveDeviceResponse
 */
export const RemoveDeviceResponse = new RemoveDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesRequest$Type extends MessageType<ListDevicesRequest> {
    constructor() {
        super("stream.video.ListDevicesRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDevicesRequest>): ListDevicesRequest {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesRequest): ListDevicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ListDevicesRequest
 */
export const ListDevicesRequest = new ListDevicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesResponse$Type extends MessageType<ListDevicesResponse> {
    constructor() {
        super("stream.video.ListDevicesResponse", [
            { no: 1, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Device }
        ]);
    }
    create(value?: PartialMessage<ListDevicesResponse>): ListDevicesResponse {
        const message = { devices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDevicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesResponse): ListDevicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.Device devices */ 1:
                    message.devices.push(Device.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.Device devices = 1; */
        for (let i = 0; i < message.devices.length; i++)
            Device.internalBinaryWrite(message.devices[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ListDevicesResponse
 */
export const ListDevicesResponse = new ListDevicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserRequest$Type extends MessageType<CreateUserRequest> {
    constructor() {
        super("stream.video.CreateUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "teams", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "custom", kind: "message", T: () => Struct },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUserRequest>): CreateUserRequest {
        const message = { id: "", teams: [], role: "", name: "", imageUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserRequest): CreateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* repeated string teams */ 2:
                    message.teams.push(reader.string());
                    break;
                case /* string role */ 3:
                    message.role = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 4:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string image_url */ 6:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* repeated string teams = 2; */
        for (let i = 0; i < message.teams.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.teams[i]);
        /* string role = 3; */
        if (message.role !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.role);
        /* google.protobuf.Struct custom = 4; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string image_url = 6; */
        if (message.imageUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateUserRequest
 */
export const CreateUserRequest = new CreateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUsersRequest$Type extends MessageType<CreateOrUpdateUsersRequest> {
    constructor() {
        super("stream.video.CreateOrUpdateUsersRequest", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateUserRequest },
            { no: 2, name: "full_update", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateUsersRequest>): CreateOrUpdateUsersRequest {
        const message = { users: [], fullUpdate: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateUsersRequest): CreateOrUpdateUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.CreateUserRequest users */ 1:
                    message.users.push(CreateUserRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool full_update */ 2:
                    message.fullUpdate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.CreateUserRequest users = 1; */
        for (let i = 0; i < message.users.length; i++)
            CreateUserRequest.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool full_update = 2; */
        if (message.fullUpdate !== false)
            writer.tag(2, WireType.Varint).bool(message.fullUpdate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateOrUpdateUsersRequest
 */
export const CreateOrUpdateUsersRequest = new CreateOrUpdateUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUsersResponse$Type extends MessageType<CreateOrUpdateUsersResponse> {
    constructor() {
        super("stream.video.CreateOrUpdateUsersResponse", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateUsersResponse>): CreateOrUpdateUsersResponse {
        const message = { users: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateUsersResponse): CreateOrUpdateUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.User users */ 1:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.User users = 1; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateOrUpdateUsersResponse
 */
export const CreateOrUpdateUsersResponse = new CreateOrUpdateUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("stream.video.DeleteUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExportUserRequest$Type extends MessageType<ExportUserRequest> {
    constructor() {
        super("stream.video.ExportUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExportUserRequest>): ExportUserRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExportUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExportUserRequest): ExportUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExportUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ExportUserRequest
 */
export const ExportUserRequest = new ExportUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExportUserResponse$Type extends MessageType<ExportUserResponse> {
    constructor() {
        super("stream.video.ExportUserResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExportUserResponse>): ExportUserResponse {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExportUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExportUserResponse): ExportUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExportUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ExportUserResponse
 */
export const ExportUserResponse = new ExportUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse$Type extends MessageType<DeleteUserResponse> {
    constructor() {
        super("stream.video.DeleteUserResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserResponse>): DeleteUserResponse {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse): DeleteUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.DeleteUserResponse
 */
export const DeleteUserResponse = new DeleteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserResponse$Type extends MessageType<CreateUserResponse> {
    constructor() {
        super("stream.video.CreateUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<CreateUserResponse>): CreateUserResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserResponse): CreateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CreateUserResponse
 */
export const CreateUserResponse = new CreateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventRequest$Type extends MessageType<SendCustomEventRequest> {
    constructor() {
        super("stream.video.SendCustomEventRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendCustomEventRequest>): SendCustomEventRequest {
        const message = { type: "", data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventRequest): SendCustomEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendCustomEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SendCustomEventRequest
 */
export const SendCustomEventRequest = new SendCustomEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendCustomEventResponse$Type extends MessageType<SendCustomEventResponse> {
    constructor() {
        super("stream.video.SendCustomEventResponse", []);
    }
    create(value?: PartialMessage<SendCustomEventResponse>): SendCustomEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendCustomEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendCustomEventResponse): SendCustomEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendCustomEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SendCustomEventResponse
 */
export const SendCustomEventResponse = new SendCustomEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallRequest$Type extends MessageType<JoinCallRequest> {
    constructor() {
        super("stream.video.JoinCallRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinCallRequest>): JoinCallRequest {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallRequest): JoinCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.JoinCallRequest
 */
export const JoinCallRequest = new JoinCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCapability$Type extends MessageType<UserCapability> {
    constructor() {
        super("stream.video.UserCapability", [
            { no: 1, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserCapability>): UserCapability {
        const message = { action: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserCapability>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCapability): UserCapability {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string action */ 1:
                    message.action = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCapability, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string action = 1; */
        if (message.action !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.action);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.UserCapability
 */
export const UserCapability = new UserCapability$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinCallResponse$Type extends MessageType<JoinCallResponse> {
    constructor() {
        super("stream.video.JoinCallResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "call", kind: "message", T: () => Call },
            { no: 3, name: "call_state", kind: "message", T: () => CallState },
            { no: 4, name: "edges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Edge },
            { no: 5, name: "own_capabilities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserCapability }
        ]);
    }
    create(value?: PartialMessage<JoinCallResponse>): JoinCallResponse {
        const message = { edges: [], ownCapabilities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinCallResponse): JoinCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* stream.video.Call call */ 2:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.CallState call_state */ 3:
                    message.callState = CallState.internalBinaryRead(reader, reader.uint32(), options, message.callState);
                    break;
                case /* repeated stream.video.Edge edges */ 4:
                    message.edges.push(Edge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stream.video.UserCapability own_capabilities */ 5:
                    message.ownCapabilities.push(UserCapability.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.Call call = 2; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallState call_state = 3; */
        if (message.callState)
            CallState.internalBinaryWrite(message.callState, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.Edge edges = 4; */
        for (let i = 0; i < message.edges.length; i++)
            Edge.internalBinaryWrite(message.edges[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.UserCapability own_capabilities = 5; */
        for (let i = 0; i < message.ownCapabilities.length; i++)
            UserCapability.internalBinaryWrite(message.ownCapabilities[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.JoinCallResponse
 */
export const JoinCallResponse = new JoinCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveCallRequest$Type extends MessageType<LeaveCallRequest> {
    constructor() {
        super("stream.video.LeaveCallRequest", []);
    }
    create(value?: PartialMessage<LeaveCallRequest>): LeaveCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveCallRequest): LeaveCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.LeaveCallRequest
 */
export const LeaveCallRequest = new LeaveCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveCallResponse$Type extends MessageType<LeaveCallResponse> {
    constructor() {
        super("stream.video.LeaveCallResponse", []);
    }
    create(value?: PartialMessage<LeaveCallResponse>): LeaveCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveCallResponse): LeaveCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.LeaveCallResponse
 */
export const LeaveCallResponse = new LeaveCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallRequest$Type extends MessageType<EndCallRequest> {
    constructor() {
        super("stream.video.EndCallRequest", []);
    }
    create(value?: PartialMessage<EndCallRequest>): EndCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallRequest): EndCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.EndCallRequest
 */
export const EndCallRequest = new EndCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCallResponse$Type extends MessageType<EndCallResponse> {
    constructor() {
        super("stream.video.EndCallResponse", []);
    }
    create(value?: PartialMessage<EndCallResponse>): EndCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCallResponse): EndCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.EndCallResponse
 */
export const EndCallResponse = new EndCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBroadcastRequest$Type extends MessageType<StartBroadcastRequest> {
    constructor() {
        super("stream.video.StartBroadcastRequest", [
            { no: 1, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hls_broadcast", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "rtmp", kind: "message", T: () => RTMPOptions }
        ]);
    }
    create(value?: PartialMessage<StartBroadcastRequest>): StartBroadcastRequest {
        const message = { callId: "", callType: "", hlsBroadcast: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartBroadcastRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartBroadcastRequest): StartBroadcastRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_id */ 1:
                    message.callId = reader.string();
                    break;
                case /* string call_type */ 2:
                    message.callType = reader.string();
                    break;
                case /* bool hls_broadcast */ 3:
                    message.hlsBroadcast = reader.bool();
                    break;
                case /* stream.video.RTMPOptions rtmp */ 5:
                    message.rtmp = RTMPOptions.internalBinaryRead(reader, reader.uint32(), options, message.rtmp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartBroadcastRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_id = 1; */
        if (message.callId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callId);
        /* string call_type = 2; */
        if (message.callType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callType);
        /* bool hls_broadcast = 3; */
        if (message.hlsBroadcast !== false)
            writer.tag(3, WireType.Varint).bool(message.hlsBroadcast);
        /* stream.video.RTMPOptions rtmp = 5; */
        if (message.rtmp)
            RTMPOptions.internalBinaryWrite(message.rtmp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StartBroadcastRequest
 */
export const StartBroadcastRequest = new StartBroadcastRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBroadcastResponse$Type extends MessageType<StartBroadcastResponse> {
    constructor() {
        super("stream.video.StartBroadcastResponse", [
            { no: 1, name: "broadcast", kind: "message", T: () => Broadcast }
        ]);
    }
    create(value?: PartialMessage<StartBroadcastResponse>): StartBroadcastResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartBroadcastResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartBroadcastResponse): StartBroadcastResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Broadcast broadcast */ 1:
                    message.broadcast = Broadcast.internalBinaryRead(reader, reader.uint32(), options, message.broadcast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartBroadcastResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Broadcast broadcast = 1; */
        if (message.broadcast)
            Broadcast.internalBinaryWrite(message.broadcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StartBroadcastResponse
 */
export const StartBroadcastResponse = new StartBroadcastResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopBroadcastRequest$Type extends MessageType<StopBroadcastRequest> {
    constructor() {
        super("stream.video.StopBroadcastRequest", []);
    }
    create(value?: PartialMessage<StopBroadcastRequest>): StopBroadcastRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopBroadcastRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopBroadcastRequest): StopBroadcastRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopBroadcastRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopBroadcastRequest
 */
export const StopBroadcastRequest = new StopBroadcastRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopBroadcastResponse$Type extends MessageType<StopBroadcastResponse> {
    constructor() {
        super("stream.video.StopBroadcastResponse", []);
    }
    create(value?: PartialMessage<StopBroadcastResponse>): StopBroadcastResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopBroadcastResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopBroadcastResponse): StopBroadcastResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopBroadcastResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopBroadcastResponse
 */
export const StopBroadcastResponse = new StopBroadcastResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranscribeCallRequest$Type extends MessageType<TranscribeCallRequest> {
    constructor() {
        super("stream.video.TranscribeCallRequest", []);
    }
    create(value?: PartialMessage<TranscribeCallRequest>): TranscribeCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranscribeCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranscribeCallRequest): TranscribeCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TranscribeCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.TranscribeCallRequest
 */
export const TranscribeCallRequest = new TranscribeCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranscribeCallResponse$Type extends MessageType<TranscribeCallResponse> {
    constructor() {
        super("stream.video.TranscribeCallResponse", []);
    }
    create(value?: PartialMessage<TranscribeCallResponse>): TranscribeCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranscribeCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranscribeCallResponse): TranscribeCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TranscribeCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.TranscribeCallResponse
 */
export const TranscribeCallResponse = new TranscribeCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTranscribeCallRequest$Type extends MessageType<StopTranscribeCallRequest> {
    constructor() {
        super("stream.video.StopTranscribeCallRequest", []);
    }
    create(value?: PartialMessage<StopTranscribeCallRequest>): StopTranscribeCallRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopTranscribeCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTranscribeCallRequest): StopTranscribeCallRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopTranscribeCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopTranscribeCallRequest
 */
export const StopTranscribeCallRequest = new StopTranscribeCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTranscribeCallResponse$Type extends MessageType<StopTranscribeCallResponse> {
    constructor() {
        super("stream.video.StopTranscribeCallResponse", []);
    }
    create(value?: PartialMessage<StopTranscribeCallResponse>): StopTranscribeCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopTranscribeCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTranscribeCallResponse): StopTranscribeCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopTranscribeCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopTranscribeCallResponse
 */
export const StopTranscribeCallResponse = new StopTranscribeCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreLatencyRequest$Type extends MessageType<StoreLatencyRequest> {
    constructor() {
        super("stream.video.StoreLatencyRequest", []);
    }
    create(value?: PartialMessage<StoreLatencyRequest>): StoreLatencyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreLatencyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreLatencyRequest): StoreLatencyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StoreLatencyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StoreLatencyRequest
 */
export const StoreLatencyRequest = new StoreLatencyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreLatencyResponse$Type extends MessageType<StoreLatencyResponse> {
    constructor() {
        super("stream.video.StoreLatencyResponse", []);
    }
    create(value?: PartialMessage<StoreLatencyResponse>): StoreLatencyResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreLatencyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreLatencyResponse): StoreLatencyResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StoreLatencyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StoreLatencyResponse
 */
export const StoreLatencyResponse = new StoreLatencyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRecordingRequest$Type extends MessageType<StartRecordingRequest> {
    constructor() {
        super("stream.video.StartRecordingRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartRecordingRequest>): StartRecordingRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRecordingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRecordingRequest): StartRecordingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRecordingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StartRecordingRequest
 */
export const StartRecordingRequest = new StartRecordingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsRequest$Type extends MessageType<ReportCallStatsRequest> {
    constructor() {
        super("stream.video.ReportCallStatsRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stats", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReportCallStatsRequest>): ReportCallStatsRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsRequest): ReportCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* google.protobuf.Struct stats */ 3:
                    message.stats = Struct.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* google.protobuf.Struct stats = 3; */
        if (message.stats)
            Struct.internalBinaryWrite(message.stats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReportCallStatsRequest
 */
export const ReportCallStatsRequest = new ReportCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallStatEvent$Type extends MessageType<CallStatEvent> {
    constructor() {
        super("stream.video.CallStatEvent", [
            { no: 1, name: "type", kind: "enum", T: () => ["stream.video.CallStatEventType", CallStatEventType, "CALL_STAT_EVENT_TYPE_"] },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<CallStatEvent>): CallStatEvent {
        const message = { type: 0, time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallStatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallStatEvent): CallStatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.CallStatEventType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallStatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.CallStatEventType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallStatEvent
 */
export const CallStatEvent = new CallStatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueRequest$Type extends MessageType<ReportIssueRequest> {
    constructor() {
        super("stream.video.ReportIssueRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "custom", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReportIssueRequest>): ReportIssueRequest {
        const message = { callType: "", callId: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueRequest): ReportIssueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 4:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportIssueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Struct custom = 4; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReportIssueRequest
 */
export const ReportIssueRequest = new ReportIssueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallRequest$Type extends MessageType<ReviewCallRequest> {
    constructor() {
        super("stream.video.ReviewCallRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stars", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "custom", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ReviewCallRequest>): ReviewCallRequest {
        const message = { callType: "", callId: "", stars: 0, description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallRequest): ReviewCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* float stars */ 3:
                    message.stars = reader.float();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Struct custom */ 5:
                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReviewCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* float stars = 3; */
        if (message.stars !== 0)
            writer.tag(3, WireType.Bit32).float(message.stars);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Struct custom = 5; */
        if (message.custom)
            Struct.internalBinaryWrite(message.custom, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReviewCallRequest
 */
export const ReviewCallRequest = new ReviewCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewCallResponse$Type extends MessageType<ReviewCallResponse> {
    constructor() {
        super("stream.video.ReviewCallResponse", []);
    }
    create(value?: PartialMessage<ReviewCallResponse>): ReviewCallResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewCallResponse): ReviewCallResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReviewCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReviewCallResponse
 */
export const ReviewCallResponse = new ReviewCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportIssueResponse$Type extends MessageType<ReportIssueResponse> {
    constructor() {
        super("stream.video.ReportIssueResponse", []);
    }
    create(value?: PartialMessage<ReportIssueResponse>): ReportIssueResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportIssueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportIssueResponse): ReportIssueResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportIssueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReportIssueResponse
 */
export const ReportIssueResponse = new ReportIssueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantCallStatEvent$Type extends MessageType<ParticipantCallStatEvent> {
    constructor() {
        super("stream.video.ParticipantCallStatEvent", [
            { no: 1, name: "participant_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallStatEvent }
        ]);
    }
    create(value?: PartialMessage<ParticipantCallStatEvent>): ParticipantCallStatEvent {
        const message = { participantId: "", callTimelines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParticipantCallStatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantCallStatEvent): ParticipantCallStatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string participant_id */ 1:
                    message.participantId = reader.string();
                    break;
                case /* repeated stream.video.CallStatEvent call_timelines */ 2:
                    message.callTimelines.push(CallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantCallStatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string participant_id = 1; */
        if (message.participantId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.participantId);
        /* repeated stream.video.CallStatEvent call_timelines = 2; */
        for (let i = 0; i < message.callTimelines.length; i++)
            CallStatEvent.internalBinaryWrite(message.callTimelines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ParticipantCallStatEvent
 */
export const ParticipantCallStatEvent = new ParticipantCallStatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallStatsRequest$Type extends MessageType<GetCallStatsRequest> {
    constructor() {
        super("stream.video.GetCallStatsRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCallStatsRequest>): GetCallStatsRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallStatsRequest): GetCallStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetCallStatsRequest
 */
export const GetCallStatsRequest = new GetCallStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallStats$Type extends MessageType<CallStats> {
    constructor() {
        super("stream.video.CallStats", [
            { no: 1, name: "call_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallStatEvent },
            { no: 2, name: "participant_timelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ParticipantCallStatEvent }
        ]);
    }
    create(value?: PartialMessage<CallStats>): CallStats {
        const message = { callTimelines: [], participantTimelines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CallStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CallStats): CallStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.CallStatEvent call_timelines */ 1:
                    message.callTimelines.push(CallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stream.video.ParticipantCallStatEvent participant_timelines */ 2:
                    message.participantTimelines.push(ParticipantCallStatEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CallStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.CallStatEvent call_timelines = 1; */
        for (let i = 0; i < message.callTimelines.length; i++)
            CallStatEvent.internalBinaryWrite(message.callTimelines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated stream.video.ParticipantCallStatEvent participant_timelines = 2; */
        for (let i = 0; i < message.participantTimelines.length; i++)
            ParticipantCallStatEvent.internalBinaryWrite(message.participantTimelines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.CallStats
 */
export const CallStats = new CallStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCallStatsResponse$Type extends MessageType<GetCallStatsResponse> {
    constructor() {
        super("stream.video.GetCallStatsResponse", [
            { no: 1, name: "call", kind: "message", T: () => Call },
            { no: 2, name: "call_stats", kind: "message", T: () => CallStats }
        ]);
    }
    create(value?: PartialMessage<GetCallStatsResponse>): GetCallStatsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCallStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCallStatsResponse): GetCallStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.Call call */ 1:
                    message.call = Call.internalBinaryRead(reader, reader.uint32(), options, message.call);
                    break;
                case /* stream.video.CallStats call_stats */ 2:
                    message.callStats = CallStats.internalBinaryRead(reader, reader.uint32(), options, message.callStats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCallStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.Call call = 1; */
        if (message.call)
            Call.internalBinaryWrite(message.call, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.CallStats call_stats = 2; */
        if (message.callStats)
            CallStats.internalBinaryWrite(message.callStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetCallStatsResponse
 */
export const GetCallStatsResponse = new GetCallStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportCallStatsResponse$Type extends MessageType<ReportCallStatsResponse> {
    constructor() {
        super("stream.video.ReportCallStatsResponse", []);
    }
    create(value?: PartialMessage<ReportCallStatsResponse>): ReportCallStatsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportCallStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportCallStatsResponse): ReportCallStatsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportCallStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.ReportCallStatsResponse
 */
export const ReportCallStatsResponse = new ReportCallStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRecordingResponse$Type extends MessageType<StartRecordingResponse> {
    constructor() {
        super("stream.video.StartRecordingResponse", []);
    }
    create(value?: PartialMessage<StartRecordingResponse>): StartRecordingResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRecordingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRecordingResponse): StartRecordingResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartRecordingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StartRecordingResponse
 */
export const StartRecordingResponse = new StartRecordingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopRecordingRequest$Type extends MessageType<StopRecordingRequest> {
    constructor() {
        super("stream.video.StopRecordingRequest", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopRecordingRequest>): StopRecordingRequest {
        const message = { callType: "", callId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopRecordingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopRecordingRequest): StopRecordingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopRecordingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopRecordingRequest
 */
export const StopRecordingRequest = new StopRecordingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopRecordingResponse$Type extends MessageType<StopRecordingResponse> {
    constructor() {
        super("stream.video.StopRecordingResponse", [
            { no: 1, name: "s3_file_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopRecordingResponse>): StopRecordingResponse {
        const message = { s3FileUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopRecordingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopRecordingResponse): StopRecordingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string s3_file_url */ 1:
                    message.s3FileUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopRecordingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string s3_file_url = 1; */
        if (message.s3FileUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.s3FileUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.StopRecordingResponse
 */
export const StopRecordingResponse = new StopRecordingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRecordingsRequest$Type extends MessageType<GetRecordingsRequest> {
    constructor() {
        super("stream.video.GetRecordingsRequest", []);
    }
    create(value?: PartialMessage<GetRecordingsRequest>): GetRecordingsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRecordingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRecordingsRequest): GetRecordingsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetRecordingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetRecordingsRequest
 */
export const GetRecordingsRequest = new GetRecordingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRecordingsResponse$Type extends MessageType<GetRecordingsResponse> {
    constructor() {
        super("stream.video.GetRecordingsResponse", [
            { no: 1, name: "recordings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetRecordingsResponse_Recording }
        ]);
    }
    create(value?: PartialMessage<GetRecordingsResponse>): GetRecordingsResponse {
        const message = { recordings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRecordingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRecordingsResponse): GetRecordingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.GetRecordingsResponse.Recording recordings */ 1:
                    message.recordings.push(GetRecordingsResponse_Recording.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRecordingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.GetRecordingsResponse.Recording recordings = 1; */
        for (let i = 0; i < message.recordings.length; i++)
            GetRecordingsResponse_Recording.internalBinaryWrite(message.recordings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetRecordingsResponse
 */
export const GetRecordingsResponse = new GetRecordingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRecordingsResponse_Recording$Type extends MessageType<GetRecordingsResponse_Recording> {
    constructor() {
        super("stream.video.GetRecordingsResponse.Recording", [
            { no: 1, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "s3_file_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "stop_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRecordingsResponse_Recording>): GetRecordingsResponse_Recording {
        const message = { callType: "", callId: "", s3FileUrl: "", startTime: "", stopTime: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRecordingsResponse_Recording>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRecordingsResponse_Recording): GetRecordingsResponse_Recording {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string call_type */ 1:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 2:
                    message.callId = reader.string();
                    break;
                case /* string s3_file_url */ 3:
                    message.s3FileUrl = reader.string();
                    break;
                case /* string start_time */ 4:
                    message.startTime = reader.string();
                    break;
                case /* string stop_time */ 5:
                    message.stopTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRecordingsResponse_Recording, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string call_type = 1; */
        if (message.callType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 2; */
        if (message.callId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callId);
        /* string s3_file_url = 3; */
        if (message.s3FileUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.s3FileUrl);
        /* string start_time = 4; */
        if (message.startTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.startTime);
        /* string stop_time = 5; */
        if (message.stopTime !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.stopTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.GetRecordingsResponse.Recording
 */
export const GetRecordingsResponse_Recording = new GetRecordingsResponse_Recording$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventRequest$Type extends MessageType<SendEventRequest> {
    constructor() {
        super("stream.video.SendEventRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "event_type", kind: "enum", T: () => ["stream.video.UserEventType", UserEventType, "USER_EVENT_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SendEventRequest>): SendEventRequest {
        const message = { userId: "", callType: "", callId: "", eventType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventRequest): SendEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string call_type */ 2:
                    message.callType = reader.string();
                    break;
                case /* string call_id */ 3:
                    message.callId = reader.string();
                    break;
                case /* stream.video.UserEventType event_type */ 4:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string call_type = 2; */
        if (message.callType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.callType);
        /* string call_id = 3; */
        if (message.callId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.callId);
        /* stream.video.UserEventType event_type = 4; */
        if (message.eventType !== 0)
            writer.tag(4, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SendEventRequest
 */
export const SendEventRequest = new SendEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEventResponse$Type extends MessageType<SendEventResponse> {
    constructor() {
        super("stream.video.SendEventResponse", []);
    }
    create(value?: PartialMessage<SendEventResponse>): SendEventResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEventResponse): SendEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.SendEventResponse
 */
export const SendEventResponse = new SendEventResponse$Type();
/**
 * @generated ServiceType for protobuf service stream.video.CallCoordinatorService
 */
export const CallCoordinatorService = new ServiceType("stream.video.CallCoordinatorService", [
    { name: "CreateCall", options: {}, I: CreateCallRequest, O: CreateCallResponse },
    { name: "GetCall", options: {}, I: GetCallRequest, O: GetCallResponse },
    { name: "UpdateCall", options: {}, I: UpdateCallRequest, O: UpdateCallResponse },
    { name: "DeleteCall", options: {}, I: DeleteCallRequest, O: DeleteCallResponse },
    { name: "JoinCall", options: {}, I: JoinCallRequest, O: JoinCallResponse },
    { name: "SelectEdgeServer", options: {}, I: SelectEdgeServerRequest, O: SelectEdgeServerResponse },
    { name: "LeaveCall", options: {}, I: LeaveCallRequest, O: LeaveCallResponse },
    { name: "EndCall", options: {}, I: EndCallRequest, O: EndCallResponse },
    { name: "AddDevice", options: {}, I: AddDeviceRequest, O: AddDeviceResponse },
    { name: "RemoveDevice", options: {}, I: RemoveDeviceRequest, O: RemoveDeviceResponse },
    { name: "ListDevices", options: {}, I: ListDevicesRequest, O: ListDevicesResponse },
    { name: "SendEvent", options: {}, I: SendEventRequest, O: SendEventResponse },
    { name: "SendCustomEvent", options: {}, I: SendCustomEventRequest, O: SendCustomEventResponse },
    { name: "CreateOrUpdateCalls", options: {}, I: CreateOrUpdateCallsRequest, O: CreateOrUpdateCallsResponse },
    { name: "CreateOrUpdateUsers", options: {}, I: CreateOrUpdateUsersRequest, O: CreateOrUpdateUsersResponse },
    { name: "TranscribeCall", options: {}, I: TranscribeCallRequest, O: TranscribeCallResponse },
    { name: "StopTranscribeCall", options: {}, I: StopTranscribeCallRequest, O: StopTranscribeCallResponse },
    { name: "StartBroadcast", options: {}, I: StartBroadcastRequest, O: StartBroadcastResponse },
    { name: "StopBroadcast", options: {}, I: StopBroadcastRequest, O: StopBroadcastResponse },
    { name: "StartRecording", options: {}, I: StartRecordingRequest, O: StartRecordingResponse },
    { name: "StopRecording", options: {}, I: StopRecordingRequest, O: StopRecordingResponse },
    { name: "GetRecordings", options: {}, I: GetRecordingsRequest, O: GetRecordingsResponse },
    { name: "CreateUser", options: {}, I: CreateUserRequest, O: CreateUserResponse },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: DeleteUserResponse },
    { name: "ExportUser", options: {}, I: ExportUserRequest, O: ExportUserResponse },
    { name: "UpdateAppSettings", options: {}, I: UpdateAppSettingsRequest, O: AppSettingsResponse },
    { name: "GetAppSettings", options: {}, I: Empty, O: AppSettingsResponse },
    { name: "CreateCallType", options: {}, I: CallTypeRequestInput, O: CallTypeResponse },
    { name: "UpdateCallType", options: {}, I: CallTypeRequestInput, O: CallTypeResponse },
    { name: "DeleteCallType", options: {}, I: DeleteCallTypeRequest, O: DeleteCallTypeResponse },
    { name: "ListPermissions", options: {}, I: ListPermissionsRequest, O: ListPermissionsResponse },
    { name: "CreateRole", options: {}, I: CreateRoleRequest, O: CreateRoleResponse },
    { name: "DeleteRole", options: {}, I: DeleteRoleRequest, O: DeleteRoleResponse },
    { name: "AddPushProvider", options: {}, I: AddPushProviderRequest, O: AppSettingsResponse },
    { name: "UpdatePushProvider", options: {}, I: UpdatePushProviderRequest, O: AppSettingsResponse },
    { name: "DeletePushProvider", options: {}, I: DeletePushProviderRequest, O: AppSettingsResponse },
    { name: "ReportCallStats", options: {}, I: ReportCallStatsRequest, O: ReportCallStatsResponse },
    { name: "GetCallStats", options: {}, I: GetCallStatsRequest, O: GetCallStatsResponse },
    { name: "ReviewCall", options: {}, I: ReviewCallRequest, O: ReviewCallResponse },
    { name: "ReportIssue", options: {}, I: ReportIssueRequest, O: ReportIssueResponse }
]);
