/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter long_type_string,generate_dependencies,client_generic,server_none,eslint_disable
// @generated from protobuf file "sfu_signal_rpc/signal.proto" (package "stream.video.sfu", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CallState } from "../sfu_models/models";
import { CodecSettings } from "../sfu_models/models";
import { PeerType } from "../sfu_models/models";
import { VideoDimension } from "../sfu_models/models";
import { StreamQuality } from "../sfu_models/models";
/**
 * @generated from protobuf message stream.video.sfu.UpdateVideoQualityRequest
 */
export interface UpdateVideoQualityRequest {
    /**
     * @generated from protobuf field: repeated stream.video.sfu.StreamQuality stream_qualities = 1;
     */
    streamQualities: StreamQuality[];
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.UpdateVideoQualityResponse
 */
export interface UpdateVideoQualityResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.UpdateMuteStateRequest
 */
export interface UpdateMuteStateRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf oneof: mute
     */
    mute: {
        oneofKind: "audioMuteChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.AudioMuteChanged audio_mute_changed = 2;
         */
        audioMuteChanged: AudioMuteChanged;
    } | {
        oneofKind: "videoMuteChanged";
        /**
         * @generated from protobuf field: stream.video.sfu.VideoMuteChanged video_mute_changed = 3;
         */
        videoMuteChanged: VideoMuteChanged;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.sfu.UpdateMuteStateResponse
 */
export interface UpdateMuteStateResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.AudioMuteChanged
 */
export interface AudioMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 1;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.VideoMuteChanged
 */
export interface VideoMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 2;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.UpdateSubscriptionsRequest
 */
export interface UpdateSubscriptionsRequest {
    /**
     * maps stream user_ids to its size
     *
     * @generated from protobuf field: map<string, stream.video.sfu.VideoDimension> subscriptions = 1;
     */
    subscriptions: {
        [key: string]: VideoDimension;
    };
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.SendAnswerRequest
 */
export interface SendAnswerRequest {
    /**
     * @generated from protobuf field: stream.video.sfu.PeerType peer_type = 1;
     */
    peerType: PeerType;
    /**
     * @generated from protobuf field: string sdp = 2;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 4;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.SendAnswerResponse
 */
export interface SendAnswerResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.IceCandidateRequest
 */
export interface IceCandidateRequest {
    /**
     * TODO: use PeerTYPE!
     *
     * @generated from protobuf field: bool publisher = 1;
     */
    publisher: boolean;
    /**
     * @generated from protobuf field: string candidate = 2;
     */
    candidate: string;
    /**
     * @generated from protobuf field: optional string sdpMid = 3;
     */
    sdpMid?: string;
    /**
     * @generated from protobuf field: optional uint32 sdpMLineIndex = 4;
     */
    sdpMLineIndex?: number;
    /**
     * @generated from protobuf field: optional string usernameFragment = 5;
     */
    usernameFragment?: string;
    /**
     * @generated from protobuf field: string session_id = 7;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.IceCandidateResponse
 */
export interface IceCandidateResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.UpdateSubscriptionsResponse
 */
export interface UpdateSubscriptionsResponse {
}
/**
 * @generated from protobuf message stream.video.sfu.SetPublisherRequest
 */
export interface SetPublisherRequest {
    /**
     * sdp offer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.SetPublisherResponse
 */
export interface SetPublisherResponse {
    /**
     * sdp answer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.JoinRequest
 */
export interface JoinRequest {
    /**
     * @generated from protobuf field: string subscriber_sdp_offer = 1;
     */
    subscriberSdpOffer: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.CodecSettings codec_settings = 4;
     */
    codecSettings?: CodecSettings; // TODO: we should know if this is going to be
    // - publishing and subscribing, or just subscribing for future routing
}
/**
 * @generated from protobuf message stream.video.sfu.JoinResponse
 */
export interface JoinResponse {
    /**
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: stream.video.sfu.CallState call_state = 2;
     */
    callState?: CallState; // TODO: include full list of participants with track and audio info
}
/**
 * @generated from protobuf message stream.video.sfu.ConnectRequest
 */
export interface ConnectRequest {
    /**
     * peer connection sdp offer
     *
     * @generated from protobuf field: string sdp_offer = 1;
     */
    sdpOffer: string;
    /**
     * token used for authentication
     *
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message stream.video.sfu.ConnectResponse
 */
export interface ConnectResponse {
    /**
     * sdp answer
     *
     * @generated from protobuf field: string sdp_answer = 1;
     */
    sdpAnswer: string;
}
/**
 * Signaling related payload, all these messages will be exchanged using signaling channel
 *
 * @generated from protobuf message stream.video.sfu.SignalRequest
 */
export interface SignalRequest {
    /**
     * @generated from protobuf oneof: event_payload
     */
    eventPayload: {
        oneofKind: "subscribe";
        /**
         * @generated from protobuf field: stream.video.sfu.SubscribeRequest subscribe = 1;
         */
        subscribe: SubscribeRequest;
    } | {
        oneofKind: "publish";
        /**
         * @generated from protobuf field: stream.video.sfu.PublishRequest publish = 2;
         */
        publish: PublishRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message stream.video.sfu.SignalEvent
 */
export interface SignalEvent {
    /**
     * @generated from protobuf oneof: event_payload
     */
    eventPayload: {
        oneofKind: "subscribe";
        /**
         * @generated from protobuf field: stream.video.sfu.SubscribeResponse subscribe = 1;
         */
        subscribe: SubscribeResponse;
    } | {
        oneofKind: "publish";
        /**
         * @generated from protobuf field: stream.video.sfu.PublishResponse publish = 2;
         */
        publish: PublishResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * SubscribeRequest
 *
 * @generated from protobuf message stream.video.sfu.SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string sdp_offer = 2;
     */
    sdpOffer: string;
    /**
     * preferred quality
     *
     * @generated from protobuf field: string quality = 3;
     */
    quality: string;
}
/**
 * SubscribeResponse
 *
 * @generated from protobuf message stream.video.sfu.SubscribeResponse
 */
export interface SubscribeResponse {
    /**
     * preferred quality
     *
     * @generated from protobuf field: string quality = 2;
     */
    quality: string;
}
/**
 * @generated from protobuf message stream.video.sfu.PublishRequest
 */
export interface PublishRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string sdp_offer = 2;
     */
    sdpOffer: string;
}
/**
 * @generated from protobuf message stream.video.sfu.PublishResponse
 */
export interface PublishResponse {
    /**
     * @generated from protobuf field: string sdp_answer = 2;
     */
    sdpAnswer: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVideoQualityRequest$Type extends MessageType<UpdateVideoQualityRequest> {
    constructor() {
        super("stream.video.sfu.UpdateVideoQualityRequest", [
            { no: 1, name: "stream_qualities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamQuality },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateVideoQualityRequest>): UpdateVideoQualityRequest {
        const message = { streamQualities: [], sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateVideoQualityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVideoQualityRequest): UpdateVideoQualityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.video.sfu.StreamQuality stream_qualities */ 1:
                    message.streamQualities.push(StreamQuality.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVideoQualityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.video.sfu.StreamQuality stream_qualities = 1; */
        for (let i = 0; i < message.streamQualities.length; i++)
            StreamQuality.internalBinaryWrite(message.streamQualities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateVideoQualityRequest
 */
export const UpdateVideoQualityRequest = new UpdateVideoQualityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVideoQualityResponse$Type extends MessageType<UpdateVideoQualityResponse> {
    constructor() {
        super("stream.video.sfu.UpdateVideoQualityResponse", []);
    }
    create(value?: PartialMessage<UpdateVideoQualityResponse>): UpdateVideoQualityResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateVideoQualityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVideoQualityResponse): UpdateVideoQualityResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateVideoQualityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateVideoQualityResponse
 */
export const UpdateVideoQualityResponse = new UpdateVideoQualityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMuteStateRequest$Type extends MessageType<UpdateMuteStateRequest> {
    constructor() {
        super("stream.video.sfu.UpdateMuteStateRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_mute_changed", kind: "message", oneof: "mute", T: () => AudioMuteChanged },
            { no: 3, name: "video_mute_changed", kind: "message", oneof: "mute", T: () => VideoMuteChanged }
        ]);
    }
    create(value?: PartialMessage<UpdateMuteStateRequest>): UpdateMuteStateRequest {
        const message = { sessionId: "", mute: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMuteStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStateRequest): UpdateMuteStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* stream.video.sfu.AudioMuteChanged audio_mute_changed */ 2:
                    message.mute = {
                        oneofKind: "audioMuteChanged",
                        audioMuteChanged: AudioMuteChanged.internalBinaryRead(reader, reader.uint32(), options, (message.mute as any).audioMuteChanged)
                    };
                    break;
                case /* stream.video.sfu.VideoMuteChanged video_mute_changed */ 3:
                    message.mute = {
                        oneofKind: "videoMuteChanged",
                        videoMuteChanged: VideoMuteChanged.internalBinaryRead(reader, reader.uint32(), options, (message.mute as any).videoMuteChanged)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMuteStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* stream.video.sfu.AudioMuteChanged audio_mute_changed = 2; */
        if (message.mute.oneofKind === "audioMuteChanged")
            AudioMuteChanged.internalBinaryWrite(message.mute.audioMuteChanged, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.VideoMuteChanged video_mute_changed = 3; */
        if (message.mute.oneofKind === "videoMuteChanged")
            VideoMuteChanged.internalBinaryWrite(message.mute.videoMuteChanged, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateMuteStateRequest
 */
export const UpdateMuteStateRequest = new UpdateMuteStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMuteStateResponse$Type extends MessageType<UpdateMuteStateResponse> {
    constructor() {
        super("stream.video.sfu.UpdateMuteStateResponse", []);
    }
    create(value?: PartialMessage<UpdateMuteStateResponse>): UpdateMuteStateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMuteStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStateResponse): UpdateMuteStateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateMuteStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateMuteStateResponse
 */
export const UpdateMuteStateResponse = new UpdateMuteStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioMuteChanged$Type extends MessageType<AudioMuteChanged> {
    constructor() {
        super("stream.video.sfu.AudioMuteChanged", [
            { no: 1, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AudioMuteChanged>): AudioMuteChanged {
        const message = { muted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudioMuteChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioMuteChanged): AudioMuteChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool muted */ 1:
                    message.muted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudioMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool muted = 1; */
        if (message.muted !== false)
            writer.tag(1, WireType.Varint).bool(message.muted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.AudioMuteChanged
 */
export const AudioMuteChanged = new AudioMuteChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoMuteChanged$Type extends MessageType<VideoMuteChanged> {
    constructor() {
        super("stream.video.sfu.VideoMuteChanged", [
            { no: 2, name: "muted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VideoMuteChanged>): VideoMuteChanged {
        const message = { muted: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoMuteChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoMuteChanged): VideoMuteChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool muted */ 2:
                    message.muted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool muted = 2; */
        if (message.muted !== false)
            writer.tag(2, WireType.Varint).bool(message.muted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.VideoMuteChanged
 */
export const VideoMuteChanged = new VideoMuteChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSubscriptionsRequest$Type extends MessageType<UpdateSubscriptionsRequest> {
    constructor() {
        super("stream.video.sfu.UpdateSubscriptionsRequest", [
            { no: 1, name: "subscriptions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => VideoDimension } },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSubscriptionsRequest>): UpdateSubscriptionsRequest {
        const message = { subscriptions: {}, sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSubscriptionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsRequest): UpdateSubscriptionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, stream.video.sfu.VideoDimension> subscriptions */ 1:
                    this.binaryReadMap1(message.subscriptions, reader, options);
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: UpdateSubscriptionsRequest["subscriptions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UpdateSubscriptionsRequest["subscriptions"] | undefined, val: UpdateSubscriptionsRequest["subscriptions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = VideoDimension.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field stream.video.sfu.UpdateSubscriptionsRequest.subscriptions");
            }
        }
        map[key ?? ""] = val ?? VideoDimension.create();
    }
    internalBinaryWrite(message: UpdateSubscriptionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, stream.video.sfu.VideoDimension> subscriptions = 1; */
        for (let k of Object.keys(message.subscriptions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            VideoDimension.internalBinaryWrite(message.subscriptions[k], writer, options);
            writer.join().join();
        }
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateSubscriptionsRequest
 */
export const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendAnswerRequest$Type extends MessageType<SendAnswerRequest> {
    constructor() {
        super("stream.video.sfu.SendAnswerRequest", [
            { no: 1, name: "peer_type", kind: "enum", T: () => ["stream.video.sfu.PeerType", PeerType] },
            { no: 2, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendAnswerRequest>): SendAnswerRequest {
        const message = { peerType: 0, sdp: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendAnswerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerRequest): SendAnswerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.PeerType peer_type */ 1:
                    message.peerType = reader.int32();
                    break;
                case /* string sdp */ 2:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 4:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendAnswerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.PeerType peer_type = 1; */
        if (message.peerType !== 0)
            writer.tag(1, WireType.Varint).int32(message.peerType);
        /* string sdp = 2; */
        if (message.sdp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 4; */
        if (message.sessionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SendAnswerRequest
 */
export const SendAnswerRequest = new SendAnswerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendAnswerResponse$Type extends MessageType<SendAnswerResponse> {
    constructor() {
        super("stream.video.sfu.SendAnswerResponse", []);
    }
    create(value?: PartialMessage<SendAnswerResponse>): SendAnswerResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendAnswerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerResponse): SendAnswerResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendAnswerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SendAnswerResponse
 */
export const SendAnswerResponse = new SendAnswerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IceCandidateRequest$Type extends MessageType<IceCandidateRequest> {
    constructor() {
        super("stream.video.sfu.IceCandidateRequest", [
            { no: 1, name: "publisher", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "candidate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sdpMid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sdpMLineIndex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "usernameFragment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IceCandidateRequest>): IceCandidateRequest {
        const message = { publisher: false, candidate: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IceCandidateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IceCandidateRequest): IceCandidateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool publisher */ 1:
                    message.publisher = reader.bool();
                    break;
                case /* string candidate */ 2:
                    message.candidate = reader.string();
                    break;
                case /* optional string sdpMid */ 3:
                    message.sdpMid = reader.string();
                    break;
                case /* optional uint32 sdpMLineIndex */ 4:
                    message.sdpMLineIndex = reader.uint32();
                    break;
                case /* optional string usernameFragment */ 5:
                    message.usernameFragment = reader.string();
                    break;
                case /* string session_id */ 7:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IceCandidateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool publisher = 1; */
        if (message.publisher !== false)
            writer.tag(1, WireType.Varint).bool(message.publisher);
        /* string candidate = 2; */
        if (message.candidate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.candidate);
        /* optional string sdpMid = 3; */
        if (message.sdpMid !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.sdpMid);
        /* optional uint32 sdpMLineIndex = 4; */
        if (message.sdpMLineIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sdpMLineIndex);
        /* optional string usernameFragment = 5; */
        if (message.usernameFragment !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.usernameFragment);
        /* string session_id = 7; */
        if (message.sessionId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.IceCandidateRequest
 */
export const IceCandidateRequest = new IceCandidateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IceCandidateResponse$Type extends MessageType<IceCandidateResponse> {
    constructor() {
        super("stream.video.sfu.IceCandidateResponse", []);
    }
    create(value?: PartialMessage<IceCandidateResponse>): IceCandidateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IceCandidateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IceCandidateResponse): IceCandidateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: IceCandidateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.IceCandidateResponse
 */
export const IceCandidateResponse = new IceCandidateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSubscriptionsResponse$Type extends MessageType<UpdateSubscriptionsResponse> {
    constructor() {
        super("stream.video.sfu.UpdateSubscriptionsResponse", []);
    }
    create(value?: PartialMessage<UpdateSubscriptionsResponse>): UpdateSubscriptionsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSubscriptionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsResponse): UpdateSubscriptionsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateSubscriptionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.UpdateSubscriptionsResponse
 */
export const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPublisherRequest$Type extends MessageType<SetPublisherRequest> {
    constructor() {
        super("stream.video.sfu.SetPublisherRequest", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPublisherRequest>): SetPublisherRequest {
        const message = { sdp: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPublisherRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherRequest): SetPublisherRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPublisherRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SetPublisherRequest
 */
export const SetPublisherRequest = new SetPublisherRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPublisherResponse$Type extends MessageType<SetPublisherResponse> {
    constructor() {
        super("stream.video.sfu.SetPublisherResponse", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPublisherResponse>): SetPublisherResponse {
        const message = { sdp: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPublisherResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherResponse): SetPublisherResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPublisherResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SetPublisherResponse
 */
export const SetPublisherResponse = new SetPublisherResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinRequest$Type extends MessageType<JoinRequest> {
    constructor() {
        super("stream.video.sfu.JoinRequest", [
            { no: 1, name: "subscriber_sdp_offer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "codec_settings", kind: "message", T: () => CodecSettings }
        ]);
    }
    create(value?: PartialMessage<JoinRequest>): JoinRequest {
        const message = { subscriberSdpOffer: "", sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinRequest): JoinRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string subscriber_sdp_offer */ 1:
                    message.subscriberSdpOffer = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                case /* stream.video.sfu.CodecSettings codec_settings */ 4:
                    message.codecSettings = CodecSettings.internalBinaryRead(reader, reader.uint32(), options, message.codecSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string subscriber_sdp_offer = 1; */
        if (message.subscriberSdpOffer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.subscriberSdpOffer);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        /* stream.video.sfu.CodecSettings codec_settings = 4; */
        if (message.codecSettings)
            CodecSettings.internalBinaryWrite(message.codecSettings, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.JoinRequest
 */
export const JoinRequest = new JoinRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinResponse$Type extends MessageType<JoinResponse> {
    constructor() {
        super("stream.video.sfu.JoinResponse", [
            { no: 1, name: "sdp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "call_state", kind: "message", T: () => CallState }
        ]);
    }
    create(value?: PartialMessage<JoinResponse>): JoinResponse {
        const message = { sdp: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinResponse): JoinResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp */ 1:
                    message.sdp = reader.string();
                    break;
                case /* stream.video.sfu.CallState call_state */ 2:
                    message.callState = CallState.internalBinaryRead(reader, reader.uint32(), options, message.callState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp = 1; */
        if (message.sdp !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdp);
        /* stream.video.sfu.CallState call_state = 2; */
        if (message.callState)
            CallState.internalBinaryWrite(message.callState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.JoinResponse
 */
export const JoinResponse = new JoinResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectRequest$Type extends MessageType<ConnectRequest> {
    constructor() {
        super("stream.video.sfu.ConnectRequest", [
            { no: 1, name: "sdp_offer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectRequest>): ConnectRequest {
        const message = { sdpOffer: "", token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectRequest): ConnectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp_offer */ 1:
                    message.sdpOffer = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp_offer = 1; */
        if (message.sdpOffer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdpOffer);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.ConnectRequest
 */
export const ConnectRequest = new ConnectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectResponse$Type extends MessageType<ConnectResponse> {
    constructor() {
        super("stream.video.sfu.ConnectResponse", [
            { no: 1, name: "sdp_answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectResponse>): ConnectResponse {
        const message = { sdpAnswer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectResponse): ConnectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp_answer */ 1:
                    message.sdpAnswer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp_answer = 1; */
        if (message.sdpAnswer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sdpAnswer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.ConnectResponse
 */
export const ConnectResponse = new ConnectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignalRequest$Type extends MessageType<SignalRequest> {
    constructor() {
        super("stream.video.sfu.SignalRequest", [
            { no: 1, name: "subscribe", kind: "message", oneof: "eventPayload", T: () => SubscribeRequest },
            { no: 2, name: "publish", kind: "message", oneof: "eventPayload", T: () => PublishRequest }
        ]);
    }
    create(value?: PartialMessage<SignalRequest>): SignalRequest {
        const message = { eventPayload: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignalRequest): SignalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.SubscribeRequest subscribe */ 1:
                    message.eventPayload = {
                        oneofKind: "subscribe",
                        subscribe: SubscribeRequest.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).subscribe)
                    };
                    break;
                case /* stream.video.sfu.PublishRequest publish */ 2:
                    message.eventPayload = {
                        oneofKind: "publish",
                        publish: PublishRequest.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).publish)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.SubscribeRequest subscribe = 1; */
        if (message.eventPayload.oneofKind === "subscribe")
            SubscribeRequest.internalBinaryWrite(message.eventPayload.subscribe, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.PublishRequest publish = 2; */
        if (message.eventPayload.oneofKind === "publish")
            PublishRequest.internalBinaryWrite(message.eventPayload.publish, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SignalRequest
 */
export const SignalRequest = new SignalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignalEvent$Type extends MessageType<SignalEvent> {
    constructor() {
        super("stream.video.sfu.SignalEvent", [
            { no: 1, name: "subscribe", kind: "message", oneof: "eventPayload", T: () => SubscribeResponse },
            { no: 2, name: "publish", kind: "message", oneof: "eventPayload", T: () => PublishResponse }
        ]);
    }
    create(value?: PartialMessage<SignalEvent>): SignalEvent {
        const message = { eventPayload: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignalEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignalEvent): SignalEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.video.sfu.SubscribeResponse subscribe */ 1:
                    message.eventPayload = {
                        oneofKind: "subscribe",
                        subscribe: SubscribeResponse.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).subscribe)
                    };
                    break;
                case /* stream.video.sfu.PublishResponse publish */ 2:
                    message.eventPayload = {
                        oneofKind: "publish",
                        publish: PublishResponse.internalBinaryRead(reader, reader.uint32(), options, (message.eventPayload as any).publish)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignalEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.video.sfu.SubscribeResponse subscribe = 1; */
        if (message.eventPayload.oneofKind === "subscribe")
            SubscribeResponse.internalBinaryWrite(message.eventPayload.subscribe, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.video.sfu.PublishResponse publish = 2; */
        if (message.eventPayload.oneofKind === "publish")
            PublishResponse.internalBinaryWrite(message.eventPayload.publish, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SignalEvent
 */
export const SignalEvent = new SignalEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("stream.video.sfu.SubscribeRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sdp_offer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "quality", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = { token: "", sdpOffer: "", quality: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string sdp_offer */ 2:
                    message.sdpOffer = reader.string();
                    break;
                case /* string quality */ 3:
                    message.quality = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string sdp_offer = 2; */
        if (message.sdpOffer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdpOffer);
        /* string quality = 3; */
        if (message.quality !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.quality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeResponse$Type extends MessageType<SubscribeResponse> {
    constructor() {
        super("stream.video.sfu.SubscribeResponse", [
            { no: 2, name: "quality", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeResponse>): SubscribeResponse {
        const message = { quality: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeResponse): SubscribeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string quality */ 2:
                    message.quality = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string quality = 2; */
        if (message.quality !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.SubscribeResponse
 */
export const SubscribeResponse = new SubscribeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishRequest$Type extends MessageType<PublishRequest> {
    constructor() {
        super("stream.video.sfu.PublishRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sdp_offer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PublishRequest>): PublishRequest {
        const message = { token: "", sdpOffer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishRequest): PublishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string sdp_offer */ 2:
                    message.sdpOffer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string sdp_offer = 2; */
        if (message.sdpOffer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdpOffer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.PublishRequest
 */
export const PublishRequest = new PublishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishResponse$Type extends MessageType<PublishResponse> {
    constructor() {
        super("stream.video.sfu.PublishResponse", [
            { no: 2, name: "sdp_answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PublishResponse>): PublishResponse {
        const message = { sdpAnswer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublishResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishResponse): PublishResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdp_answer */ 2:
                    message.sdpAnswer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublishResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sdp_answer = 2; */
        if (message.sdpAnswer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdpAnswer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.PublishResponse
 */
export const PublishResponse = new PublishResponse$Type();
/**
 * @generated ServiceType for protobuf service stream.video.sfu.SignalServer
 */
export const SignalServer = new ServiceType("stream.video.sfu.SignalServer", [
    { name: "Join", options: {}, I: JoinRequest, O: JoinResponse },
    { name: "SetPublisher", options: {}, I: SetPublisherRequest, O: SetPublisherResponse },
    { name: "SendAnswer", options: {}, I: SendAnswerRequest, O: SendAnswerResponse },
    { name: "SendIceCandidate", options: {}, I: IceCandidateRequest, O: IceCandidateResponse },
    { name: "UpdateSubscriptions", options: {}, I: UpdateSubscriptionsRequest, O: UpdateSubscriptionsResponse },
    { name: "UpdateMuteState", options: {}, I: UpdateMuteStateRequest, O: UpdateMuteStateResponse },
    { name: "RequestVideoQuality", options: {}, I: UpdateVideoQualityRequest, O: UpdateVideoQualityResponse }
]);
