skip_docs
video_buddy_port = 7654
metro_port = 8081
build_dir = 'dist'
bundle_id = 'io.getstream.rnvideosample'
bundle_id_broadcast = 'io.getstream.rnvideosample.Broadcast-Extension'
provisioning_profile_prefix = 'match AppStore '
android_app_id = '1:296557120037:android:b5d44592a3a4b44af60dcc'

before_all do
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
  end
end

desc 'Installs all Certs and Profiles necessary for appstore'
lane :match_appstore do
  match(
    type: 'appstore',
    app_identifier: [bundle_id, bundle_id_broadcast],
    readonly: is_ci
  )
end

lane :rubocop do
  sh('bundle exec rubocop')
end

lane :start_video_buddy do
  sh('stream-video-buddy auth')
  sh('node ../e2e/js/server.js > video-buddy-log.txt 2>&1 &')
end

lane :stop_video_buddy do
  sh("lsof -t -i:#{video_buddy_port} | xargs kill -s INT || true")
end

lane :stop_metro do
  sh("lsof -t -i:#{metro_port} | xargs kill -s INT || true")
end

lane :load_package do
  load_json(json_path: 'package.json')
end

lane :pod_install do
  Dir.chdir('../ios') do
    sh('bundle exec pod install')
  rescue StandardError # Due this error https://github.com/facebook/react-native/issues/36945#issuecomment-1556230597
    retry_count = 0
    success = false
    until success
      begin
        sh('bundle exec pod update hermes-engine --no-repo-update')
        success = true
      rescue StandardError => e
        retry_count += 1
        UI.user_error!(e) if retry_count > 2
      end
    end
  end
end

lane :bump_ios_version_number do
  increment_version_number(
    version_number: load_package['version'],
    xcodeproj: 'ios/StreamReactNativeVideoSDKSample.xcodeproj'
  )

  current_build_number = app_store_build_number(
    live: false,
    app_identifier: bundle_id
  )

  increment_build_number(
    build_number: current_build_number + 1,
    xcodeproj: 'ios/StreamReactNativeVideoSDKSample.xcodeproj'
  )
end

lane :build_ios do
  app_store_connect_api_key

  bump_ios_version_number if is_ci

  match_appstore

  gym(
    workspace: 'ios/StreamReactNativeVideoSDKSample.xcworkspace',
    scheme: 'StreamReactNativeVideoSDKSample',
    export_method: 'app-store',
    silent: true,
    clean: true,
    export_options: {
      provisioningProfiles: {
        bundle_id => provisioning_profile_prefix + bundle_id,
        bundle_id_broadcast => provisioning_profile_prefix + bundle_id_broadcast
      }
    },
    include_symbols: true,
    output_directory: build_dir
  )

  Dir.chdir('..') do
    sh("mkdir -p #{build_dir} && mv -f #{lane_context[SharedValues::IPA_OUTPUT_PATH]} #{build_dir}/app.ipa")
  end
end

lane :test_ios do |options|
  start_video_buddy

  udid = prepare_simulator(device: 'iPhone 14 Pro')

  unless options[:skip_install]
    app = build_app_for_ios_simulator(
      scheme: 'StreamReactNativeVideoSDKSample',
      workspace: 'ios/StreamReactNativeVideoSDKSample.xcworkspace',
      configuration: 'Release',
      output_directory: build_dir
    )
    sh("xcrun simctl install #{udid} #{app}")
  end

  Dir.chdir('..') do
    # Record simulator screen using codec h264
    sh("xcrun simctl io #{udid} recordVideo --codec h264 --force fastlane/video.mp4 > fastlane/recording.log 2>&1 &")
    # Record simulator log in compact style
    sh("xcrun simctl spawn #{udid} log stream --style compact > fastlane/device.log 2>&1 &")

    sh('maestro test e2e/test.yaml')
  ensure
    `pgrep simctl`.strip.split("\n").each { |pid| sh("kill -s INT #{pid} || true") }
    sh('maestro hierarchy > fastlane/hierarchy.json || true')
    [
      'recording.log',
      'hierarchy.json',
      'device.log',
      'video.mp4'
    ].each { |f| sh("mv -f fastlane/#{f} ~/.maestro/tests || true") } if is_ci
    stop_video_buddy
    stop_metro
  end
end

lane :deploy_ios do
  upload_to_testflight(
    api_key: app_store_connect_api_key,
    ipa: "#{build_dir}/app.ipa",
    groups: ['Dev Testers', 'Stream Testers'],
    changelog: 'Lots of amazing new features to test out!',
    reject_build_waiting_for_review: false,
    skip_waiting_for_build_processing: false
  )

rescue StandardError => e
  UI.user_error!(e) unless e.message.include?('Another build is in review')

  UI.important('Another build is already in beta review. Skipping beta review submission')
end

lane :bump_android_version_number do
  ENV['ENVFILE'] = '.env.production'

  latest_app_distribution_version_code = firebase_app_distribution_get_latest_release(
    app: android_app_id
  )[:buildVersion].to_i

  increment_version_code(
    gradle_file_path: 'android/app/build.gradle',
    version_code: latest_app_distribution_version_code + 1
  )

  increment_version_name(
    gradle_file_path: 'android/app/build.gradle',
    version_name: load_package['version']
  )
end

lane :build_android do
  bump_android_version_number if is_ci

  gradle(project_dir: 'android', tasks: %w[clean assembleRelease])

  Dir.chdir('..') do
    sh("mkdir -p #{build_dir} && mv -f #{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]} #{build_dir}/app.apk")
  end
end

lane :test_android do |options|
  build_android unless is_ci || options[:skip_install]

  start_video_buddy

  wait_android_emu_idle(load_threshold: 1, timeout: 2200) if is_ci

  emulator_status = -> { sh('adb devices').include?('emulator') }

  Dir.chdir('..') do
    unless options[:skip_install]
      sh("adb uninstall #{bundle_id} >/dev/null || true")
      sh("adb install #{build_dir}/app.apk")
    end

    sh('adb logcat -c || true') if emulator_status.call

    # Record emulator screen using codec h264
    # adb limits the recording to 3 minutes, so we bypass this by redirecting the stream to ffmpeg tool
    video_group_pid = Process.spawn('adb shell "while true; do screenrecord --output-format=h264 -; done" | ' \
                                    'ffmpeg -y -i - fastlane/video.mp4 > fastlane/recording.log 2>&1 &', pgroup: true)
    video_pid = `pgrep -g #{Process.getpgid(video_group_pid)}`.split.map(&:to_i).first

    sh('maestro test e2e/test.yaml')
  ensure
    sh("kill -s INT #{video_pid} || true")
    sh('adb logcat -d > fastlane/device.log || true') if emulator_status.call
    sh('maestro hierarchy > fastlane/hierarchy.json || true')
    [
      'recording.log',
      'hierarchy.json',
      'device.log',
      'video.mp4'
    ].each { |f| sh("mv -f fastlane/#{f} ~/.maestro/tests || true") } if is_ci
    stop_video_buddy
    stop_metro
  end
end

lane :deploy_android do
  firebase_app_distribution(
    app: android_app_id,
    android_artifact_type: 'APK',
    android_artifact_path: "#{build_dir}/app.apk",
    groups: 'react-native-dev, video-sdk-non-devs'
  )
end
